<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>所有文章 on tangzixiang&#39;s blog</title>
		<link>https://tangzixiang.github.io/posts/</link>
		<description>Recent content in 所有文章 on tangzixiang&#39;s blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Mon, 10 Feb 2020 00:00:02 +0800</lastBuildDate>
		<atom:link href="https://tangzixiang.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>[Go] 深入理解Go之generate</title>
			<link>https://tangzixiang.github.io/posts/2020/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3go%E4%B9%8Bgenerate/</link>
			<pubDate>Mon, 10 Feb 2020 00:00:02 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3go%E4%B9%8Bgenerate/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Go] go generate介绍</title>
			<link>https://tangzixiang.github.io/posts/2020/02/go-generate%E4%BB%8B%E7%BB%8D/</link>
			<pubDate>Mon, 10 Feb 2020 00:00:01 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/02/go-generate%E4%BB%8B%E7%BB%8D/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Go] 使用 Gomock 进行单元测试</title>
			<link>https://tangzixiang.github.io/posts/2020/02/%E4%BD%BF%E7%94%A8-gomock-%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
			<pubDate>Mon, 10 Feb 2020 00:00:00 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/02/%E4%BD%BF%E7%94%A8-gomock-%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>动态追踪技术漫谈（Dynamic Tracing）</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA%E6%8A%80%E6%9C%AF%E6%BC%AB%E8%B0%88/</link>
			<pubDate>Tue, 28 Jan 2020 00:00:00 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA%E6%8A%80%E6%9C%AF%E6%BC%AB%E8%B0%88/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[MySQL] 为什么 mysql 数据库的 timestamp 只能从 1970 到 2038 的某一时间？</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E4%B8%BA%E4%BB%80%E4%B9%88mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84timestamp%E5%8F%AA%E8%83%BD%E4%BB%8E1970%E5%88%B02038%E7%9A%84%E6%9F%90%E4%B8%80%E6%97%B6%E9%97%B4/</link>
			<pubDate>Sun, 19 Jan 2020 00:00:10 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E4%B8%BA%E4%BB%80%E4%B9%88mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84timestamp%E5%8F%AA%E8%83%BD%E4%BB%8E1970%E5%88%B02038%E7%9A%84%E6%9F%90%E4%B8%80%E6%97%B6%E9%97%B4/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[MySQL] MYSQL 中的 COLLATE 是什么？</title>
			<link>https://tangzixiang.github.io/posts/2020/01/mysql%E4%B8%AD%E7%9A%84collate%E6%98%AF%E4%BB%80%E4%B9%88/</link>
			<pubDate>Sun, 19 Jan 2020 00:00:09 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/mysql%E4%B8%AD%E7%9A%84collate%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>GraphQL：API 的未来</title>
			<link>https://tangzixiang.github.io/posts/2020/01/graphqlapi-%E7%9A%84%E6%9C%AA%E6%9D%A5/</link>
			<pubDate>Sun, 19 Jan 2020 00:00:07 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/graphqlapi-%E7%9A%84%E6%9C%AA%E6%9D%A5/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>JavaScript 那些写出来会被同事揍的骚操作</title>
			<link>https://tangzixiang.github.io/posts/2020/01/javascript-%E9%82%A3%E4%BA%9B%E5%86%99%E5%87%BA%E6%9D%A5%E4%BC%9A%E8%A2%AB%E5%90%8C%E4%BA%8B%E6%8F%8D%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/</link>
			<pubDate>Sun, 19 Jan 2020 00:00:04 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/javascript-%E9%82%A3%E4%BA%9B%E5%86%99%E5%87%BA%E6%9D%A5%E4%BC%9A%E8%A2%AB%E5%90%8C%E4%BA%8B%E6%8F%8D%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>CORS Not Supporting Credentials</title>
			<link>https://tangzixiang.github.io/posts/2020/01/cors-not-supporting-credentials/</link>
			<pubDate>Sun, 19 Jan 2020 00:00:02 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/cors-not-supporting-credentials/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Server-Side Access Control</title>
			<link>https://tangzixiang.github.io/posts/2020/01/server-side-access-control/</link>
			<pubDate>Sun, 19 Jan 2020 00:00:01 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/server-side-access-control/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>HTTP访问控制（CORS）</title>
			<link>https://tangzixiang.github.io/posts/2020/01/http%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6cors/</link>
			<pubDate>Sun, 19 Jan 2020 00:00:00 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/http%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6cors/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[ETCD] 在系统中用etcd实现服务注册和发现</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%94%A8etcd%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0/</link>
			<pubDate>Fri, 17 Jan 2020 00:00:12 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%94%A8etcd%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[ETCD] golang etcd 简明教程</title>
			<link>https://tangzixiang.github.io/posts/2020/01/golang-etcd-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</link>
			<pubDate>Fri, 17 Jan 2020 00:00:11 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/golang-etcd-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[ETCD] etcd常用操作介绍</title>
			<link>https://tangzixiang.github.io/posts/2020/01/etcd%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E4%BB%8B%E7%BB%8D/</link>
			<pubDate>Fri, 17 Jan 2020 00:00:10 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/etcd%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E4%BB%8B%E7%BB%8D/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[ETCD] 看图轻松了解etcd</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E7%9C%8B%E5%9B%BE%E8%BD%BB%E6%9D%BE%E4%BA%86%E8%A7%A3etcd/</link>
			<pubDate>Fri, 17 Jan 2020 00:00:09 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E7%9C%8B%E5%9B%BE%E8%BD%BB%E6%9D%BE%E4%BA%86%E8%A7%A3etcd/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>用 Golang 构建 gRPC 服务</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E7%94%A8-golang-%E6%9E%84%E5%BB%BA-grpc-%E6%9C%8D%E5%8A%A1/</link>
			<pubDate>Fri, 17 Jan 2020 00:00:07 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E7%94%A8-golang-%E6%9E%84%E5%BB%BA-grpc-%E6%9C%8D%E5%8A%A1/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>分布式服务框架 gRPC</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-grpc/</link>
			<pubDate>Fri, 17 Jan 2020 00:00:06 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-grpc/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>在 Go 中使用 Protobuf</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E5%9C%A8-go-%E4%B8%AD%E4%BD%BF%E7%94%A8-protobuf/</link>
			<pubDate>Fri, 17 Jan 2020 00:00:05 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E5%9C%A8-go-%E4%B8%AD%E4%BD%BF%E7%94%A8-protobuf/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Protobuf 生成 Go 代码指南</title>
			<link>https://tangzixiang.github.io/posts/2020/01/protobuf-%E7%94%9F%E6%88%90-go-%E4%BB%A3%E7%A0%81%E6%8C%87%E5%8D%97/</link>
			<pubDate>Fri, 17 Jan 2020 00:00:04 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/protobuf-%E7%94%9F%E6%88%90-go-%E4%BB%A3%E7%A0%81%E6%8C%87%E5%8D%97/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Protobuf 编码指南</title>
			<link>https://tangzixiang.github.io/posts/2020/01/protobuf-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97/</link>
			<pubDate>Fri, 17 Jan 2020 00:00:03 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/protobuf-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>Protobuf 语言指南</title>
			<link>https://tangzixiang.github.io/posts/2020/01/protobuf-%E8%AF%AD%E8%A8%80%E6%8C%87%E5%8D%97/</link>
			<pubDate>Fri, 17 Jan 2020 00:00:02 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/protobuf-%E8%AF%AD%E8%A8%80%E6%8C%87%E5%8D%97/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>详解 varint 编码原理</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E8%AF%A6%E8%A7%A3varint%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86/</link>
			<pubDate>Fri, 17 Jan 2020 00:00:01 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E8%AF%A6%E8%A7%A3varint%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Docker] [MQTT] 在 ubuntu 上使用 docker 搭建 EMQX</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E5%9C%A8-ubuntu-%E4%B8%8A%E4%BD%BF%E7%94%A8-docker-%E6%90%AD%E5%BB%BA-emqx/</link>
			<pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E5%9C%A8-ubuntu-%E4%B8%8A%E4%BD%BF%E7%94%A8-docker-%E6%90%AD%E5%BB%BA-emqx/</guid>
			<description>emqx 官网 https://www.emqx.io/ 1. 安装 doker 参考 Ubuntu安装Docker及Docker的基本命令 - 简书 2. 拉取 emqx $ docker pull emqx/emqx:v4.0.0 3. 启动 emqx 参考：https://hub.docker.com/r/emqx/emqx $ sudo mkdir -p /data/log/emqx $ sudo chmod -R 777 /data/log/emqx $ sudo docker run -d --name emqx31 -p 1883:1883 -p 8083:8083 -p 8883:8883 -p 8084:8084 -p 18083:18083 -p 8080:8080 \ --network bridge \ -e EMQX_LISTENER__TCP__EXTERNAL=1883 \ -e EMQX_LOADED_PLUGINS=&amp;#34;emqx_auth_redis,emqx_recon,emqx_retainer,emqx_management,emqx_dashboard&amp;#34; \ -e EMQX_AUTH__REDIS__SERVER=&amp;#34;192.168.1.1:6379&amp;#34; \ -e EMQX_AUTH__REDIS__PASSWORD=&amp;#34;123456&amp;#34; \ -e EMQX_AUTH__REDIS__PASSWORD_HASH=plain \ -e EMQX_ALLOW_ANONYMOUS=false \ -e EMQX_LOG__DIR=/log \ -e EMQX_LOG__INFO__FILE=&amp;#34;info.</description>
			<content type="html"><![CDATA[<p>emqx 官网 <a href="https://www.emqx.io/"  target="_blank"  >https://www.emqx.io/</a> 
</p>
<h2 id="1--doker">1. 安装 doker</h2>
<p>参考  <a href="https://www.jianshu.com/p/80e3fd18a17e"  target="_blank"  >Ubuntu安装Docker及Docker的基本命令 - 简书</a> 
</p>
<h2 id="2--emqx">2. 拉取 emqx</h2>
<pre><code>$ docker pull emqx/emqx:v4.0.0
</code></pre><h2 id="3--emqx">3. 启动 emqx</h2>
<p>参考：<a href="https://hub.docker.com/r/emqx/emqx"  target="_blank"  >https://hub.docker.com/r/emqx/emqx</a> 
</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo mkdir -p /data/log/emqx
$ sudo chmod -R <span class="m">777</span> /data/log/emqx 
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo docker run -d --name emqx31 -p 1883:1883 -p 8083:8083 -p 8883:8883 -p 8084:8084 -p 18083:18083 -p 8080:8080 <span class="se">\
</span><span class="se"></span>--network bridge <span class="se">\
</span><span class="se"></span>-e <span class="nv">EMQX_LISTENER__TCP__EXTERNAL</span><span class="o">=</span><span class="m">1883</span> <span class="se">\
</span><span class="se"></span>-e <span class="nv">EMQX_LOADED_PLUGINS</span><span class="o">=</span><span class="s2">&#34;emqx_auth_redis,emqx_recon,emqx_retainer,emqx_management,emqx_dashboard&#34;</span> <span class="se">\
</span><span class="se"></span>-e <span class="nv">EMQX_AUTH__REDIS__SERVER</span><span class="o">=</span><span class="s2">&#34;192.168.1.1:6379&#34;</span> <span class="se">\
</span><span class="se"></span>-e <span class="nv">EMQX_AUTH__REDIS__PASSWORD</span><span class="o">=</span><span class="s2">&#34;123456&#34;</span> <span class="se">\
</span><span class="se"></span>-e <span class="nv">EMQX_AUTH__REDIS__PASSWORD_HASH</span><span class="o">=</span>plain <span class="se">\
</span><span class="se"></span>-e <span class="nv">EMQX_ALLOW_ANONYMOUS</span><span class="o">=</span><span class="nb">false</span> <span class="se">\
</span><span class="se"></span>-e <span class="nv">EMQX_LOG__DIR</span><span class="o">=</span>/log <span class="se">\
</span><span class="se"></span>-e <span class="nv">EMQX_LOG__INFO__FILE</span><span class="o">=</span><span class="s2">&#34;info.log&#34;</span> <span class="se">\
</span><span class="se"></span>-e <span class="nv">EMQX_LOG__ERROR__FILE</span><span class="o">=</span><span class="s2">&#34;error.log&#34;</span> <span class="se">\
</span><span class="se"></span>-v /data/log/emqx:/log <span class="se">\
</span><span class="se"></span>emqx/emqx:v4.0.0
</code></pre></div><h2 id="4--api--redis-">4. 请求 API 查看是否开启 redis 插件</h2>
<p>参考 <a href="https://docs.emqx.io/broker/latest/cn/rest.html#plugins"  target="_blank"  >https://docs.emqx.io/broker/latest/cn/rest.html#plugins</a> 
</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">curl --request GET   --url http://127.0.0.1:18083/api/v4/plugins   --header <span class="s1">&#39;authorization: Basic YWRtaW46cHVibGlj&#39;</span> <span class="p">|</span> jq

<span class="o">{</span>
  <span class="s2">&#34;code&#34;</span>: 0,
  <span class="s2">&#34;data&#34;</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">&#34;node&#34;</span>: <span class="s2">&#34;6fa9662848ff@172.17.0.2&#34;</span>,
      <span class="s2">&#34;plugins&#34;</span>: <span class="o">[</span>
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_auth_clientid&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Authentication with ClientId/Password&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;auth&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_auth_http&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Authentication/ACL with HTTP API&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;auth&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_auth_jwt&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Authentication with JWT&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;auth&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_auth_ldap&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Authentication/ACL with LDAP&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;auth&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_auth_mongo&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Authentication/ACL with MongoDB&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;auth&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_auth_mysql&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Authentication/ACL with MySQL&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;auth&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_auth_pgsql&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Authentication/ACL with PostgreSQL&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;auth&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_auth_redis&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Authentication/ACL with Redis&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: true,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;auth&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_auth_username&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Authentication with Username and Password&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;auth&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_bridge_mqtt&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Bridge to MQTT Broker&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;bridge&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_coap&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X CoAP Gateway&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;protocol&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_dashboard&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Web Dashboard&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: true,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;feature&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_delayed_publish&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Delayed Publish&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;feature&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_lua_hook&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Lua Hooks&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;feature&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_lwm2m&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X LwM2M Gateway&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;protocol&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_management&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Management API and CLI&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: true,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;feature&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_plugin_template&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Plugin Template&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;feature&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_psk_file&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQX PSK Plugin from File&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;feature&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_recon&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Recon Plugin&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: true,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;feature&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_reloader&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Reloader Plugin&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;feature&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_retainer&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Retainer&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: true,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;feature&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_rule_engine&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Rule Engine&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;feature&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_sn&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X MQTT-SN Plugin&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;protocol&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_statsd&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;Statsd for EMQ X&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;feature&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_stomp&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Stomp Protocol Plugin&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;protocol&#34;</span>
        <span class="o">}</span>,
        <span class="o">{</span>
          <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;emqx_web_hook&#34;</span>,
          <span class="s2">&#34;version&#34;</span>: <span class="s2">&#34;4.0.0&#34;</span>,
          <span class="s2">&#34;description&#34;</span>: <span class="s2">&#34;EMQ X Webhook Plugin&#34;</span>,
          <span class="s2">&#34;active&#34;</span>: false,
          <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;feature&#34;</span>
        <span class="o">}</span>
      <span class="o">]</span>
    <span class="o">}</span>
  <span class="o">]</span>
<span class="o">}</span>
</code></pre></div><h2 id="5--redis-">5. 登录 redis 添加账号</h2>
<p>参考 <a href="https://docs.emqx.io/broker/latest/cn/plugins.html#redis"  target="_blank"  >https://docs.emqx.io/broker/latest/cn/plugins.html#redis</a> 
</p>
<blockquote>
<p>HSET mqtt_user:<!-- raw HTML omitted --> password &ldquo;passwd&rdquo;</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">192.168.1.1:6379&gt; HSET mqtt_user:user01 password <span class="s2">&#34;</span><span class="s2">123456
</span></code></pre></div><h2 id="6---mosquitto--mqtt">6. 安装  mosquitto 测试是否正常连接 MQTT</h2>
<p>参考 <a href="https://blog.csdn.net/yangkunpengD/article/details/87367128"  target="_blank"  >MQTT mosquitto</a> 
</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"> $ mosquitto_sub -v -t <span class="nb">test</span> -u user01 -P <span class="m">123456</span>
 $ mosquitto_pub -t <span class="nb">test</span> -m message -u user01 -P <span class="m">123456</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>[Linux] Linux 入门</title>
			<link>https://tangzixiang.github.io/posts/2020/01/linux-%E5%85%A5%E9%97%A8/</link>
			<pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/linux-%E5%85%A5%E9%97%A8/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Nginx] Nginx 通关攻略</title>
			<link>https://tangzixiang.github.io/posts/2020/01/nginx-%E5%AD%A6%E4%B9%A0%E4%B8%80%E8%B7%AF%E5%90%91%E8%A5%BF/</link>
			<pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/nginx-%E5%AD%A6%E4%B9%A0%E4%B8%80%E8%B7%AF%E5%90%91%E8%A5%BF/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Nginx] nginx.conf 配置文件详解</title>
			<link>https://tangzixiang.github.io/posts/2020/01/nginx.conf-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
			<pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/nginx.conf-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Git] Git 面試題</title>
			<link>https://tangzixiang.github.io/posts/2020/01/git-%E9%9D%A2%E8%A9%A6%E9%A1%8C/</link>
			<pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/git-%E9%9D%A2%E8%A9%A6%E9%A1%8C/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Git] Reset、Revert 跟 Rebase 指令有什麼差別？</title>
			<link>https://tangzixiang.github.io/posts/2020/01/resetrevert-%E8%B7%9F-rebase-%E6%8C%87%E4%BB%A4%E6%9C%89%E4%BB%80%E9%BA%BC%E5%B7%AE%E5%88%A5/</link>
			<pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/resetrevert-%E8%B7%9F-rebase-%E6%8C%87%E4%BB%A4%E6%9C%89%E4%BB%80%E9%BA%BC%E5%B7%AE%E5%88%A5/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Git] 使用 reabse 修改历史</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E4%BD%BF%E7%94%A8-reabse-%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2/</link>
			<pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E4%BD%BF%E7%94%A8-reabse-%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2/</guid>
			<description>注意： 不要在多人合作项目中修改已推送出去的历史！！！可以考虑使用 revert 重新提交一个相反操作的 commit 来抵消上一次的提交。
参考：
 【狀況題】修改歷史訊息  【狀況題】把多個 Commit 合併成一個 Commit  【狀況題】把一個 Commit 拆解成多個 Commit  【狀況題】想要在某些 Commit 之間再加新的 Commit  【狀況題】想要刪除某幾個 Commit 或是調整 Commit 的順序   </description>
			<content type="html"><![CDATA[<p>注意： 不要在多人合作项目中修改已推送出去的历史！！！可以考虑使用 revert 重新提交一个相反操作的 commit 来抵消上一次的提交。</p>
<p>参考：</p>
<ul>
<li><a href="https://gitbook.tw/chapters/rewrite-history/change-commit-message.html"  target="_blank"  >【狀況題】修改歷史訊息</a> 
</li>
<li><a href="https://gitbook.tw/chapters/rewrite-history/merge-multiple-commits-to-one-commit.html"  target="_blank"  >【狀況題】把多個 Commit 合併成一個 Commit</a> 
</li>
<li><a href="https://gitbook.tw/chapters/rewrite-history/split-one-commit-to-many-commits.html"  target="_blank"  >【狀況題】把一個 Commit 拆解成多個 Commit</a> 
</li>
<li><a href="https://gitbook.tw/chapters/rewrite-history/add-new-commit.html"  target="_blank"  >【狀況題】想要在某些 Commit 之間再加新的 Commit</a> 
</li>
<li><a href="https://gitbook.tw/chapters/rewrite-history/remove-and-reorder-commit.html"  target="_blank"  >【狀況題】想要刪除某幾個 Commit 或是調整 Commit 的順序</a> 
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>[Git] 可以刪掉全部的分支嗎？</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E5%8F%AF%E4%BB%A5%E5%88%AA%E6%8E%89%E5%85%A8%E9%83%A8%E7%9A%84%E5%88%86%E6%94%AF%E5%97%8E/</link>
			<pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E5%8F%AF%E4%BB%A5%E5%88%AA%E6%8E%89%E5%85%A8%E9%83%A8%E7%9A%84%E5%88%86%E6%94%AF%E5%97%8E/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Git]【冷知識】怎麼樣把檔案真正的從 Git 裡移掉？</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E5%86%B7%E7%9F%A5%E8%AD%98%E6%80%8E%E9%BA%BC%E6%A8%A3%E6%8A%8A%E6%AA%94%E6%A1%88%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%BE%9E-git-%E8%A3%A1%E7%A7%BB%E6%8E%89/</link>
			<pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E5%86%B7%E7%9F%A5%E8%AD%98%E6%80%8E%E9%BA%BC%E6%A8%A3%E6%8A%8A%E6%AA%94%E6%A1%88%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%BE%9E-git-%E8%A3%A1%E7%A7%BB%E6%8E%89/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Git]【冷知識】斷頭（detached HEAD）是怎麼一回事？</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E5%86%B7%E7%9F%A5%E8%AD%98%E6%96%B7%E9%A0%ADdetached-head%E6%98%AF%E6%80%8E%E9%BA%BC%E4%B8%80%E5%9B%9E%E4%BA%8B/</link>
			<pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E5%86%B7%E7%9F%A5%E8%AD%98%E6%96%B7%E9%A0%ADdetached-head%E6%98%AF%E6%80%8E%E9%BA%BC%E4%B8%80%E5%9B%9E%E4%BA%8B/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Git]【狀況題】不小心使用 hard 模式 Reset 了某個 Commit，救得回來嗎？</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E7%8B%80%E6%B3%81%E9%A1%8C%E4%B8%8D%E5%B0%8F%E5%BF%83%E4%BD%BF%E7%94%A8-hard-%E6%A8%A1%E5%BC%8F-reset-%E4%BA%86%E6%9F%90%E5%80%8B-commit%E6%95%91%E5%BE%97%E5%9B%9E%E4%BE%86%E5%97%8E/</link>
			<pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E7%8B%80%E6%B3%81%E9%A1%8C%E4%B8%8D%E5%B0%8F%E5%BF%83%E4%BD%BF%E7%94%A8-hard-%E6%A8%A1%E5%BC%8F-reset-%E4%BA%86%E6%9F%90%E5%80%8B-commit%E6%95%91%E5%BE%97%E5%9B%9E%E4%BE%86%E5%97%8E/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Git]【狀況題】不小心把還沒合併的分支砍掉了，救得回來嗎？</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E7%8B%80%E6%B3%81%E9%A1%8C%E4%B8%8D%E5%B0%8F%E5%BF%83%E6%8A%8A%E9%82%84%E6%B2%92%E5%90%88%E4%BD%B5%E7%9A%84%E5%88%86%E6%94%AF%E7%A0%8D%E6%8E%89%E4%BA%86%E6%95%91%E5%BE%97%E5%9B%9E%E4%BE%86%E5%97%8E/</link>
			<pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E7%8B%80%E6%B3%81%E9%A1%8C%E4%B8%8D%E5%B0%8F%E5%BF%83%E6%8A%8A%E9%82%84%E6%B2%92%E5%90%88%E4%BD%B5%E7%9A%84%E5%88%86%E6%94%AF%E7%A0%8D%E6%8E%89%E4%BA%86%E6%95%91%E5%BE%97%E5%9B%9E%E4%BE%86%E5%97%8E/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Git]【狀況題】如果你只想要某個分支的某幾個 Commit？</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E7%8B%80%E6%B3%81%E9%A1%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%8F%AA%E6%83%B3%E8%A6%81%E6%9F%90%E5%80%8B%E5%88%86%E6%94%AF%E7%9A%84%E6%9F%90%E5%B9%BE%E5%80%8B-commit/</link>
			<pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E7%8B%80%E6%B3%81%E9%A1%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%8F%AA%E6%83%B3%E8%A6%81%E6%9F%90%E5%80%8B%E5%88%86%E6%94%AF%E7%9A%84%E6%9F%90%E5%B9%BE%E5%80%8B-commit/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Git]【狀況題】怎麼跟上當初 fork 專案的進度？</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E7%8B%80%E6%B3%81%E9%A1%8C%E6%80%8E%E9%BA%BC%E8%B7%9F%E4%B8%8A%E7%95%B6%E5%88%9D-fork-%E5%B0%88%E6%A1%88%E7%9A%84%E9%80%B2%E5%BA%A6/</link>
			<pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E7%8B%80%E6%B3%81%E9%A1%8C%E6%80%8E%E9%BA%BC%E8%B7%9F%E4%B8%8A%E7%95%B6%E5%88%9D-fork-%E5%B0%88%E6%A1%88%E7%9A%84%E9%80%B2%E5%BA%A6/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Redis] Redis开发规范解析(一)--键名设计</title>
			<link>https://tangzixiang.github.io/posts/2020/01/redis%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E8%A7%A3%E6%9E%90%E4%B8%80-%E9%94%AE%E5%90%8D%E8%AE%BE%E8%AE%A1/</link>
			<pubDate>Wed, 08 Jan 2020 10:34:37 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/redis%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E8%A7%A3%E6%9E%90%E4%B8%80-%E9%94%AE%E5%90%8D%E8%AE%BE%E8%AE%A1/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Redis] Redis开发规范解析(二)--老生常谈bigkey</title>
			<link>https://tangzixiang.github.io/posts/2020/01/redis%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E8%A7%A3%E6%9E%90%E4%BA%8C-%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88bigkey/</link>
			<pubDate>Wed, 08 Jan 2020 10:34:37 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/redis%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E8%A7%A3%E6%9E%90%E4%BA%8C-%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88bigkey/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Redis] 用 Redis 实现分布式锁</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E7%94%A8redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
			<pubDate>Wed, 08 Jan 2020 10:34:37 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E7%94%A8redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Redis] 阿里云 Redis 开发规范</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E9%98%BF%E9%87%8C%E4%BA%91redis%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</link>
			<pubDate>Wed, 08 Jan 2020 10:34:37 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E9%98%BF%E9%87%8C%E4%BA%91redis%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>选择一个开源软件协议</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%8D%8F%E8%AE%AE/</link>
			<pubDate>Tue, 07 Jan 2020 11:04:26 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%8D%8F%E8%AE%AE/</guid>
			<description>参考：
选择一个开源软件协议 http://choosealicense.online </description>
			<content type="html"><![CDATA[<p>参考：</p>
<a href="http://choosealicense.online"  target="_blank"  >选择一个开源软件协议 http://choosealicense.online</a> 

]]></content>
		</item>
		
		<item>
			<title>[Go] goprojectinit - 项目工程初始化工具</title>
			<link>https://tangzixiang.github.io/posts/2020/01/goprojectinit/</link>
			<pubDate>Tue, 07 Jan 2020 10:27:55 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/goprojectinit/</guid>
			<description>go get github.com/tangzixiang/goprojectinit
概述 goprojectinit 是一个可以快速初始化 go 项目环境的工具。
使用帮助 $goprojectinit -h Usage: goprojectinit [OPTIONS] projectname... Application Options: -v, --version show this tool version -b, --verbose Show verbose debug information -c, --cover if the project path exists ,cover the directory and init the project -t, --tool tool mean this project is a tool project,so the main-file will be placed in project root directory -e, --empty empty mean this project is a empty project or lib project -l, --lib same as --empty -n, --usevendor usevendor mean this project init whit vendor,default use go-modules -k, --nokeep don&amp;#39;t add .</description>
			<content type="html"><![CDATA[<p><iframe src="https://ghbtns.com/github-btn.html?user=tangzixiang&repo=goprojectinit&type=star&count=true&size=large" frameborder="0" scrolling="0" width="160px" height="30px"></iframe>

<iframe src="https://ghbtns.com/github-btn.html?user=tangzixiang&repo=goprojectinit&type=fork&count=true&size=large" frameborder="0" scrolling="0" width="158px" height="30px"></iframe></p>
<p><code>go get github.com/tangzixiang/goprojectinit</code></p>
<h2 id="heading">概述</h2>
<p><strong>goprojectinit</strong> 是一个可以快速初始化 go 项目环境的工具。</p>
<h2 id="heading1">使用帮助</h2>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">$goprojectinit</span> -h
Usage:
  goprojectinit <span class="o">[</span>OPTIONS<span class="o">]</span> projectname...

Application Options:
  -v, --version      show this tool version
  -b, --verbose      Show verbose debug information
  -c, --cover        <span class="k">if</span> the project path exists ,cover the directory and init the project
  -t, --tool         tool mean this project is a tool project,so the main-file will be placed in project root directory
  -e, --empty        empty mean this project is a empty project or lib project
  -l, --lib          same as --empty
  -n, --usevendor    usevendor mean this project init whit vendor,default use go-modules
  -k, --nokeep       don<span class="err">&#39;</span>t add .keep each dir
  -d, --dirs<span class="o">=</span>        mkdir customer set,example: api,internal/configs,internal/model
  -m, --modulename<span class="o">=</span>  modulename use <span class="k">for</span> go modules init file: go.mod,default use project name
  -p, --targetpath<span class="o">=</span>  project should init in the which directory,default is current path,if target directory not exists will be created

Help Options:
  -h, --help         Show this <span class="nb">help</span> message

Arguments:
  projectname:       init the project with this name, the first name will be named <span class="k">for</span> project,then all remaining names will be sub service name in cmd directory
</code></pre></div><h2 id="heading2">使用说明</h2>
<h3 id="heading3">快速创建项目</h3>
<p>最简单的命令如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ goprojectinit myproject

$ tree myproject/
myproject/
├── README.md
├── api
├── assets
├── build
│   ├── ci
│   └── package
├── cmd
│   └── myproject
│       └── myproject.go
├── configs
├── deployments
├── docs
├── examples
├── githooks
├── go.mod
├── init
├── internal
├── pkg
├── scripts
├── <span class="nb">test</span>
├── third_party
├── tools
├── web
└── website

<span class="m">21</span> directories, <span class="m">3</span> files
</code></pre></div><p>通过这么一个简单的命令，快速的初始化好一个 go 项目的目录环境，这里使用的是默认的目录配置。</p>
<p>上面的例子中项目 <code>myproject</code> 的项目入口文件为 <code>myproject/cmd/myproject/myproject.go</code>。</p>
<h3 id="heading4">工具型项目</h3>
<p>若新建项目为工具型项目则指定 <code>-t</code> 或者 <code>--tool</code> 参数即可:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ goprojectinit -t mytool
$ tree mytool/
mytool/
├── README.md
├── assets
├── build
│   ├── ci
│   └── package
├── configs
├── docs
├── examples
├── githooks
├── go.mod
├── init
├── internal
├── main.go
├── pkg
├── scripts
└── tes
</code></pre></div><p>是否工具型项目的区别在于项目根目录是否存在 <code>main.go</code> 文件。</p>
<h3 id="heading5">类库型项目</h3>
<p>若新建项目为工具型项目则指定 <code>-l</code> 或者 <code>--lib</code> 参数即可:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ goprojectinit -l mylib
$ tree mylib/
mylib/
├── README.md
├── assets
├── docs
├── examples
├── githooks
├── go.mod
├── scripts
└── <span class="nb">test</span>

<span class="m">6</span> directories, <span class="m">2</span> files
</code></pre></div><p>类库型项目不会主动创建任何 go 文件。</p>
<h3 id="heading6">多服务项目</h3>
<p><strong>goprojectinit</strong> 支持指定新建项目为多服务项目,只需提供多个 <code>projectname</code> 即可,首个 <code>projectname</code> 将作为项目名。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ goprojectinit myproject subserver1 subserver2
$ tree myproject/
myproject/
├── README.md
├── api
├── assets
├── build
│   ├── ci
│   └── package
├── cmd
│   ├── myproject
│   │   └── myproject.go
│   ├── subserver1
│   │   └── subserver1.go
│   └── subserver2
│       └── subserver2.go
├── configs
├── deployments
├── docs
├── examples
├── githooks
├── go.mod
├── init
├── internal
├── pkg
├── scripts
├── <span class="nb">test</span>
├── third_party
├── tools
├── web
└── website

<span class="m">23</span> directories, <span class="m">5</span> files
</code></pre></div><h3 id="heading7">自定义目录</h3>
<p>若不想使用默认提供的几种目录初始化模板，<strong>goprojectinit</strong> 支持自定义需要初始化的目录，通过 <code>-d</code> 或则 <code>--dirs</code> 指定。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ goprojectinit -d api,service,model myproject
$ tree myproject/
myproject/
├── README.md
├── api
├── cmd
│   └── myproject
│       └── myproject.go
├── go.mod
├── model
└── service

<span class="m">5</span> directories, <span class="m">3</span> file
</code></pre></div><h3 id="vendor">vendor</h3>
<p><strong>goprojectinit</strong> 支持使用 <a href="github.com/kardianos/govendor">govendor</a> 作为模块处理，在初始化项目的时候带上 <code>-n</code> 或者 <code>--usevendor</code> 即可 。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ goprojectinit -n myproject
$ tree myproject/
myproject/
├── README.md
├── api
├── assets
├── build
│   ├── ci
│   └── package
├── cmd
│   └── myproject
│       └── myproject.go
├── configs
├── deployments
├── docs
├── examples
├── githooks
├── init
├── internal
├── pkg
├── scripts
├── <span class="nb">test</span>
├── third_party
├── tools
├── vendor
│   └── vendor.json
├── web
└── website

<span class="m">22</span> directories, <span class="m">3</span> files
</code></pre></div><p>注意与 <code>go-modules</code> 模式不同的是，使用 <code>vendor</code> 模式可能需要新建项目位于 <code>$GOPATH</code> 下</p>
<h3 id="heading8">展示更多调试信息</h3>
<p>如果想要能够清楚的看到项目初始化过程的详细信息,只需要附带 <code>-b</code> 参数:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ goprojectinit myproject -b

<span class="o">[</span>goprojectinit<span class="o">]</span> project path is <span class="s2">&#34;~/myproject&#34;</span>
<span class="o">[</span>goprojectinit<span class="o">]</span> make new directory ~/myproject success~
//...忽略部分输出日志
<span class="o">[</span>goprojectinit<span class="o">]</span> projoct myproject init success~
</code></pre></div><h3 id="heading9">指定项目位置</h3>
<p>如果不想在当前目录下初始化项目只需要通过 <code>-p</code> 或者 <code>--targetpath</code> 指定目标地址即可:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang$ sudo goprojectinit -p /var/www myproject
</code></pre></div><h3 id="heading10">覆盖项目路径</h3>
<p>若新建的项目路径下存在同名目录，默认不会进行覆盖，会维持目录原样并退出初始化过程，如果需要进行覆盖则可以通过 <code>-c</code> 或者 <code>--cover</code> 完成:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ goprojectinit -p /var/www -c myproject
</code></pre></div><p>上面这个示例为，在 <code>/var/www</code> 目录下创建默认 <code>go</code> 项目 <code>myproject</code> 若已存在则删除并重新创建。</p>
<h2 id="heading11">注意</h2>
<ol>
<li>当项目初始化过程中因为其他外界因素导致中途失败后，工具会自动清除创建到一半的项目。</li>
<li>项目会默认带 <code>.goprohectinit</code> 目录用于存放初始化相关内容</li>
<li>初始化默认使用的是 <code>go-modules</code> 模式，需要 go 版本的支持，go 在 <code>go1.11</code> 版本开始支持</li>
</ol>
<h2 id="heading12">参考</h2>
<ul>
<li><a href="https://github.com/golang-standards/project-layout"  target="_blank"  >Standard Go Project Layout</a> 
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>[Go] Go 模块--开始使用Go Modules</title>
			<link>https://tangzixiang.github.io/posts/2020/01/go-%E6%A8%A1%E5%9D%97-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8go-modules/</link>
			<pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/go-%E6%A8%A1%E5%9D%97-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8go-modules/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>如何设计 QQ、微信、微博、Github 等等，第三方账号登陆 ？（附表设计）</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1-qq%E5%BE%AE%E4%BF%A1%E5%BE%AE%E5%8D%9Agithub-%E7%AD%89%E7%AD%89%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B4%A6%E5%8F%B7%E7%99%BB%E9%99%86-%E9%99%84%E8%A1%A8%E8%AE%BE%E8%AE%A1/</link>
			<pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1-qq%E5%BE%AE%E4%BF%A1%E5%BE%AE%E5%8D%9Agithub-%E7%AD%89%E7%AD%89%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B4%A6%E5%8F%B7%E7%99%BB%E9%99%86-%E9%99%84%E8%A1%A8%E8%AE%BE%E8%AE%A1/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>tmux 命令的使用方式</title>
			<link>https://tangzixiang.github.io/posts/2020/01/tmux/</link>
			<pubDate>Sun, 05 Jan 2020 17:56:18 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/tmux/</guid>
			<description>如果安装不成功需要把仓库 clone 下来通过 makefile 安装
参考：
 阮一峰的网络日志:Tmux 使用教程  Tmux入门教程 - 掘金   tmux基本操作   强大的tmux   tmux GitHub 地址    tmux 可以配合这个项目 ： </description>
			<content type="html"><![CDATA[<p>如果安装不成功需要把仓库 clone 下来通过 makefile 安装</p>
<p>参考：</p>
<ul>
<li><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html"  target="_brank"  >阮一峰的网络日志:Tmux 使用教程</a> 
</li>
<li><a href="https://juejin.im/post/5a8917336fb9a0633e51ddb9"  target="_brank"  > Tmux入门教程 - 掘金 </a>
</li>
<li><a href="https://www.cnblogs.com/liuguanglin/p/9290345.html"  target="_brank"  > tmux基本操作 </a>
</li>
<li><a href="https://www.jianshu.com/p/ec2689e2f1f3"  target="_brank"  > 强大的tmux </a>
</li>
<li><a href="https://github.com/tmux/tmux"  target="_brank"  > tmux GitHub 地址 </a>
</li>
</ul>
<p>tmux 可以配合<a href="https://github.com/gpakosz/.tmux"  target="_brank"  >这个项目</a> 
 ：
<img src="https://cloud.githubusercontent.com/assets/553208/19740585/85596a5a-9bbf-11e6-8aa1-7c8d9829c008.gif" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>screen 命令的使用方式</title>
			<link>https://tangzixiang.github.io/posts/2020/01/screen/</link>
			<pubDate>Sun, 05 Jan 2020 17:56:12 +0800</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/screen/</guid>
			<description>~ $ screen -h Use: screen [-opts] [cmd [args]] or: screen -r [host.tty] Options: -a Force all capabilities into each window&amp;#39;s termcap. -A -[r|R] Adapt all windows to the new display width &amp;amp; height. -c file Read configuration file instead of &amp;#39;.screenrc&amp;#39;. -d (-r) Detach the elsewhere running screen (and reattach here). -dmS name Start as daemon: Screen session in detached mode. -D (-r) Detach and logout remote (and reattach here).</description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">~ $ screen -h
Use: screen <span class="o">[</span>-opts<span class="o">]</span> <span class="o">[</span>cmd <span class="o">[</span>args<span class="o">]</span><span class="o">]</span>
 or: screen -r <span class="o">[</span>host.tty<span class="o">]</span>

Options:
-a            Force all capabilities into each window<span class="s1">&#39;s termcap.
</span><span class="s1">-A -[r|R]     Adapt all windows to the new display width &amp; height.
</span><span class="s1">-c file       Read configuration file instead of &#39;</span>.screenrc<span class="s1">&#39;.
</span><span class="s1">-d (-r)       Detach the elsewhere running screen (and reattach here).
</span><span class="s1">-dmS name     Start as daemon: Screen session in detached mode.
</span><span class="s1">-D (-r)       Detach and logout remote (and reattach here).
</span><span class="s1">-D -RR        Do whatever is needed to get a screen session.
</span><span class="s1">-e xy         Change command characters.
</span><span class="s1">-f            Flow control on, -fn = off, -fa = auto.
</span><span class="s1">-h lines      Set the size of the scrollback history buffer.
</span><span class="s1">-i            Interrupt output sooner when flow control is on.
</span><span class="s1">-list         or -ls. Do nothing, just list our SockDir.
</span><span class="s1">-L            Turn on output logging.
</span><span class="s1">-m            ignore $STY variable, do create a new screen session.
</span><span class="s1">-O            Choose optimal output rather than exact vt100 emulation.
</span><span class="s1">-p window     Preselect the named window if it exists.
</span><span class="s1">-q            Quiet startup. Exits with non-zero return code if unsuccessful.
</span><span class="s1">-r            Reattach to a detached screen process.
</span><span class="s1">-R            Reattach if possible, otherwise start a new session.
</span><span class="s1">-s shell      Shell to execute rather than $SHELL.
</span><span class="s1">-S sockname   Name this session &lt;pid&gt;.sockname instead of &lt;pid&gt;.&lt;tty&gt;.&lt;host&gt;.
</span><span class="s1">-t title      Set title. (window&#39;</span>s name<span class="o">)</span>.
-T term       Use term as <span class="nv">$TERM</span> <span class="k">for</span> windows, rather than <span class="s2">&#34;screen&#34;</span>.
-U            Tell screen to use UTF-8 encoding.
-v            Print <span class="s2">&#34;Screen version 4.00.03 (FAU) 23-Oct-06&#34;</span>.
-wipe         Do nothing, just clean up SockDir.
-x            Attach to a not detached screen. <span class="o">(</span>Multi display mode<span class="o">)</span>.
-X            Execute &lt;cmd&gt; as a screen <span class="nb">command</span> in the specified session.
</code></pre></div><p>参考：</p>
<ul>
<li><a href="https://blog.csdn.net/yizhang_ml/article/details/79632316"  target="_brank"  > screen命令的常见用法 </a>
</li>
<li><a href="https://www.jianshu.com/p/0702a451dd0c"  target="_brank"  > screen用于命令行终端切换 </a>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>[Git] 您必须知道的 Git 分支开发规范，附 Git 常用命令大全！</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E6%82%A8%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84-git-%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E9%99%84-git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</link>
			<pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E6%82%A8%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84-git-%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E9%99%84-git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Go] 大神是如何学习 Go 语言之写出优雅的 Go 代码</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E5%A4%A7%E7%A5%9E%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%86%99%E5%87%BA%E4%BC%98%E9%9B%85%E7%9A%84-go-%E4%BB%A3%E7%A0%81/</link>
			<pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E5%A4%A7%E7%A5%9E%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%86%99%E5%87%BA%E4%BC%98%E9%9B%85%E7%9A%84-go-%E4%BB%A3%E7%A0%81/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>记一次如何在 windows 下添加 GitHub 的 SSH Key</title>
			<link>https://tangzixiang.github.io/posts/2020/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A6%82%E4%BD%95%E5%9C%A8-windows-%E4%B8%8B%E6%B7%BB%E5%8A%A0-github-%E7%9A%84-ssh-key/</link>
			<pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2020/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A6%82%E4%BD%95%E5%9C%A8-windows-%E4%B8%8B%E6%B7%BB%E5%8A%A0-github-%E7%9A%84-ssh-key/</guid>
			<description>🏢 : mac; 🏠 : windows
摘要  管理员方式打开 Git Bash 输入命令生成 ssh key 将 ssh key 加入 ssh-agent 将公钥加入到 GitHub 上 测试是否连接成功  管理员方式打开 Git Bash 输入命令生成 ssh key 在安装好 Git 后右键使用管理员身份运行方式打开下图的 Git Bash
使用该命令生成个人账号的密钥对，引号内容为个人登录账号
$ ssh-keygen -t rsa -b 4096 -C &amp;#34;your_email@example.com&amp;#34;回车后会要求输入生成的文件名，如果不知道直接回车生成的文件名为 id_ras，这里举例使用邮箱名作为前缀，完成后会连续两次要求输入密码，可以不指定密码，直接两次回车，最终提示完成如下图：
完成后打开文件夹安装前面的路径即 C:\Users\user-name\.ssh 目录，正常情况该目录会存在前面生成的两个文件，如果没有的话需要自己创建这个目录然后在上一级目录即 C:\Users\user-name 下找到对应的两个生成的文件（密钥对）并移入 C:\Users\user-name\.ssh 目录，由于前面我们对生成的密钥对改了名，所以找到的应该是 your_email_id_rsa 及 your_email_id_rsa.pub 文件，若使用默认的文件名则找到的应该是 id_rsa 及 id_rsa.pub
将 ssh key 加入 ssh-agent 继续输入以下命令,启动 ssh-agent
$ eval $(ssh-agent -s)Agent pid 59566将前面生成的密钥加入 ssh-agent</description>
			<content type="html"><![CDATA[<p>🏢 : mac;
🏠 : windows</p>
<h2 id="heading">摘要</h2>
<ul>
<li>管理员方式打开 Git Bash 输入命令生成 ssh key</li>
<li>将 ssh key 加入 ssh-agent</li>
<li>将公钥加入到 GitHub 上</li>
<li>测试是否连接成功</li>
</ul>
<h2 id="-git-bash--ssh-key">管理员方式打开 Git Bash 输入命令生成 ssh key</h2>
<p>在安装好 Git 后右键使用管理员身份运行方式打开下图的 Git Bash</p>
<p><img src="/assets/image-20200102214159479.png" alt="image-20200102214159479"></p>
<p>使用该命令生成个人账号的密钥对，引号内容为个人登录账号</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ ssh-keygen -t rsa -b <span class="m">4096</span> -C <span class="s2">&#34;your_email@example.com&#34;</span>
</code></pre></div><p>回车后会要求输入生成的文件名，如果不知道直接回车生成的文件名为 id_ras，这里举例使用邮箱名作为前缀，完成后会连续两次要求输入密码，可以不指定密码，直接两次回车，最终提示完成如下图：</p>
<p><img src="/assets/image-20200102214847378.png" alt="image-20200102214847378"></p>
<p>完成后打开文件夹安装前面的路径即 <code>C:\Users\user-name\.ssh</code> 目录，正常情况该目录会存在前面生成的两个文件，如果没有的话需要自己创建这个目录然后在上一级目录即 <code>C:\Users\user-name</code>  下找到对应的两个生成的文件（密钥对）并移入  <code>C:\Users\user-name\.ssh</code> 目录，由于前面我们对生成的密钥对改了名，所以找到的应该是 <code>your_email_id_rsa</code> 及 <code>your_email_id_rsa.pub</code> 文件，若使用默认的文件名则找到的应该是 <code>id_rsa</code> 及 <code>id_rsa.pub</code></p>
<h2 id="-ssh-key--sshagent">将 ssh key 加入 ssh-agent</h2>
<p>继续输入以下命令,启动 ssh-agent</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">eval</span> <span class="k">$(</span>ssh-agent -s<span class="k">)</span>
Agent pid 59566
</code></pre></div><p>将前面生成的密钥加入 ssh-agent</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ ssh-add ~/.ssh/your_email_id_rsa <span class="c1">## id_rsa</span>
Identity added: /c/Users/user-name/.ssh/your_email_id_rsa <span class="o">(</span>/c/Users/user-name/.ssh/your_email_id_rsa<span class="o">)</span>
</code></pre></div><h2 id="-github-">将公钥加入到 GitHub 上</h2>
<p>点击 GitHub 主页右上角的位置找到 settings</p>
<p><img src="https://help.github.com/assets/images/help/settings/userbar-account-settings.png" alt="Settings icon in the user bar"></p>
<p>接着按照如下步骤找到输入 key 的地方</p>
<p><img src="https://help.github.com/assets/images/help/settings/settings-sidebar-ssh-keys.png" alt="Authentication keys"></p>
<p><img src="https://help.github.com/assets/images/help/settings/ssh-add-ssh-key.png" alt="SSH Key button"></p>
<p><img src="https://help.github.com/assets/images/help/settings/ssh-key-paste.png" alt="The key field"></p>
<p>使用文本工具打开生成的公钥 <code>your_email_id_rsa.pub</code> (可能是 <code>id_rsa.pub</code>)，讲里面的内容复制出来粘贴到上面的文本框内。然后点击添加完成。</p>
<p><img src="https://help.github.com/assets/images/help/settings/ssh-add-key.png" alt="The Add key button"></p>
<h2 id="heading1">测试是否连接成功</h2>
<p>完成之后需要测试验证是否能够正常连接到 GitHub 上，继续在前面的 Git Bash 上执行命令</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ ssh -T git@github.com

The authenticity of host <span class="s1">&#39;github.com (IP)&#39;</span> can<span class="s1">&#39;t be established.
</span><span class="s1">RSA key fingerprint is SHA256:xxxxxx.
</span><span class="s1">Are you sure you want to continue connecting (yes/no)? yes
</span><span class="s1">Warning: Permanently added &#39;</span>github.com,IP<span class="s1">&#39; (RSA) to the list of known hosts.
</span><span class="s1">Hi your_email! You&#39;</span>ve successfully authenticated, but GitHub does not provide shell access.
</code></pre></div><p>中途提示是否继续，输入 <code>yes</code> 即可完成所有步骤。</p>
<p>具体 GitHub 官方教程如下：</p>
<p><a href="https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh"><a href="https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh">https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh</a></a></p>
]]></content>
		</item>
		
		<item>
			<title>[GO] 如何正确的开始用Go编程</title>
			<link>https://tangzixiang.github.io/posts/2019/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%BC%80%E5%A7%8B%E7%94%A8-go-%E7%BC%96%E7%A8%8B/</link>
			<pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%BC%80%E5%A7%8B%E7%94%A8-go-%E7%BC%96%E7%A8%8B/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Go] mplus 🚍 - 轻量级的非侵入式 http 请求处理辅助框架</title>
			<link>https://tangzixiang.github.io/posts/2019/mplus/</link>
			<pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/mplus/</guid>
			<description>mplus 是一个轻量级的非侵入式 http 请求处理辅助框架。具有以下特色：
 能够灵活的将大量 middleware 组合成一个 http-Handler 直接使用。 能够在规划路由的时候定义需要绑定请求数据的 model 及校验规则，而不是在每个 Handler 内处理绑定及校验逻辑。 能够为你的路由设置前置或后置处理器（类似 middleware）。 无需改变你的路由定义，完全兼容 http 规范。 在 Handler 内托管 http.ResponseWriter 及 http.Request ，后续代码通过简便的 API 完成请求的响应。 提供了 Query 对象，能够动态地链式完成 URI 及字段值的拼接，而非官方繁杂的处理流程。 通过注册 errCode ，自动完成对应的响应状态码及响应消息处理。 提供重复读取 request.Body 内容的 API。 灵活配合其他框架使用。  引入 mplus  use the below Go command to install mplus  $ go get -u github.com/tangzixiang/mplus Import it in your code:  import &amp;#34;github.com/tangzixiang/mplus&amp;#34; 快速开始 # assume the following codes in simple.</description>
			<content type="html"><![CDATA[<p><iframe src="https://ghbtns.com/github-btn.html?user=tangzixiang&repo=mplus&type=star&count=true&size=large" frameborder="0" scrolling="0" width="160px" height="30px"></iframe>

<iframe src="https://ghbtns.com/github-btn.html?user=tangzixiang&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe></p>
<p><strong>mplus</strong> 是一个轻量级的非侵入式 http 请求处理辅助框架。具有以下特色：</p>
<ul>
<li>能够灵活的将大量 middleware 组合成一个 http-Handler 直接使用。</li>
<li>能够在规划路由的时候定义需要绑定请求数据的 model 及校验规则，而不是在每个 Handler 内处理绑定及校验逻辑。</li>
<li>能够为你的路由设置前置或后置处理器（类似 middleware）。</li>
<li>无需改变你的路由定义，完全兼容 http 规范。</li>
<li>在 Handler 内托管 <code>http.ResponseWriter</code> 及 <code>http.Request</code> ，后续代码通过简便的 API 完成请求的响应。</li>
<li>提供了 Query 对象，能够动态地链式完成 <code>URI</code> 及字段值的拼接，而非官方繁杂的处理流程。</li>
<li>通过注册 errCode ，自动完成对应的响应状态码及响应消息处理。</li>
<li>提供重复读取 request.Body 内容的 API。</li>
<li>灵活配合其他框架使用。</li>
</ul>
<h2 id="-mplus">引入 mplus</h2>
<ol>
<li>use the below Go command to install mplus</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ go get -u github.com/tangzixiang/mplus
</code></pre></div><ol start="2">
<li>Import it in your code:</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">import</span> <span class="s">&#34;github.com/tangzixiang/mplus&#34;</span>
</code></pre></div><h2 id="heading">快速开始</h2>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># assume the following codes in simple.go file</span>
$ cat simple.go
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;net/http&#34;</span>

	<span class="s">&#34;github.com/tangzixiang/mplus&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="nx">Hello</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Handler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Hello</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// take you w,r then give you a plus
</span><span class="c1"></span>	<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">JSONOK</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;data&#34;</span><span class="p">:</span> <span class="s">&#34;hello world&#34;</span><span class="p">}</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># run server</span>
$ go run simple.go
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># request the server api</span>
$ curl localhost:8080

<span class="o">{</span><span class="s2">&#34;data&#34;</span>:<span class="s2">&#34;hello world&#34;</span><span class="o">}</span>
</code></pre></div><h2 id="heading1">功能</h2>
<h3 id="heading2">使用自定义中间件</h3>
<p>恰当的使用中间件，能够大大提升代码的可维护性，使用中间件能够实现 <a href="%5Bhttps://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%5D(https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)"><code>AOP</code></a> 面向切面编程的思想，降低代码的耦合度。</p>
<blockquote>
<p><strong>面向切面的程序设计</strong>（Aspect-oriented programming，AOP，又译作<strong>面向方面的程序设计</strong>、<strong>剖面导向程序设计</strong>）是<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6">计算机科学</a>中的一种<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B">程序设计思想</a>，旨在将<strong>横切关注点</strong>与业务主体进行进一步分离，以提高程序代码的模块化程度</p>
</blockquote>
<p><strong>mplus</strong> 的中间件分为以下三种：</p>
<ul>
<li><strong>前置请求处理器</strong>：只在 Handler 前执行</li>
<li><strong>后置请求处理器</strong>：只在 Handler 后执行</li>
<li><strong>middleware</strong> ：自定义与 Handler 之间的执行关系</li>
</ul>
<h4 id="heading3">设置前置请求处理器完成计数功能</h4>
<p>使用前置请求处理器，能为你将 Handler 内的部分前置逻辑进行抽离，提供更好的可维护性。</p>
<ul>
<li><code>mplus.MRote().Before(...http.HandlerFunc)</code> 为当前请求添加前置请求处理</li>
<li><code>mplus.MRote().BeforeHandler(...http.Handler)</code> 为当前请求添加前置请求处理</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">num</span> <span class="p">=</span> <span class="mi">0</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Before</span><span class="p">(</span><span class="nx">AddNum</span><span class="p">)</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="nx">Num</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// increase num per request
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">AddNum</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">num</span> <span class="o">++</span>
<span class="p">}</span>

<span class="c1">// Handler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Num</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">JSONOK</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;num&#34;</span><span class="p">:</span> <span class="nx">num</span><span class="p">}</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div><h4 id="heading4">同时使用前置及后置请求处理器控制访问量</h4>
<p>同样的，你能为你的 Handler 中的部分逻辑添加至后置请求处理器，在后置处理器中，你能做一些不影响当前业务的附带行为。</p>
<ul>
<li><code>mplus.MRote().After(...http.HandlerFunc)</code> 为当前请求添加后置请求处理</li>
<li><code>mplus.MRote().AfterHandler(...http.Handler)</code> 为当前请求添加后置请求处理</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">lastVisitIndex</span> <span class="p">=</span> <span class="mi">0</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span>
               <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Before</span><span class="p">(</span><span class="nx">MaxVisitTimesControl</span><span class="p">)</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">AddNum</span><span class="p">)</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="nx">Num</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// MaxVisitTimesControl as a before handler control visit times
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">MaxVisitTimesControl</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">lastVisitIndex</span> <span class="p">&gt;</span> <span class="mi">10</span> <span class="p">{</span>
		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">Forbidden</span><span class="p">(</span><span class="p">)</span> <span class="c1">// return status cod 403
</span><span class="c1"></span>	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// AddNum as an after handler increase num per request
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">AddNum</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">lastVisitIndex</span> <span class="o">++</span>
<span class="p">}</span>

<span class="c1">// Handler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Num</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">JSONOK</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="s">&#34;num&#34;</span><span class="p">:</span> <span class="nx">lastVisitIndex</span><span class="p">}</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h4 id="-middleware-">使用 middleware 中间件</h4>
<p>当然，你也可以直接使用 middleware 灵活控制与 Handler 的关系</p>
<ul>
<li><code>mplus.MRote().Use(...MiddlewareHandlerFunc)</code> 为当前请求组合中间件</li>
<li><code>mplus.MRote().UseHandlerMiddleware(...MiddlewareHandler)</code> 为当前请求组合中间件</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">SetRequestID</span><span class="p">)</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="nx">Hello</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// use middleware to set requestID per request
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">SetRequestID</span><span class="p">(</span><span class="nx">next</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">w</span><span class="p">.</span><span class="nf">Header</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">HeaderRequestID</span><span class="p">,</span> <span class="nx">uuid</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">uuid</span><span class="p">.</span><span class="nf">NewV4</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="c1">// &#34;X-Request-Id&#34;
</span><span class="c1"></span>
		<span class="c1">// call next ,may be is Handler or next middleware
</span><span class="c1"></span>		<span class="nx">next</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Handler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Hello</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">JSONOK</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;data&#34;</span><span class="p">:</span> <span class="s">&#34;hello world&#34;</span><span class="p">}</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div><p><strong>mplus</strong> 同时支持在 middleware 中使用，除了能够帮你托管 <code>ResponseWriter</code> 和 <code>Request</code> 还支持托管 <code>http.Handler</code> 即上述 <code>SetRequestID</code> middleware 的 <code>next</code> 参数：</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// use middleware to set requestID per request
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">SetRequestID</span><span class="p">(</span><span class="nx">next</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>

	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    
		<span class="c1">// write &#34;X-Request-Id&#34; to resp’s head then call next by mplus which take next handler
</span><span class="c1"></span>		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">WriteRespHeader</span><span class="p">(</span> 
			<span class="nx">mplus</span><span class="p">.</span><span class="nx">HeaderRequestID</span><span class="p">,</span><span class="nx">uuid</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">uuid</span><span class="p">.</span><span class="nf">NewV4</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">Handler</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>该版本的 <code>SetRequestID</code> 效果与上一个版本相同。</p>
<h4 id="-httphandler-">中间件与 HTTP-Handler 之间的交互</h4>
<p>在某些时候我们可能需要在中间件之间专递信息，或则需要将信息从中间件传递到实际的 Handler 中。<strong>mplus</strong> 提供了相应的 <code>Get/Set</code> 方法集用于处理缓存于当前上下文中的数据</p>
<ul>
<li><code>mplus.PP.Get(key string)</code> 从当前请求的上下文中获取指定数据</li>
<li><code>mplus.PP.GetDf(key string, defaultValue interface{})</code> 从当前请求的上下文中获取指定数据，不存在则返回默认值</li>
<li><code>mplus.PP.Set(key string, value interface{})</code> 将指定数据放入当前请求的上下文中</li>
<li><code>mplus.PP.SetR(key string, value interface{})</code> 将指定数据放入当前请求的上下文中，并返回当前数据</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Name</span> <span class="kt">string</span> <span class="s">`</span><span class="s">json:&#34;name&#34;</span><span class="s">`</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">SetRequestID</span><span class="p">,</span> <span class="nx">PreSearchUser</span><span class="p">)</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="nx">Hello</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// use middleware to set requestID per request
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">SetRequestID</span><span class="p">(</span><span class="nx">next</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>

	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">pp</span> <span class="o">:=</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">Handler</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span>

		<span class="c1">// add &#34;X-Request-Id&#34; to request&#39;s context and header at the same time
</span><span class="c1"></span>		<span class="nx">pp</span><span class="p">.</span><span class="nf">WriteRespHeader</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">HeaderRequestID</span><span class="p">,</span>
			<span class="nx">pp</span><span class="p">.</span><span class="nf">SetStringR</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">HeaderRequestID</span><span class="p">,</span> <span class="nx">uuid</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">uuid</span><span class="p">.</span><span class="nf">NewV4</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span>

		<span class="c1">// call next
</span><span class="c1"></span>		<span class="nx">pp</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">KeyUser</span> <span class="p">=</span> <span class="s">&#34;user&#34;</span>

<span class="c1">// use middleware to check user before handler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">PreSearchUser</span><span class="p">(</span><span class="nx">next</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>

	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>

		<span class="nx">pp</span> <span class="o">:=</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">Handler</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span>

		<span class="c1">// search user by id which get from url then add to request&#39;s context
</span><span class="c1"></span>		<span class="nx">pp</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">KeyUser</span><span class="p">,</span> <span class="nf">SearchUserService</span><span class="p">(</span><span class="nx">pp</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">)</span>

		<span class="c1">// call next
</span><span class="c1"></span>		<span class="nx">pp</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="p">)</span>
    
		<span class="c1">// Or complete all steps at once as follows
</span><span class="c1"></span>		<span class="c1">// mplus.PlusPlus(w, r).Handler(next).
</span><span class="c1"></span>		<span class="c1">// Set(KeyUser, SearchUserService(pp.Query(&#34;id&#34;))).ServeHTTP()
</span><span class="c1"></span>	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">SearchUserService</span><span class="p">(</span><span class="nx">id</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">User</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">User</span><span class="p">{</span><span class="s">&#34;tom&#34;</span><span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Handler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Hello</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>

	<span class="nx">pp</span> <span class="o">:=</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>

	<span class="nx">requestID</span> <span class="o">:=</span> <span class="nx">pp</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">HeaderRequestID</span><span class="p">)</span> <span class="c1">// get requestID from request&#39;s context
</span><span class="c1"></span>	<span class="nx">userName</span> <span class="o">:=</span> <span class="nx">pp</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">KeyUser</span><span class="p">)</span><span class="p">.</span><span class="p">(</span><span class="o">*</span><span class="nx">User</span><span class="p">)</span><span class="p">.</span><span class="nx">Name</span>   <span class="c1">// get user from request&#39;s context
</span><span class="c1"></span>
	<span class="nx">pp</span><span class="p">.</span><span class="nf">JSONOK</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">Data</span><span class="p">{</span><span class="s">&#34;request_id&#34;</span><span class="p">:</span> <span class="nx">requestID</span><span class="p">,</span> <span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="s">&#34;hello &#34;</span> <span class="o">+</span> <span class="nx">userName</span><span class="p">}</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ curl http://localhost:8080?id<span class="o">=</span><span class="m">1</span>

&lt; HTTP/1.1 <span class="m">200</span> OK
<span class="o">{</span><span class="s2">&#34;message&#34;</span>:<span class="s2">&#34;hello tom&#34;</span>,<span class="s2">&#34;request_id&#34;</span>:<span class="s2">&#34;9ccadf01-cfdf-4822-b528-3a1b6e79987a&#34;</span><span class="o">}</span>
</code></pre></div><h4 id="-middleware-1">前置/后置请求处理器与 middleware 中间件之间的关系</h4>
<p>每个 Handler 都可以与任意的 <code>Before</code> 、 <code>After</code> 及 <code>middleware</code> 进行搭配，他们之间的关系如下:</p>
<ul>
<li><code>Before</code> 及 <code>After</code> 与 Handler 进行组合, 执行顺序如下：</li>
</ul>
<p><img src="https://github.com/tangzixiang/mplus/raw/master/assets/image-20191022142924932.png" alt=""></p>
<ul>
<li><code>middleware</code> 与 Handler 进行组合，执行顺序如下：</li>
</ul>
<p><img src="https://github.com/tangzixiang/mplus/raw/master/assets/image-20191022145958986.png" alt=""></p>
<ul>
<li><code>Before</code> 、 <code>After</code> 及 <code>middleware</code> 同时与 Handler 进行组合, 执行顺序如下：</li>
</ul>
<p><img src="https://github.com/tangzixiang/mplus/raw/master/assets/image-20191022150601974.png" alt=""></p>
<h3 id="-model-">绑定 model 并校验请求数据有效性</h3>
<p>在日常的 API 开发中，我们经常需要在 Handler 中将请求数据映射到指定对象上并进行数据校验，然后再传递到其他地方进行后续处理，用原始的方式你需要写大量的处理代码，mplus 可以大大降低你的代码量。</p>
<p><strong>mplus</strong> 内置使用 <strong><a href="https://github.com/go-playground/validator">validator</a></strong> 作为 JSON 数据规则校验引擎</p>
<ul>
<li><code>mplus.MRote().Bind(interface{})</code> 为当前请求绑定指定数据类型</li>
<li><code>mplus.RegisterValidateErrorFunc(ValidateErrorType,func(http.ResponseWriter,*http.Request, error))</code> 注册一个数据校验异常处理 Hook</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">V</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Addr</span> <span class="kt">string</span> <span class="s">`</span><span class="s">json:&#34;addr&#34; validate:&#34;min=10&#34;</span><span class="s">`</span> <span class="c1">// min len is 10
</span><span class="c1"></span><span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// (*V)(nil) mean that is a nil point which hold type info
</span><span class="c1"></span>	<span class="c1">// bind model just need type info
</span><span class="c1"></span>	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="p">(</span><span class="o">*</span><span class="nx">V</span><span class="p">)</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="nx">Address</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Handler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Address</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">pp</span> <span class="o">:=</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>

	<span class="c1">// pass to response data is V instance from request data
</span><span class="c1"></span>	<span class="nx">pp</span><span class="p">.</span><span class="nf">JSONOK</span><span class="p">(</span><span class="nx">pp</span><span class="p">.</span><span class="nf">VO</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="p">(</span><span class="o">*</span><span class="nx">V</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># request success</span>
$ curl --request POST <span class="se">\
</span><span class="se"></span>&gt;   --url http://localhost:8080/ <span class="se">\
</span><span class="se"></span>&gt;   --header <span class="s1">&#39;content-type: application/json&#39;</span> <span class="se">\
</span><span class="se"></span>&gt;   --data <span class="s1">&#39;{&#34;addr&#34;:&#34;广东省深圳市南山区 xxx 号&#34;}&#39;</span>

<span class="o">{</span><span class="s2">&#34;addr&#34;</span>:<span class="s2">&#34;广东省深圳市南山区 xxx 号 :)&#34;</span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># request failed</span>
$ curl --request POST <span class="se">\
</span><span class="se"></span>&gt;   --url http://localhost:8080/408 <span class="se">\
</span><span class="se"></span>&gt;   --header <span class="s1">&#39;content-type: application/json&#39;</span> <span class="se">\
</span><span class="se"></span>&gt;   --data <span class="s1">&#39;{&#34;addr&#34;:&#34;&#34;}&#39;</span> 

&lt; HTTP/1.1 <span class="m">400</span> Bad Request
</code></pre></div><p>如果需要了解到校验过程中具体发生异常的内容，可以添加如下 Hook 定义响应输出的内容</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// register a hook to show err message when validate failed
</span><span class="c1"></span>	<span class="nx">mplus</span><span class="p">.</span><span class="nf">RegisterValidateErrorFunc</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">ErrBodyValidate</span><span class="p">,</span> 
                                  <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
                                    
		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">Data</span><span class="p">{</span><span class="s">&#34;err_message&#34;</span><span class="p">:</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span>

	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="p">(</span><span class="o">*</span><span class="nx">V</span><span class="p">)</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="nx">Address</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ curl --request POST <span class="se">\
</span><span class="se"></span>&gt;   --url http://localhost:8080/408 <span class="se">\
</span><span class="se"></span>&gt;   --header <span class="s1">&#39;content-type: application/json&#39;</span> <span class="se">\
</span><span class="se"></span>&gt;   --data <span class="s1">&#39;{&#34;addr&#34;:&#34;&#34;}&#39;</span> 

&lt; HTTP/1.1 <span class="m">400</span> Bad Request
<span class="o">{</span><span class="s2">&#34;err_message&#34;</span>:<span class="s2">&#34;Key: &#39;V.Addr&#39; Error:Field validation for &#39;Addr&#39; failed on the &#39;min&#39; tag&#34;</span><span class="o">}</span>
</code></pre></div><h4 id="form-">form 数据的绑定</h4>
<p><strong>mplus</strong> 同时内置 <strong><a href="github.com/go-playground/form">form</a></strong> 作为  <code>querystring</code> 及 <code>form</code> 格式数据的解析引擎，这样你便能通过 <code>Bind</code> 同时绑定请求体数据内容及URL 上的数据内容</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// tag “form”, can parse parameter from URL or form-data
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">V</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Addr</span> <span class="kt">string</span> <span class="s">`</span><span class="s">form:&#34;addr&#34; validate:&#34;min=10&#34;</span><span class="s">`</span> <span class="c1">// min len is 10
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># addr on URL</span>
$ curl http://localhost:8080?addr<span class="o">=</span>广东省深圳市南山区xxxx

&lt; HTTP/1.1 <span class="m">200</span> OK
<span class="o">{</span><span class="s2">&#34;addr&#34;</span>:<span class="s2">&#34;广东省深圳市南山区xxxx&#34;</span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># by application/x-www-form-urlencoded</span>
$ curl http://localhost:8080 --data <span class="s1">&#39;addr=广东省深圳市南山区xxxx&#39;</span>

&lt; HTTP/1.1 <span class="m">200</span> OK
<span class="o">{</span><span class="s2">&#34;addr&#34;</span>:<span class="s2">&#34;广东省深圳市南山区xxxx&#34;</span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Request body parameters take precedence over URL query string values</span>
$ curl http://localhost:8080?addr<span class="o">=</span>广东省深圳市南山区yyyyy --data <span class="s1">&#39;addr=广东省深圳市南山区xxxx&#39;</span>

&lt; HTTP/1.1 <span class="m">200</span> OK
<span class="o">{</span><span class="s2">&#34;addr&#34;</span>:<span class="s2">&#34;广东省深圳市南山区xxxx&#34;</span><span class="o">}</span>
</code></pre></div><p>如果 <strong><a href="https://github.com/go-playground/validator">validator</a></strong> 及  <strong><a href="github.com/go-playground/form">form</a></strong>  不能满足你的校验规则，你还能为当前 model 自定义校验逻辑进行补充</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">V</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Addr</span> <span class="kt">string</span> <span class="s">`</span><span class="s">json:&#34;addr&#34; validate:&#34;min=10&#34;</span><span class="s">`</span> <span class="c1">// min len is 10
</span><span class="c1"></span><span class="p">}</span>

<span class="c1">// implement mplus.RequestValidate
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="nx">V</span><span class="p">)</span> <span class="nf">Validate</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="nx">ok</span> <span class="kt">bool</span> <span class="cm">/*校验是否成功*/</span><span class="p">,</span> <span class="nx">errMsg</span> <span class="kt">string</span> <span class="cm">/*校验失败的原因*/</span><span class="p">)</span> <span class="p">{</span>

	<span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Index</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">Addr</span><span class="p">,</span> <span class="s">&#34;广东&#34;</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;addr must begin 广东&#34;</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="kc">true</span><span class="p">,</span> <span class="s">&#34;&#34;</span>
<span class="p">}</span>


<span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// register a hook to show err message when validate failed by model.Validate
</span><span class="c1"></span>	<span class="nx">mplus</span><span class="p">.</span><span class="nf">RegisterValidateErrorFunc</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">ErrRequestValidate</span><span class="p">,</span> 
                                  <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
                                    
		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;err_message&#34;</span><span class="p">:</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span>

	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="p">(</span><span class="o">*</span><span class="nx">V</span><span class="p">)</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="nx">Address</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Handler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Address</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">pp</span> <span class="o">:=</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>

	<span class="c1">// pass data to response
</span><span class="c1"></span>	<span class="nx">pp</span><span class="p">.</span><span class="nf">JSONOK</span><span class="p">(</span><span class="nx">pp</span><span class="p">.</span><span class="nf">VO</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ curl --request POST <span class="se">\
</span><span class="se"></span>&gt;   --url http://localhost:8080/ <span class="se">\
</span><span class="se"></span>&gt;   --header <span class="s1">&#39;content-type: application/json&#39;</span> <span class="se">\
</span><span class="se"></span>&gt;   --data <span class="s1">&#39;{&#34;addr&#34;:&#34;其他省深圳市南山区 xxx 号&#34;}&#39;</span> 

&lt; HTTP/1.1 <span class="m">400</span> Bad Request
<span class="o">{</span><span class="s2">&#34;err_message&#34;</span>:<span class="s2">&#34;addr must begin 广东&#34;</span><span class="o">}</span>
</code></pre></div><h4 id="-model-1">延迟计算 model 类型</h4>
<p>如果你无法在声明路由的时候直接确定 Handler 绑定的 <code>model</code> 类型，传递一个用于延迟计算实际需要绑定的 <code>model</code> 类型的回调函数。</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// InsertUser use for insert a new one
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">InsertUser</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Account</span>  <span class="kt">string</span> <span class="s">`</span><span class="s">json:&#34;account&#34;     form:&#34;account&#34;</span><span class="s">`</span>
	<span class="nx">Name</span>     <span class="kt">string</span> <span class="s">`</span><span class="s">json:&#34;name&#34;        form:&#34;name&#34;</span><span class="s">`</span>
	<span class="nx">Password</span> <span class="kt">string</span> <span class="s">`</span><span class="s">json:&#34;password&#34;    form:&#34;password&#34;</span><span class="s">`</span>
<span class="p">}</span>

<span class="c1">// UpdateUser use for update name
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">UpdateUser</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Account</span> <span class="kt">string</span> <span class="s">`</span><span class="s">json:&#34;account&#34;  form:&#34;account&#34;</span><span class="s">`</span>
	<span class="nx">Name</span>    <span class="kt">string</span> <span class="s">`</span><span class="s">json:&#34;name&#34;     form:&#34;name&#34;</span><span class="s">`</span>
<span class="p">}</span>

<span class="c1">// SelectBindModel will calculate which type of model to bind when handler got a request
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">SelectBindModel</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{</span><span class="p">}</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>

	<span class="k">switch</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">GetHeader</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="s">&#34;X-Do-What&#34;</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">case</span> <span class="s">&#34;update&#34;</span><span class="p">:</span>
		<span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="nx">UpdateUser</span><span class="p">)</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span><span class="p">,</span> <span class="kc">nil</span>
	<span class="k">case</span> <span class="s">&#34;insert&#34;</span><span class="p">:</span>
		<span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="nx">InsertUser</span><span class="p">)</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span><span class="p">,</span> <span class="kc">nil</span>
	<span class="p">}</span>
  
	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;bind type not found&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// register a hook to show err message when select model failed
</span><span class="c1"></span>	<span class="nx">mplus</span><span class="p">.</span><span class="nf">RegisterValidateErrorFunc</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">ErrModelSelect</span><span class="p">,</span> 
                                  <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>

		<span class="c1">// {&#34;err_message&#34;:&#34;bind type not found&#34;} 400
</span><span class="c1"></span>		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">Data</span><span class="p">{</span><span class="s">&#34;err_message&#34;</span><span class="p">:</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span>

	<span class="nx">handler</span> <span class="o">:=</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nf">ValidateFunc</span><span class="p">(</span><span class="nx">SelectBindModel</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="nx">Whatever</span><span class="p">)</span>
	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span><span class="nx">handler</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Handler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Whatever</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">pp</span> <span class="o">:=</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>

	<span class="c1">// got pp.VO() do anything
</span><span class="c1"></span>  
	<span class="c1">// pass data to response
</span><span class="c1"></span>	<span class="nx">pp</span><span class="p">.</span><span class="nf">JSONOK</span><span class="p">(</span><span class="nx">pp</span><span class="p">.</span><span class="nf">VO</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># request failed</span>
$ curl http://localhost:8080

&lt; HTTP/1.1 <span class="m">400</span> Bad Request
<span class="o">{</span><span class="s2">&#34;err_message&#34;</span>:<span class="s2">&#34;bind type not found&#34;</span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># request success by application/x-www-form-urlencoded</span>
$ curl http://localhost:8080 --header <span class="s1">&#39;X-Do-What: update&#39;</span> --data <span class="s1">&#39;account=xxx@xxx&amp;name=xxx&#39;</span>

&lt; HTTP/1.1 <span class="m">200</span> OK
<span class="o">{</span><span class="s2">&#34;account&#34;</span>:<span class="s2">&#34;xxx@xxx&#34;</span>,<span class="s2">&#34;name&#34;</span>:<span class="s2">&#34;xxx&#34;</span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># request success by application/json</span>
$ curl http://localhost:8080 <span class="se">\
</span><span class="se"></span>&gt;   --header <span class="s1">&#39;X-Do-What: update&#39;</span> <span class="se">\
</span><span class="se"></span>&gt;   --header <span class="s1">&#39;Content-Type: application/json&#39;</span> <span class="se">\
</span><span class="se"></span>&gt;   --data <span class="s1">&#39;{&#34;account&#34;:&#34;xxx@xxx&#34;,&#34;name&#34;:&#34;xxx&#34;}&#39;</span> 

&lt; HTTP/1.1 <span class="m">200</span> OK
<span class="o">{</span><span class="s2">&#34;account&#34;</span>:<span class="s2">&#34;xxx@xxx&#34;</span>,<span class="s2">&#34;name&#34;</span>:<span class="s2">&#34;xxx&#34;</span><span class="o">}</span>
</code></pre></div><h3 id="-query--uri">使用 Query 构造请求 URI</h3>
<p>使用官方原始的 API 方式构造 URI 非常繁琐，举例如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">urlValues</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">Values</span><span class="p">)</span>
<span class="nx">urlValues</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="s">&#34;tom&#34;</span><span class="p">)</span>
<span class="nx">urlValues</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;age&#34;</span><span class="p">,</span> <span class="s">&#34;15&#34;</span><span class="p">)</span>
<span class="nx">path</span> <span class="o">:=</span> <span class="s">&#34;http://localhost?&#34;</span> <span class="o">+</span> <span class="nx">urlValues</span><span class="p">.</span><span class="nf">Encode</span><span class="p">(</span><span class="p">)</span>
</code></pre></div><p>mplus 能够让你的代码更优雅：</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">mplus</span><span class="p">.</span><span class="nf">NewQuery</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">AddPairs</span><span class="p">(</span><span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="s">&#34;tom&#34;</span><span class="p">,</span> <span class="s">&#34;age&#34;</span><span class="p">,</span> <span class="s">&#34;15&#34;</span><span class="p">)</span><span class="p">.</span><span class="nf">AppendToURI</span><span class="p">(</span><span class="s">&#34;http://localhost&#34;</span><span class="p">)</span>
</code></pre></div><p>上面两种方式都是同样能够输出 <code>http://localhost?age=15&amp;name=tom</code> 。</p>
<p><strong>mplus</strong> 还能做到更灵活，使用 <code>If</code> 及 <code>D</code> 命名结尾的相关函数能动态决定是否添加字段，与原始的官方 API 处理方式对比如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="p">(</span>
  <span class="nx">values</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">bool</span><span class="p">{</span>
    <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">// will be continue
</span><span class="c1"></span>    <span class="s">&#34;age&#34;</span><span class="p">:</span>  <span class="kc">true</span><span class="p">,</span>
  <span class="p">}</span>
  <span class="nx">urlValues</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">Values</span><span class="p">)</span>
<span class="p">)</span>

<span class="k">if</span> <span class="nx">values</span><span class="p">[</span><span class="s">&#34;name&#34;</span><span class="p">]</span> <span class="p">{</span>
  <span class="nx">urlValues</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="s">&#34;tom&#34;</span><span class="p">)</span>
<span class="p">}</span>
<span class="k">if</span> <span class="nx">values</span><span class="p">[</span><span class="s">&#34;age&#34;</span><span class="p">]</span> <span class="p">{</span>
  <span class="nx">urlValues</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;age&#34;</span><span class="p">,</span> <span class="s">&#34;15&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;http://localhost/users/%v?&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">urlValues</span><span class="p">.</span><span class="nf">Encode</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>

<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">NewQuery</span><span class="p">(</span><span class="p">)</span><span class="p">.</span>
           <span class="nf">SetIf</span><span class="p">(</span><span class="nx">values</span><span class="p">[</span><span class="s">&#34;name&#34;</span><span class="p">]</span><span class="p">,</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="s">&#34;tom&#34;</span><span class="p">)</span><span class="p">.</span>
           <span class="nf">SetIf</span><span class="p">(</span><span class="nx">values</span><span class="p">[</span><span class="s">&#34;age&#34;</span><span class="p">]</span><span class="p">,</span> <span class="s">&#34;age&#34;</span><span class="p">,</span> <span class="s">&#34;15&#34;</span><span class="p">)</span><span class="p">.</span>
           <span class="nf">AppendToURIFormat</span><span class="p">(</span><span class="s">&#34;http://localhost/users/%v&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="p">)</span>

<span class="c1">// OutPut:
</span><span class="c1"></span><span class="c1">// http://localhost/users/1?age=15
</span><span class="c1"></span><span class="c1">// http://localhost/users/1?age=15
</span></code></pre></div><p>对于需要延迟计算的能力同样支持</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">values</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{</span><span class="p">}</span><span class="p">{</span>
  <span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="c1">// will be continue
</span><span class="c1"></span>  <span class="s">&#34;age&#34;</span><span class="p">:</span>  <span class="s">&#34;15&#34;</span><span class="p">,</span>
<span class="p">}</span>

<span class="nx">query</span> <span class="o">:=</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">NewQuery</span><span class="p">(</span><span class="p">)</span><span class="p">.</span>
  <span class="nf">SetIfD</span><span class="p">(</span><span class="nx">values</span><span class="p">[</span><span class="s">&#34;name&#34;</span><span class="p">]</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">values</span><span class="p">[</span><span class="s">&#34;name&#34;</span><span class="p">]</span><span class="p">.</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="p">}</span><span class="p">)</span><span class="p">.</span> 
  <span class="nf">SetIfD</span><span class="p">(</span><span class="nx">values</span><span class="p">[</span><span class="s">&#34;age&#34;</span><span class="p">]</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;age&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">values</span><span class="p">[</span><span class="s">&#34;age&#34;</span><span class="p">]</span><span class="p">.</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="p">}</span><span class="p">)</span>

<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span><span class="nx">query</span><span class="p">.</span><span class="nf">AppendToURI</span><span class="p">(</span><span class="s">&#34;http://localhost/users/1&#34;</span><span class="p">)</span><span class="p">)</span>

<span class="c1">// OutPut:
</span><span class="c1"></span><span class="c1">// http://localhost/users/1?age=15
</span></code></pre></div><p>甚至你能将字段的计算统一做延迟处理并封装到独立的函数内传递到 Query：</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">query</span> <span class="o">:=</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">NewQuery</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">SetPairsD</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="p">)</span> <span class="p">[</span><span class="p">]</span><span class="kt">string</span> <span class="p">{</span> <span class="c1">// lazy dynamic
</span><span class="c1"></span>  <span class="nx">values</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span>
    <span class="s">&#34;first&#34;</span><span class="p">:</span>  <span class="mi">1</span><span class="p">,</span>
    <span class="s">&#34;second&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="s">&#34;third&#34;</span><span class="p">:</span>  <span class="mi">3</span><span class="p">,</span>
  <span class="p">}</span>

  <span class="kd">var</span> <span class="nx">pairs</span> <span class="p">[</span><span class="p">]</span><span class="kt">string</span>

  <span class="k">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">values</span> <span class="p">{</span>
    <span class="nx">pairs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">pairs</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprint</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">pairs</span>
<span class="p">}</span><span class="p">)</span>

<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span><span class="nx">query</span><span class="p">.</span><span class="nf">AppendToURI</span><span class="p">(</span><span class="s">&#34;http://localhost/users/1&#34;</span><span class="p">)</span><span class="p">)</span>

<span class="c1">// OutPut:
</span><span class="c1"></span><span class="c1">// http://localhost/users/1?first=1&amp;second=2&amp;third=3
</span></code></pre></div><h3 id="-api-">便捷的 API 响应</h3>
<p>HTTP 响应状态码指示特定 <a href="https://developer.mozilla.org/zh-cn/HTTP">HTTP</a> 请求是否已成功完成。mplus 为常用的响应状态码提供了便捷的 API。</p>
<ul>
<li><code>200`:</code>mplus.PP.OK()`</li>
<li><code>400`:</code>mplus.PP.BadRequest()`</li>
<li><code>401`:</code>mplus.PP.Unauthorized()`</li>
<li><code>403`:</code>mplus.PP.Forbidden()`</li>
<li><code>404`:</code>mplus.PP.NotFound()`</li>
<li><code>405`:</code>mplus.PP.NotAllowed()`</li>
<li><code>408`:</code>mplus.PP.RequestTimeout()`</li>
<li><code>409`:</code>mplus.PP.Conflict()`</li>
<li><code>415`:</code>mplus.PP.UnsupportedMediaType()`</li>
<li><code>500`:</code>mplus.PP.InternalServerError()`</li>
<li>more &hellip;</li>
</ul>
<p>示例如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewServeMux</span><span class="p">(</span><span class="p">)</span>
	<span class="nx">mr</span> <span class="o">:=</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span> <span class="c1">// It&#39;s very easy to reuse
</span><span class="c1"></span>	
	<span class="c1">//  response&#39;s status code is 200
</span><span class="c1"></span>	<span class="nx">mux</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/200&#34;</span><span class="p">,</span> <span class="nx">mr</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">OK</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span><span class="p">)</span>

	<span class="c1">//  response&#39;s status code is 400
</span><span class="c1"></span>	<span class="nx">mux</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/400&#34;</span><span class="p">,</span> <span class="nx">mr</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">BadRequest</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span><span class="p">)</span>

	<span class="c1">//  response&#39;s status code is 401
</span><span class="c1"></span>	<span class="nx">mux</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/401&#34;</span><span class="p">,</span> <span class="nx">mr</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>

		<span class="c1">// WWW-Authenticate: Basic
</span><span class="c1"></span>		<span class="c1">// see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401
</span><span class="c1"></span>		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">WriteRespHeader</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">HeaderWWWAuthenticate</span><span class="p">,</span> <span class="s">`</span><span class="s">Basic</span><span class="s">`</span><span class="p">)</span><span class="p">.</span><span class="nf">Unauthorized</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span><span class="p">)</span>
  
	<span class="c1">//  response&#39;s status code is 403
</span><span class="c1"></span>	<span class="nx">mux</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/403&#34;</span><span class="p">,</span> <span class="nx">mr</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>

		<span class="c1">// chang default Date header
</span><span class="c1"></span>		<span class="c1">// Date: Sat, 28 Sep 2019 01:58:43 GMT
</span><span class="c1"></span>    
		<span class="c1">// TimeFormat is the time format to use when generating times in HTTP
</span><span class="c1"></span>		<span class="c1">// headers. It is like time.RFC1123 but hard-codes GMT as the time
</span><span class="c1"></span>		<span class="c1">// zone. The time being formatted must be in UTC for Format to
</span><span class="c1"></span>		<span class="c1">// generate the correct format.
</span><span class="c1"></span>		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">WriteRespHeader</span><span class="p">(</span>
			<span class="nx">mplus</span><span class="p">.</span><span class="nx">HeaderDate</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Hour</span><span class="p">)</span><span class="p">.</span><span class="nf">UTC</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Format</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">TimeFormat</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">Forbidden</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span><span class="p">)</span>
  
	<span class="c1">//  response&#39;s status code is 404
</span><span class="c1"></span>	<span class="nx">mux</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/404&#34;</span><span class="p">,</span> <span class="nx">mr</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">NotFound</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span><span class="p">)</span>

	<span class="c1">//  response&#39;s status code is 405
</span><span class="c1"></span>	<span class="nx">mux</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/405&#34;</span><span class="p">,</span> <span class="nx">mr</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>

		<span class="c1">// Allow: GET, POST, HEAD
</span><span class="c1"></span>		<span class="c1">// see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405
</span><span class="c1"></span>		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">WriteRespHeader</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">HeaderAllow</span><span class="p">,</span> <span class="s">&#34;GET,POST,HEAD&#34;</span><span class="p">)</span><span class="p">.</span><span class="nf">NotAllowed</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span><span class="p">)</span>

	<span class="c1">//  response&#39;s status code is 408
</span><span class="c1"></span>	<span class="nx">mux</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/408&#34;</span><span class="p">,</span> <span class="nx">mr</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>

		<span class="c1">// Connection: close
</span><span class="c1"></span>		<span class="c1">// see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408
</span><span class="c1"></span>		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">WriteRespHeader</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">HeaderConnection</span><span class="p">,</span> <span class="s">&#34;close&#34;</span><span class="p">)</span><span class="p">.</span><span class="nf">RequestTimeout</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span><span class="p">)</span>

	<span class="c1">//  response&#39;s status code is 500
</span><span class="c1"></span>	<span class="nx">mux</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/500&#34;</span><span class="p">,</span> <span class="nx">mr</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">InternalServerError</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span><span class="p">)</span>


	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="nx">mux</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>响应状态码系列 API 默认情况下会附带 <code>Content-Type</code> 为 <code>text/plain; charset=utf-8</code> 的 header，如果你不喜欢该系列 API 提供的默认行为，你可以对其行为进行更改：</p>
<ul>
<li><code>mplus.RegisterHttpStatusMethod</code> 更改指定 HTTP 状态码的响应处理</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewServeMux</span><span class="p">(</span><span class="p">)</span>

	<span class="c1">// register a StatusBadRequest hook to change default&#39;s behavior
</span><span class="c1"></span>	<span class="nx">mplus</span><span class="p">.</span><span class="nf">RegisterHttpStatusMethod</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> 
                      <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">m</span> <span class="nx">message</span><span class="p">.</span><span class="nx">Message</span><span class="p">,</span> <span class="nx">statusCode</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>

		<span class="c1">// {&#34;err_message&#34;:&#34;Bad Request&#34;} 400 Bad Request
</span><span class="c1"></span>		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">mplus</span><span class="p">.</span><span class="nx">Data</span><span class="p">{</span><span class="s">&#34;err_message&#34;</span><span class="p">:</span> <span class="nx">m</span><span class="p">.</span><span class="nf">En</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nf">Status</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span>

	<span class="c1">//  response&#39;s status code is 400
</span><span class="c1"></span>	<span class="nx">mux</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/400&#34;</span><span class="p">,</span>  <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nf">BadRequest</span><span class="p">(</span><span class="p">)</span>
	<span class="p">}</span><span class="p">)</span><span class="p">)</span>

	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="nx">mux</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">curl http://localhost:8080/400

&lt; HTTP/1.1 <span class="m">400</span> Bad Request
<span class="o">{</span><span class="s2">&#34;err_message&#34;</span>:<span class="s2">&#34;Bad Request&#34;</span><span class="o">}</span>
</code></pre></div><h3 id="-errcode--api-">使用 errCode 规划 API 响应不同数据内容</h3>
<p>在 API 开发过程中经常需要对不同的情况做不同的响应处理并返回对应的数据结果，第三方通过响应的数据结果内容判断 API 请求完成情况。</p>
<p><strong>mplus</strong> 设计了一套通过 <code>errCode</code> 注册不同的响应结果处理逻辑，在 Handler 中只需要将预先定义好的 <code>errCode</code> 传递到 mplus，mplus 就能够对其执行预先注册的逻辑完成剩余的响应工作，而完成这个功能的媒介即 <code>Message</code>。</p>
<ul>
<li>
<p><code>mplus.NewCallbackMessage(int,int,string,CallbackMessage)</code> 创建一个附带<code>Callbcak</code> 的 <code>Message</code></p>
</li>
<li>
<p><code>mplus.Messages.Add(Message)</code>  添加一个 <code>Message</code></p>
</li>
<li>
<p><code>mplus.pp.CallbackByCode(int,interface{})</code> 通过 <code>errCode</code> 触发指定的 <code>Callback</code></p>
</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">V</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Addr</span> <span class="kt">string</span> <span class="s">`</span><span class="s">json:&#34;addr&#34; validate:&#34;min=10&#34;</span><span class="s">`</span> <span class="c1">// min len is 10
</span><span class="c1"></span><span class="p">}</span>

<span class="c1">// errCode 400001
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">ErrCodeAddrNotExists</span> <span class="p">=</span> <span class="mi">400001</span>

<span class="c1">// ErrCodeCallbackFun will be perform when ErrCodeAddrNotExists be use to PP.CallbackByCode
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">ErrCodeCallbackFun</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">m</span> <span class="nx">mplus</span><span class="p">.</span><span class="nx">Message</span><span class="p">,</span> <span class="nx">respData</span> <span class="kd">interface</span><span class="p">{</span><span class="p">}</span><span class="p">)</span> <span class="p">{</span>
  
	<span class="c1">// {&#34;code&#34;:400001,&#34;message&#34;:&#34;addr not exists&#34;}
</span><span class="c1"></span>	<span class="nx">mplus</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">mplus</span><span class="p">.</span><span class="nx">Data</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="nx">m</span><span class="p">.</span><span class="nf">En</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nf">Status</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">CheckAddr</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kc">false</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>

	<span class="c1">// register a message for ErrCodeAddrNotExists
</span><span class="c1"></span>	<span class="nx">mplus</span><span class="p">.</span><span class="nx">Messages</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span>
		<span class="nx">mplus</span><span class="p">.</span><span class="nf">NewCallbackMessage</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">ErrCodeAddrNotExists</span><span class="p">,</span> <span class="s">&#34;addr not exists&#34;</span><span class="p">,</span> <span class="nx">ErrCodeCallbackFun</span><span class="p">)</span><span class="p">)</span>

	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="p">(</span><span class="o">*</span><span class="nx">V</span><span class="p">)</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="nx">Address</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Handler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Address</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">pp</span> <span class="o">:=</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>

	<span class="k">if</span> <span class="p">!</span><span class="nf">CheckAddr</span><span class="p">(</span><span class="nx">pp</span><span class="p">.</span><span class="nf">VO</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="p">(</span><span class="o">*</span><span class="nx">V</span><span class="p">)</span><span class="p">.</span><span class="nx">Addr</span><span class="p">)</span> <span class="p">{</span>

		<span class="c1">//  pp search ErrCodeAddrNotExists message  pass to ErrCodeCallbackFun
</span><span class="c1"></span>		<span class="c1">// second arg is respData pass to registered callback func on Messages -&gt; ErrCodeCallbackFun
</span><span class="c1"></span>		<span class="nx">pp</span><span class="p">.</span><span class="nf">CallbackByCode</span><span class="p">(</span><span class="nx">ErrCodeAddrNotExists</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="nx">pp</span><span class="p">.</span><span class="nf">JSONOK</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span> <span class="c1">// pass nil will specify mplus.EmptyRespData
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ curl --request POST <span class="se">\
</span><span class="se"></span>&gt;   --url http://localhost:8080/ <span class="se">\
</span><span class="se"></span>&gt;   --header <span class="s1">&#39;content-type: application/json&#39;</span> <span class="se">\
</span><span class="se"></span>&gt;   --data <span class="s1">&#39;{&#34;addr&#34;:&#34;广东省深圳市南山区 xxx 号&#34;}&#39;</span>

&lt; HTTP/1.1 <span class="m">400</span> Bad Request
<span class="o">{</span><span class="s2">&#34;code&#34;</span>:400001,<span class="s2">&#34;message&#34;</span>:<span class="s2">&#34;addr not exists&#34;</span><span class="o">}</span>
</code></pre></div><h3 id="-requestbody">重复读取 request.Body</h3>
<p>由于<code>request.Body</code> 是一个 <code>io.ReadCloser</code> 实例，默认没有提供重复读取的能力。<strong>mplus</strong> 提供了API 在保留  <code>request.Body</code> 读取数据能力的同时获取数据内容。</p>
<ul>
<li><code>mplus.PP.ReqBody()</code> 保持 <code>request.Body</code> 可用并返回 <code>string</code> 格式的 body 内容</li>
<li><code>mplus.PP.ReqBodyPure()</code> 保持 <code>request.Body</code> 可用并返回 <code>[]byte</code> 格式的 body 内容</li>
<li><code>mplus.PP.ReqBodyMap()</code> 保持 <code>request.Body</code> 可用并返回 <code>map[string]interface{}</code> 格式的 body 内容</li>
<li><code>mplus.PP.ReqBodyToUnmarshaler(unmarshaler json.Unmarshaler) </code> 保持 <code>request.Body</code> 可用并将 body 内容序列化到   unmarshaler</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">V</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Addr</span> <span class="kt">string</span> <span class="s">`</span><span class="s">json:&#34;addr&#34;</span><span class="s">`</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// (*V)(nil) mean that is a nil point which hold type info
</span><span class="c1"></span>	<span class="c1">// Bind model just need type info
</span><span class="c1"></span>	<span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">MRote</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="p">(</span><span class="o">*</span><span class="nx">V</span><span class="p">)</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="nx">Address</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">Address</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">pp</span> <span class="o">:=</span> <span class="nx">mplus</span><span class="p">.</span><span class="nf">PlusPlus</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>

	<span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">pp</span><span class="p">.</span><span class="nf">VO</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="p">(</span><span class="o">*</span><span class="nx">V</span><span class="p">)</span>
	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
		<span class="nx">pp</span><span class="p">.</span><span class="nf">BadRequest</span><span class="p">(</span><span class="p">)</span> <span class="c1">// 400
</span><span class="c1"></span>		<span class="k">return</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nb">string</span><span class="p">(</span><span class="nx">pp</span><span class="p">.</span><span class="nf">ReqBodyPure</span><span class="p">(</span><span class="p">)</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">pp</span><span class="p">.</span><span class="nf">ReqBody</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>

		<span class="nx">pp</span><span class="p">.</span><span class="nf">InternalServerError</span><span class="p">(</span><span class="p">)</span> <span class="c1">// 500
</span><span class="c1"></span>		<span class="k">return</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">bodyMap</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">pp</span><span class="p">.</span><span class="nf">ReqBodyMap</span><span class="p">(</span><span class="p">)</span><span class="p">;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">v</span><span class="p">.</span><span class="nx">Addr</span> <span class="o">!=</span> <span class="nx">bodyMap</span><span class="p">[</span><span class="s">&#34;addr&#34;</span><span class="p">]</span> <span class="p">{</span>

		<span class="nx">pp</span><span class="p">.</span><span class="nf">InternalServerError</span><span class="p">(</span><span class="p">)</span> <span class="c1">// 500
</span><span class="c1"></span>		<span class="k">return</span>
	<span class="p">}</span>

	<span class="nx">pp</span><span class="p">.</span><span class="nf">OK</span><span class="p">(</span><span class="p">)</span> <span class="c1">// 200
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ curl --request POST <span class="se">\
</span><span class="se"></span>&gt; --url http://localhost:8080/ <span class="se">\
</span><span class="se"></span>&gt; --header <span class="s1">&#39;content-type: application/json&#39;</span> <span class="se">\
</span><span class="se"></span>&gt; --data <span class="s1">&#39;{&#34;addr&#34;:&#34;广东省深圳市南山区 xxx 号&#34;}&#39;</span>

&lt; HTTP/1.1 <span class="m">200</span> OK 
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>使用 Hugo 发布文章</title>
			<link>https://tangzixiang.github.io/posts/2019/%E4%BD%BF%E7%94%A8-hugo-%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</link>
			<pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E4%BD%BF%E7%94%A8-hugo-%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</guid>
			<description>摘要  添加一篇文章 本地开启草稿箱视图 解除文章草稿状态 发布草稿文章 设置文章过期时间/发布时间 发布保留过期文章及未发布文章  添加一篇文章 在上一篇文章 使用 Hugo 创建个人 Blog 中介绍了 Hugo 这个工具，以及如何使用它为自己创建一个好看的博客。这篇文章延续上一篇使用 registerforxxx.github.io 作为案例。
添加文章前我们先启动 Hugo
github.io $ hugo server 添加文章依旧是使用 new 子命令，这里我们在 posts 目录下创建一篇名为 my-first-post
github.io $ hugo new posts/my-first-post.md 创建完成后打开文章可以看到如下内容：
--- title: &amp;#34;My First Post&amp;#34; date: 2019-12-16T21:38:04+08:00 draft: true tags: - untagged --- 这是一篇 Markdown 格式的文章，文章的开头由前后 --- 包裹了一些信息，这些信息称为文章的元数据，用于说明文章的相关配套信息，其中包括但不限于标题、日期、标签、是否草稿等。
这里对上述的元数据做解释如下：
 title: 文章的标题 date: 文章的日期 draft: 文章是否草稿，草稿内容不会被发布 tags: 为当前文章打标签，不同文章可以使用相同的标签  文章内容需要写在元数据的后面：
--- title: &amp;#34;My First Post&amp;#34; date: 2019-12-16T21:38:04+08:00 draft: true tags: - untagged --- Quisque velit nisi, pretium ut lacinia in, elementum id enim.</description>
			<content type="html"><![CDATA[<h2 id="heading">摘要</h2>
<ul>
<li>添加一篇文章</li>
<li>本地开启草稿箱视图</li>
<li>解除文章草稿状态</li>
<li>发布草稿文章</li>
<li>设置文章过期时间/发布时间</li>
<li>发布保留过期文章及未发布文章</li>
</ul>
<h2 id="heading1">添加一篇文章</h2>
<p>在上一篇文章 <a href="../%E4%BD%BF%E7%94%A8-hugo-%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA-blog/">使用 Hugo 创建个人 Blog</a> 中介绍了 <a href="https://gohugo.io/"><strong>Hugo</strong></a> 这个工具，以及如何使用它为自己创建一个好看的博客。这篇文章延续上一篇使用  <code>registerforxxx.github.io</code> 作为案例。</p>
<p>添加文章前我们先启动 <strong>Hugo</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">github.io $ hugo server
</code></pre></div><p>添加文章依旧是使用 <code>new</code> 子命令，这里我们在 <code>posts</code> 目录下创建一篇名为 <code>my-first-post</code></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">github.io $ hugo new posts/my-first-post.md
</code></pre></div><p>创建完成后打开文章可以看到如下内容：</p>
<div class="highlight"><pre class="chroma"><code class="language-markdown" data-lang="markdown">---
title: &#34;My First Post&#34; 
date: 2019-12-16T21:38:04+08:00
draft: true
tags:
  <span class="k">-</span> untagged
---
</code></pre></div><p>这是一篇 Markdown 格式的文章，文章的开头由前后 <code>---</code> 包裹了一些信息，这些信息称为文章的元数据，用于说明文章的相关配套信息，其中包括但不限于标题、日期、标签、是否草稿等。</p>
<p>这里对上述的元数据做解释如下：</p>
<ul>
<li><strong>title</strong>: 文章的标题</li>
<li><strong>date</strong>: 文章的日期</li>
<li><strong>draft</strong>: 文章是否草稿，草稿内容不会被发布</li>
<li><strong>tags</strong>: 为当前文章打标签，不同文章可以使用相同的标签</li>
</ul>
<p>文章内容需要写在元数据的后面：</p>
<div class="highlight"><pre class="chroma"><code class="language-markdown" data-lang="markdown">---
title: &#34;My First Post&#34;
date: 2019-12-16T21:38:04+08:00
draft: true
tags: 
  <span class="k">-</span> untagged
---

Quisque velit nisi, pretium ut lacinia in, elementum id enim. Vivamus suscipit tortor eget felis porttitor 
volutpat. Donec rutrum congue leo eget malesuada. Nulla porttitor accumsan tincidunt. Praesent sapien 
massa, convallis a pellentesque nec, egestas non nisi. Curabitur arcu erat, accumsan id imperdiet et, 
porttitor at sem. Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem. Vivamus magna justo,
lacinia eget consectetur sed, convallis at tellus. Pellentesque in ipsum id orci porta dapibus. Vivamus 
magna justo, lacinia eget consectetur sed, convallis at tellus. 

Quisque velit nisi, pretium ut lacinia in, elementum id enim. Vivamus suscipit tortor eget felis porttitor 
volutpat. Donec rutrum congue leo eget malesuada. Nulla porttitor accumsan tincidunt. Praesent sapien 
massa, convallis a pellentesque nec, egestas non nisi. Curabitur arcu erat, accumsan id imperdiet et, 
porttitor at sem. Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem. Vivamus magna justo,
lacinia eget consectetur sed, convallis at tellus. Pellentesque in ipsum id orci porta dapibus. Vivamus 
magna justo, lacinia eget consectetur sed, convallis at tellus. 
</code></pre></div><p>完成文章的编写后我们回到浏览器，发现并没有看到新加的文章，即使刷新几百次也是一样的效果，这是因为文章仍处于草稿箱状态。如下图：</p>
<p><img src="/assets/image-20191218190656155.png" alt="image-20191218190656155"></p>
<h2 id="heading2">本地开启草稿箱视图</h2>
<p>记得我们上一篇文章的 <strong>Hugo 的特色</strong> 部分有提到 <strong>Hugo</strong> 具有默认热加载的功能，新添加的文章会自动在网页上实时渲染，但是！但是！但是！不包括草稿内容！</p>
<p>通过 <code>hugo new</code> 命令创建的文章默认会被打上草稿状态的<code>tag</code> 即 <code>draft</code> 选项，<strong>Hugo</strong> 通过 <code>draft</code> 选项识别到这是一篇草稿内容，所以不会对其进行渲染。</p>
<p>如果我们想在本地查看草稿内容，只需要在启动  <strong>Hugo</strong> 的时候带上参数 <code>-D</code>或则 <code>--buildDrafts</code> ：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">github.io $ hugo server -D
</code></pre></div><p>回到浏览器：</p>
<p><img src="/assets/image-20191216215029610.png" alt="image-20191216215029610"></p>
<h2 id="heading3">解除文章草稿状态</h2>
<p>在正式发布文章前我们需要解除当前文章的草稿状态，解除草稿状态只需要把文章开头的 <code>draft</code> 选项去除即可。</p>
<h2 id="heading4">发布草稿文章</h2>
<p>如果需要将草稿内容进行发布，在执行 <code>hugo</code> 生成发布内容时附带 <code>-D</code> 或则 <code>--buildDrafts</code> 即可。</p>
<pre><code>github.io $ hugo -D
</code></pre><h2 id="heading5">设置文章过期时间/发布时间</h2>
<p><strong>Hugo</strong> 通过以下两个元数据选项提供文章的过期时间及发布时间（已发布的可以通过 URL 间接访问😂）：</p>
<ul>
<li><strong>expiryDate</strong>：过期时间，已过期的内容不会渲染到网页中</li>
<li><strong>publishDate</strong>：发布时间，未到发布时间不会渲染到网页中</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-markdown" data-lang="markdown">---
title: &#34;孔融&#34;
date: 2019-12-16T21:38:04+08:00
expiryDate: 2019-12-18T21:00:20+08:00
description: &#34;孔融何许人也&#34;
---
</code></pre></div><h2 id="heading6">发布保留过期文章及未发布文章</h2>
<p>直接执行 <code>hugo</code> 生成的发布内容不会携带已过期的文章或者未到发布时间的文章.</p>
<p>需要发布时携带过期文章需要执行时附带参数 <code>-E</code> 或则 <code>--buildExpired</code>：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">github.io $ hugo -E
</code></pre></div><p>需要发布时携带未发布文章需要执行时附带参数 <code>-F</code> 或则 <code>--buildFuture</code>：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">github.io $ hugo -F
</code></pre></div><p>当然也可以选择同时附带两个以上的参数：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">github.io $ hugo -DEF
</code></pre></div><p>生成发布文件完成后推送最新内容到 GitHub 上即可看到最新的文章。</p>
]]></content>
		</item>
		
		<item>
			<title>使用 Hugo 创建个人 Blog</title>
			<link>https://tangzixiang.github.io/posts/2019/%E4%BD%BF%E7%94%A8-hugo-%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA-blog/</link>
			<pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E4%BD%BF%E7%94%A8-hugo-%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA-blog/</guid>
			<description>摘要  你得先有个 GitHub 账号 Hugo 是什么？ Hugo 特色 安装 Hugo Hugo Themes Hugo 子命令 创建一个站点目录 添加主题 推送到 GitHub 上 配置 404 页面 GitHub Page 相关限制说明  你得先有个 GitHub 账号 在上一篇 如何在 GitHub 上创建 repository 中介绍了如何在 GitHub 上注册账号及个人仓库的详细步骤，如果你已有账号可以跳过此节，继续往下。
这篇文章我们延续上一章使用 registerforxxx.github.io 作为案例。
Hugo 是什么？ 引用 官方 结束的一句话
 Hugo is a fast and modern static site generator written in Go, and designed to make website creation fun again
 一句话总结：Hugo 是一个静态网站生成器 😆。</description>
			<content type="html"><![CDATA[<h2 id="heading">摘要</h2>
<ul>
<li>你得先有个 GitHub 账号</li>
<li>Hugo 是什么？</li>
<li>Hugo 特色</li>
<li>安装 Hugo</li>
<li>Hugo Themes</li>
<li>Hugo 子命令</li>
<li>创建一个站点目录</li>
<li>添加主题</li>
<li>推送到 GitHub 上</li>
<li>配置 404 页面</li>
<li>GitHub Page 相关限制说明</li>
</ul>
<p><img src="/assets/image-20191215160355193.png" alt="image-20191215160355193"></p>
<h2 id="-github-">你得先有个 GitHub 账号</h2>
<p>在上一篇 <a href="../%E5%A6%82%E4%BD%95%E5%9C%A8-github-%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93">如何在 GitHub 上创建 repository</a> 中介绍了如何在 GitHub 上注册账号及个人仓库的详细步骤，如果你已有账号可以跳过此节，继续往下。</p>
<p>这篇文章我们延续上一章使用 <code>registerforxxx.github.io</code> 作为案例。</p>
<h2 id="hugo-">Hugo 是什么？</h2>
<p>引用 <a href="https://gohugo.io/about/what-is-hugo/">官方</a> 结束的一句话</p>
<blockquote>
<p>Hugo is a fast and modern static site generator written in Go, and designed to make website creation fun again</p>
</blockquote>
<p>一句话总结：<strong>Hugo</strong> 是一个静态网站生成器 😆。</p>
<p>往往我们创建一个网站需要需要比较专业的前期准备，譬如建立复杂的运行时、依赖项和数据库等等，通过 <strong>Hugo</strong> 这个工具，你可以省去上述对咋们小白不友好的步骤搞定一个自己网站。</p>
<p>当你完成一篇文章后，<strong>Hugo</strong> 会对你的文章进行加工输出静态页面，我们只需要将这些静态页面存放（推送）到个人静态站点上即可。这篇文章我们使用 <strong>GitHub Pages</strong> 作为我们的静态站点，如何创建 <strong>GitHub Pages</strong> 可以参考 <a href="../%E5%A6%82%E4%BD%95%E5%9C%A8-github-%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93">这篇文章</a> 的最后一步。</p>
<h2 id="hugo-1">Hugo 特色</h2>
<ul>
<li>可以设置草稿箱，文章发布时间，文章过期时间</li>
<li>热加载，如果把 <strong>Hugo</strong> 作为站点服务器，更新内容后不需要重启服务，因为<strong>Hugo</strong> 会自动监控变化并更新页面内容，就算不使用 <strong>Hugo</strong> 作为站点服务器，在本地打草稿的时候也可以开启热加载，实时预览变化内容</li>
<li>主题风格超多，选择一种拿来即用</li>
<li>区分开发目录及发布目录，可以避免不必要的内容被暴露</li>
<li>支持国际化</li>
</ul>
<h2 id="-hugo">安装 Hugo</h2>
<ul>
<li>Mac 系统安装</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">brew install hugo
</code></pre></div><ul>
<li>Linux 系统安装</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">snap install hugo
</code></pre></div><ul>
<li>Windows 系统安装</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">choco install hugo -confirm
</code></pre></div><p>​	或者：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">choco install hugo-extended -confirm
</code></pre></div><p>除了上述通过命令行方式安装外，还可以直接在其 <strong>GitHub</strong> releases <a href="https://github.com/gohugoio/hugo/releases">地址</a>下载对应压缩包。</p>
<p>由于笔者的系统为 macOS 我们已此为例，更详细的安装说明可以参考 <a href="https://gohugo.io/getting-started/installing/">官方文档</a> 。</p>
<p>安装完成后可以测试如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ hugo version
Hugo Static Site Generator v0.60.1/extended darwin/amd64 BuildDate: xxx
</code></pre></div><h2 id="hugo-themes">Hugo Themes</h2>
<p><strong>Hugo</strong> <a href="https://themes.gohugo.io/">主题</a> 特别多，不止博客风格。连各类网站风格也有</p>
<p><img src="/assets/image-20191215144700276.png" alt="image-20191215144700276"></p>
<h2 id="hugo-2">Hugo 子命令</h2>
<p><strong>Hugo</strong> 有不少子命令, 使用 <code>help</code> 输出如下</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">~ $ hugo -h
hugo is the main command, used to build your Hugo site.

Hugo is a Fast and Flexible Static Site Generator
built with love by spf13 and friends in Go.

Complete documentation is available at http://gohugo.io/.

Usage:
  hugo <span class="o">[</span>flags<span class="o">]</span>
  hugo <span class="o">[</span>command<span class="o">]</span>

Available Commands:
  check       Contains some verification checks
  config      Print the site configuration
  convert     Convert your content to different formats
  deploy      Deploy your site to a Cloud provider.
  env         Print Hugo version and environment info
  gen         A collection of several useful generators.
  <span class="nb">help</span>        Help about any <span class="nb">command</span>
  import      Import your site from others.
  list        Listing out various types of content
  mod         Various Hugo Modules helpers.
  new         Create new content <span class="k">for</span> your site
  server      A high performance webserver
  version     Print the version number of Hugo
</code></pre></div><h2 id="heading1">创建一个站点目录</h2>
<p>创建一个站点我们需要使用 <code>new</code> 子命令，具体用法查看如下:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">~ $ hugo new --help
Create a new content file and automatically <span class="nb">set</span> the date and title.
It will guess which kind of file to create based on the path provided.

You can also specify the kind with <span class="sb">`</span>-k KIND<span class="sb">`</span>.

If archetypes are provided in your theme or site, they will be used.

Ensure you run this within the root directory of your site.

Usage:
  hugo new <span class="o">[</span>path<span class="o">]</span> <span class="o">[</span>flags<span class="o">]</span>
  hugo new <span class="o">[</span>command<span class="o">]</span>

Available Commands:
  site        Create a new site <span class="o">(</span>skeleton<span class="o">)</span>
  theme       Create a new theme
</code></pre></div><p>这里使用 <code>sites</code> 目录作为个人站点上级目录，然后在当前目录下创建一个名为 <code>github.io</code> 的项目</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sites $ hugo new site github.io
</code></pre></div><p>创建完成后可以看到自动生成相关目录如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sites $ tree <span class="c1"># tree 命令查看当前目录结构</span>
.
└── github.io <span class="c1"># 创建的项目名（一个独立的目录）</span>
    ├── archetypes 
    │   └── default.md
    ├── config.toml <span class="c1"># 配置文件</span>
    ├── content <span class="c1"># 文章放在这里</span>
    ├── data
    ├── layouts 
    ├── static
    └── themes <span class="c1"># 主题放在这里</span>
</code></pre></div><h2 id="heading2">添加主题</h2>
<p>接着选择一个主题作为个人站点主题，这里举例选择了 <a href="https://themes.gohugo.io/hermit/">Hermit</a> 这个主题，按照 <strong>Getting started</strong> 的步骤，我们需要执行如下命令将这个主题添加进来</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">github.io $ git clone https://github.com/Track3/hermit.git themes/hermit
</code></pre></div><p>拷贝该主题默认的配置文件</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">github.io $ cp themes/hermit/exampleSite/config.toml .
</code></pre></div><p>执行 <code>server</code> 子命令启动本地预览功能，默认会绑定到 <code>1313</code> 端口</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">github.io $ hugo server
</code></pre></div><p>打开浏览器，输入 <code>http://localhost:1313</code> 可以看到这个文章最开始的界面了，但是由于我们还没有任何的文章，所以点击网页上的相关链接会出现 404</p>
<p>为了进一步看到和  <a href="https://themes.gohugo.io/hermit/">Hermit</a>  这个 Demo 一样的效果，我们可以把他的文章内容拷贝过来</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">github.io $ cp -r themes/hermit/exampleSite/content/* ./content/
</code></pre></div><p>注意，由于 <strong>Hugo</strong> 默认开启了热加载功能，我们不需要中断已启动的 Hugo 服务，可以在另外一个终端窗口的当前目录下执行该语句，同时可以看到原来启动服务的终端输出不少提示信息表示内容已更新，这时候点击页面上的链接就有内容了。</p>
<h2 id="-github-1">推送到 GitHub 上</h2>
<p>最后我们需要将其推送到准备好的 <strong>GitHub</strong> 上，不过推送前有几个地方需要注意：</p>
<ol>
<li>
<p>推送前我们需要执行 <code>hugo</code> 生成最终的静态页面,默认会导出到 <code>public</code> 目录下</p>
</li>
<li>
<p>导出静态页面前我们需要更新 <code>config.toml</code> 配置文件,将 <code>baseURL = &quot;https://example.com&quot;</code> 改成我们自己的域名，由于当前案例使用的是<code>registerforxxx.github.io</code>，更新后为 <code>baseURL = &quot;https://registerforxxx.github.io&quot;</code>，这一步的缺失会直接导致页面的静态资源找不到，人话就是：一片空白除了文字~😤</p>
</li>
</ol>
<p>执行命令导出最终的静态页面：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">github.io $ hugo
</code></pre></div><p>打开案例项目<a href="https://github.com/registerforxxx/registerforxxx.github.io">地址</a>，获取推送地址：</p>
<p><img src="/assets/image-20191215154409674.png" alt="image-20191215154409674"></p>
<p>点击 <code>clone or download</code> 绿色按钮拷贝里面的地址，然后进入 <code>public</code> 子目录完成以下步骤</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 初始化 git 环境</span>
public $ git init

<span class="c1"># 执行 git remote add origin 上一步拷贝的地址</span>
<span class="c1"># 或者使用 ssh 方式</span>
public $ git remote add origin https://github.com/registerforxxx/registerforxxx.github.io.git


public $ git add .
public $ git commit -am <span class="s2">&#34;first commit&#34;</span>
public $ git pull origin master
public $ git push -u origin master
</code></pre></div><p>完成后我们便可以直接访问咋们的项目地址：<a href="https://registerforxxx.github.io/"><a href="https://registerforxxx.github.io/">https://registerforxxx.github.io/</a></a></p>
<p><img src="/assets/image-20191215180231614.png" alt="image-20191215180231614"></p>
<p>如果不清楚生成的 GitHub Page 地址可以在这个位置找到👇</p>
<p><img src="/assets/image-20191215180621239.png" alt="image-20191215180621239"></p>
<p>一直下拉到 <code>GitHub Pages</code> 板块便可看到具体地址，这里需要注意如果仓库没有任何内容是无法生成地址的。</p>
<p><img src="/assets/image-20191215180728933.png" alt="image-20191215180728933"></p>
<h2 id="-404-">配置 404 页面</h2>
<p>404 页面常见于用户访问一个不存在的资源，<a href="https://help.github.com/en/github/working-with-github-pages/creating-a-custom-404-page-for-your-github-pages-site">GitHub</a> 默认支持 404 ，只需要你在项目根目录下存放一个 <code>404.html</code></p>
<p><img src="/assets/image-20191218210807231.png" alt="image-20191218210807231"></p>
<p><strong>Hugo</strong> 的大部分主题都是包含 404 页面的，我们只需要把其推送到 GitHub 上即可。</p>
<p><img src="/assets/image-20191218211048673.png" alt="image-20191218211048673"></p>
<h2 id="github-page-">GitHub Page 相关限制说明</h2>
<blockquote>
<p>GitHub Pages 站点受到以下使用限制的约束：</p>
<ul>
<li>GitHub Pages 源仓库建议的限制为 1GB。更多信息请参阅“<a href="https://help.github.com/cn/articles/what-is-my-disk-quota/#file-and-repository-size-limitations">我的磁盘配额是多少？</a>”</li>
<li>发布的 GitHub Pages 站点不得超过 1 GB。</li>
<li>GitHub Pages 站点的<em>软</em>带宽限制为每月 100GB。</li>
<li>GitHub Pages 站点的<em>软</em>限制为每小时 10 次构建。</li>
</ul>
</blockquote>
<p>更多限制内容可以参考<a href="https://help.github.com/cn/github/working-with-github-pages/about-github-pages#usage-limits">限制</a></p>
]]></content>
		</item>
		
		<item>
			<title>如何在 GitHub 上创建 repository </title>
			<link>https://tangzixiang.github.io/posts/2019/%E5%A6%82%E4%BD%95%E5%9C%A8-github-%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/</link>
			<pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E5%A6%82%E4%BD%95%E5%9C%A8-github-%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/</guid>
			<description>摘要  创建 GitHub 账号 创建首个 repository  创建GitHub 账号 首先登录 GitHub 官网地址，见到如下界面
填入个人信息后会跳转至验证页面
验证通过后进入下个页面选择是否使用专业版或免费版
个人版及专业版除了价格不一样之外参考如下：
这里我们选择个人板块的免费版进入下个页面
这里我们选择 None 和 Create a website with GitHub Pages 然后点击 Complete 完成个人账号的注册流程,进入未验证邮箱提示页面
这里可以看到右上角已经获得一个 GitHub 默认分配的头像
创建首个 repository 上一步我们完成了个人账号的创建，在邮箱点击确认验证后会默认进入 GitHub 的创建仓库页面
这里我们以创建个人站点仓库举例，输入完成后点击 create repository 完成个人第一个仓库的创建</description>
			<content type="html"><![CDATA[<h2 id="heading">摘要</h2>
<ul>
<li>创建 GitHub 账号</li>
<li>创建首个 repository</li>
</ul>
<h2 id="github-">创建GitHub 账号</h2>
<p>首先登录 <a href="https://github.com/">GitHub</a> 官网地址，见到如下界面</p>
<p><img src="/assets/image-20191215120931164.png" alt="image-20191215120931164"></p>
<p>填入个人信息后会跳转至验证页面</p>
<p><img src="/assets/image-20191215122300714.png" alt="image-20191215122300714"></p>
<p>验证通过后进入下个页面选择是否使用专业版或免费版</p>
<p><img src="/assets/image-20191215122444247.png" alt="image-20191215122444247"></p>
<p>个人版及专业版除了价格不一样之外参考如下：</p>
<p><img src="/assets/image-20191215122703136.png" alt="image-20191215122703136"></p>
<p>这里我们选择个人板块的免费版进入下个页面</p>
<p><img src="/assets/join-customize.png" alt=""></p>
<p>这里我们选择 <strong>None</strong> 和  <strong>Create a website with GitHub Pages</strong> 然后点击 <strong>Complete</strong> 完成个人账号的注册流程,进入未验证邮箱提示页面</p>
<p><img src="/assets/image-20191215123611317.png" alt="image-20191215123611317"></p>
<p>这里可以看到右上角已经获得一个 GitHub 默认分配的头像</p>
<h2 id="-repository">创建首个 repository</h2>
<p>上一步我们完成了个人账号的创建，在邮箱点击确认验证后会默认进入 GitHub 的创建仓库页面</p>
<p><img src="/assets/image-20191215125746084.png" alt="image-20191215125746084"></p>
<p>这里我们以创建个人站点仓库举例，输入完成后点击 <strong>create repository</strong> 完成个人第一个仓库的创建</p>
<p><img src="/assets/image-20191215130022873.png" alt="image-20191215130022873"></p>
]]></content>
		</item>
		
		<item>
			<title>[Go] Uber Go 语言编程规范</title>
			<link>https://tangzixiang.github.io/posts/2019/uber-go-%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</link>
			<pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/uber-go-%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Go] 用 Testify 来改善 GO 测试和模拟</title>
			<link>https://tangzixiang.github.io/posts/2019/%E7%94%A8-testify-%E6%9D%A5%E6%94%B9%E5%96%84-go-%E6%B5%8B%E8%AF%95%E5%92%8C%E6%A8%A1%E6%8B%9F/</link>
			<pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E7%94%A8-testify-%E6%9D%A5%E6%94%B9%E5%96%84-go-%E6%B5%8B%E8%AF%95%E5%92%8C%E6%A8%A1%E6%8B%9F/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Go] Go的50度灰</title>
			<link>https://tangzixiang.github.io/posts/2019/go%E7%9A%8450%E5%BA%A6%E7%81%B0/</link>
			<pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/go%E7%9A%8450%E5%BA%A6%E7%81%B0/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>[Linux] Linux 学习笔记</title>
			<link>https://tangzixiang.github.io/posts/2019/linux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
			<pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/linux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
			<description>帮助命令  在只记得部分关键字命令的时候，可以使用 man -k 来搜索 需要知道某个命令的简要说明，可以使用 whatis ，更详细的介绍可以使用 info 命令 查看命令在哪个位置可以使用 which 命令 对于命令的具体参数及使用方法，需要用到强大的 man  使用命令 whatis  功能： 简要说明指定命令的作用 使用方式：  tangzixiang@dev-lyy-web4:~$ whatis -h Usage: whatis [OPTION...] KEYWORD... -d, --debug emit debugging messages -v, --verbose print verbose warning messages -r, --regex interpret each keyword as a regex -w, --wildcard the keyword(s) contain wildcards -l, --long do not trim output to terminal width -C, --config-file=FILE use this user configuration file -L, --locale=LOCALE define the locale for this search -m, --systems=SYSTEM use manual pages from other systems -M, --manpath=PATH set search path for manual pages to PATH -s, --sections=LIST, --section=LIST search only these sections (colon-separated) -?</description>
			<content type="html"><![CDATA[<h2 id="heading">帮助命令</h2>
<ul>
<li>在只记得部分关键字命令的时候，可以使用 <code>man -k</code> 来搜索</li>
<li>需要知道某个命令的简要说明，可以使用 <code>whatis</code> ，更详细的介绍可以使用 <code>info</code> 命令</li>
<li>查看命令在哪个位置可以使用 <code>which</code> 命令</li>
<li>对于命令的具体参数及使用方法，需要用到强大的 <code>man</code></li>
</ul>
<h3 id="heading1">使用命令</h3>
<h4 id="whatis">whatis</h4>
<ul>
<li>功能： 简要说明指定命令的作用</li>
<li>使用方式：</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ whatis -h
Usage: whatis <span class="o">[</span>OPTION...<span class="o">]</span> KEYWORD...

  -d, --debug                emit debugging messages
  -v, --verbose              print verbose warning messages
  -r, --regex                interpret each keyword as a regex
  -w, --wildcard             the keyword<span class="o">(</span>s<span class="o">)</span> contain wildcards
  -l, --long                 <span class="k">do</span> not trim output to terminal width
  -C, --config-file<span class="o">=</span>FILE     use this user configuration file
  -L, --locale<span class="o">=</span>LOCALE        define the locale <span class="k">for</span> this search
  -m, --systems<span class="o">=</span>SYSTEM       use manual pages from other systems
  -M, --manpath<span class="o">=</span>PATH         <span class="nb">set</span> search path <span class="k">for</span> manual pages to PATH
  -s, --sections<span class="o">=</span>LIST, --section<span class="o">=</span>LIST
                             search only these sections <span class="o">(</span>colon-separated<span class="o">)</span>
  -?, --help                 give this <span class="nb">help</span> list
      --usage                give a short usage message
  -V, --version              print program version
</code></pre></div><ul>
<li>举例：</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ whatis which
which <span class="o">(</span>1<span class="o">)</span>            - locate a <span class="nb">command</span>

<span class="c1"># 简要说明 whi 开头的命令</span>
tangzixiang@dev-lyy-web4:~$ whatis -w <span class="s2">&#34;whi*&#34;</span>
which <span class="o">(</span>1<span class="o">)</span>            - locate a <span class="nb">command</span>
whiptail <span class="o">(</span>1<span class="o">)</span>         - display dialog boxes from shell scripts

<span class="c1"># 使用正则解析 `whi*`</span>
tangzixiang@dev-lyy-web4:~$ whatis -r <span class="s2">&#34;whi*&#34;</span>
git-whatchanged <span class="o">(</span>1<span class="o">)</span>  - Show logs with difference each commit introduces
pam_pwhistory <span class="o">(</span>8<span class="o">)</span>    - PAM module to remember last passwords
pam_wheel <span class="o">(</span>8<span class="o">)</span>        - Only permit root access to members of group wheel
whatis <span class="o">(</span>1<span class="o">)</span>           - display one-line manual page descriptions
whereis <span class="o">(</span>1<span class="o">)</span>          - locate the binary, source, and manual page files <span class="k">for</span> a <span class="nb">command</span>
which <span class="o">(</span>1<span class="o">)</span>            - locate a <span class="nb">command</span>
whiptail <span class="o">(</span>1<span class="o">)</span>         - display dialog boxes from shell scripts
who <span class="o">(</span>1<span class="o">)</span>              - show who is logged on
whoami <span class="o">(</span>1<span class="o">)</span>           - print effective userid
</code></pre></div><h4 id="info">info</h4>
<ul>
<li>功能：更加详细的说明命令的作用</li>
<li>使用方式：</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ info -h
Usage: info <span class="o">[</span>OPTION<span class="o">]</span>... <span class="o">[</span>MENU-ITEM...<span class="o">]</span>

Read documentation in Info format.

Options:
  -a, --all                    use all matching manuals.
  -k, --apropos<span class="o">=</span>STRING         look up STRING in all indices of all manuals.
  -d, --directory<span class="o">=</span>DIR          add DIR to INFOPATH.
      --dribble<span class="o">=</span>FILE           remember user keystrokes in FILENAME.
  -f, --file<span class="o">=</span>MANUAL            specify Info manual to visit.
  -h, --help                   display this <span class="nb">help</span> and exit.
      --index-search<span class="o">=</span>STRING    go to node pointed by index entry STRING.
  -n, --node<span class="o">=</span>NODENAME          specify nodes in first visited Info file.
  -o, --output<span class="o">=</span>FILE            output selected nodes to FILE.
  -R, --raw-escapes            output <span class="s2">&#34;raw&#34;</span> ANSI escapes <span class="o">(</span>default<span class="o">)</span>.
      --no-raw-escapes         output escapes as literal text.
      --restore<span class="o">=</span>FILE           <span class="nb">read</span> initial keystrokes from FILE.
  -O, --show-options, --usage  go to command-line options node.
      --strict-node-location   <span class="o">(</span><span class="k">for</span> debugging<span class="o">)</span> use Info file pointers as-is.
      --subnodes               recursively output menu items.
  -v, --variable <span class="nv">VAR</span><span class="o">=</span>VALUE     assign VALUE to Info variable VAR.
      --vi-keys                use vi-like and less-like key bindings.
      --version                display version information and exit.
  -w, --where, --location      print physical location of Info file.
  -x, --debug<span class="o">=</span>NUMBER           <span class="nb">set</span> debugging level <span class="o">(</span>-1 <span class="k">for</span> all<span class="o">)</span>.
</code></pre></div><h4 id="man">man</h4>
<ul>
<li>功能：查询命令的说明文档</li>
<li>使用方式:</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ man -h
Usage: man <span class="o">[</span>OPTION...<span class="o">]</span> <span class="o">[</span>SECTION<span class="o">]</span> PAGE...

  -C, --config-file<span class="o">=</span>FILE     use this user configuration file
  -d, --debug                emit debugging messages
  -D, --default              reset all options to their default values
      --warnings<span class="o">[</span><span class="o">=</span>WARNINGS<span class="o">]</span>  <span class="nb">enable</span> warnings from groff

 Main modes of operation:
  -f, --whatis               equivalent to whatis
  -k, --apropos              equivalent to apropos
  -K, --global-apropos       search <span class="k">for</span> text in all pages
  -l, --local-file           interpret PAGE argument<span class="o">(</span>s<span class="o">)</span> as <span class="nb">local</span> filename<span class="o">(</span>s<span class="o">)</span>
  -w, --where, --path, --location
                             print physical location of man page<span class="o">(</span>s<span class="o">)</span>
  -W, --where-cat, --location-cat
                             print physical location of cat file<span class="o">(</span>s<span class="o">)</span>

  -c, --catman               used by catman to reformat out of date cat pages
  -R, --recode<span class="o">=</span>ENCODING      output <span class="nb">source</span> page encoded in ENCODING

 Finding manual pages:
  -L, --locale<span class="o">=</span>LOCALE        define the locale <span class="k">for</span> this particular man search
  -m, --systems<span class="o">=</span>SYSTEM       use manual pages from other systems
  -M, --manpath<span class="o">=</span>PATH         <span class="nb">set</span> search path <span class="k">for</span> manual pages to PATH

  -S, -s, --sections<span class="o">=</span>LIST    use colon separated section list

  -e, --extension<span class="o">=</span>EXTENSION  limit search to extension <span class="nb">type</span> EXTENSION

  -i, --ignore-case          look <span class="k">for</span> pages <span class="k">case</span>-insensitively <span class="o">(</span>default<span class="o">)</span>
  -I, --match-case           look <span class="k">for</span> pages <span class="k">case</span>-sensitively

      --regex                show all pages matching regex
      --wildcard             show all pages matching wildcard

      --names-only           make --regex and --wildcard match page names only,
                             not descriptions

  -a, --all                  find all matching manual pages
  -u, --update               force a cache consistency check

      --no-subpages          don<span class="s1">&#39;t try subpages, e.g. &#39;</span>man foo bar<span class="s1">&#39; =&gt; &#39;</span>man
                             foo-bar<span class="s1">&#39;
</span><span class="s1">
</span><span class="s1"> Controlling formatted output:
</span><span class="s1">  -P, --pager=PAGER          use program PAGER to display output
</span><span class="s1">  -r, --prompt=STRING        provide the `less&#39;</span> pager with a prompt

  -7, --ascii                display ASCII translation of certain latin1 chars
  -E, --encoding<span class="o">=</span>ENCODING    use selected output encoding
      --no-hyphenation, --nh turn off hyphenation
      --no-justification,                              --nj   turn off justification
  -p, --preprocessor<span class="o">=</span>STRING  STRING indicates which preprocessors to run:
                             e - <span class="o">[</span>n<span class="o">]</span>eqn, p - pic, t - tbl,
g - grap, r - refer, v - vgrind

  -t, --troff                use groff to format pages
  -T, --troff-device<span class="o">[</span><span class="o">=</span>DEVICE<span class="o">]</span>   use groff with selected device

  -H, --html<span class="o">[</span><span class="o">=</span>BROWSER<span class="o">]</span>       use www-browser or BROWSER to display HTML output
  -X, --gxditview<span class="o">[</span><span class="o">=</span>RESOLUTION<span class="o">]</span>   use groff and display through gxditview
                             <span class="o">(</span>X11<span class="o">)</span>:
                             -X <span class="o">=</span> -TX75, -X100 <span class="o">=</span> -TX100, -X100-12 <span class="o">=</span> -TX100-12
  -Z, --ditroff              use groff and force it to produce ditroff

  -?, --help                 give this <span class="nb">help</span> list
      --usage                give a short usage message
  -V, --version              print program version
</code></pre></div><h4 id="which">which</h4>
<ul>
<li>功能：查询命令的存放路径</li>
<li>使用方式:</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ which make
/usr/bin/make
</code></pre></div><h4 id="whereis">whereis</h4>
<ul>
<li>功能：查询命令的搜索路径，当系统中安装了同一个软件的多个版本，不确定使用那个版本时，这个命令就能派上用场</li>
<li>使用方式:</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ whereis python
python: /usr/bin/python3.5 /usr/bin/python /usr/bin/python3.5m /usr/bin/python2.7 /usr/bin/python2.7-config /usr/lib/python3.5 /usr/lib/python2.7 /etc/python3.5 /etc/python /etc/python2.7 /usr/local/lib/python3.5 /usr/local/lib/python2.7 /usr/include/python2.7 /usr/share/python /usr/share/man/man1/python.1.gz
</code></pre></div><h2 id="heading2">文件及目录管理命令</h2>
<ul>
<li>文件查询是重点，可以使用 <code>find</code> 或则 <code>locate</code>来进行，<code>find</code> 的参数丰富，也非常强大</li>
<li>给文件创建别名或链接可以使用 <code>ln</code></li>
</ul>
<h3 id="heading3">列出目录项</h3>
<ol>
<li>查看当前目录下文件个数</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ find ./ <span class="p">|</span> wc -l
<span class="m">74</span>
</code></pre></div><ol start="2">
<li>按时间排序，以列表的方式显示</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ ls -lrt --full-time -h
total 34M
drwxr-xr-x <span class="m">5</span> tangzixiang tangzixiang 4.0K 2018-10-29 10:04:44.000000000 +0800 mawar_deploy
-rw-r--r-- <span class="m">1</span> tangzixiang tangzixiang  12M 2018-11-29 10:25:53.000000000 +0800 mawar_deploy-v3.2.7-20181129.tar.gz
drwxr-xr-x <span class="m">5</span> tangzixiang tangzixiang 4.0K 2019-02-19 19:09:50.240419974 +0800 <span class="nb">test</span>
-rw-rw-r-- <span class="m">1</span> tangzixiang tangzixiang  62K 2019-02-20 16:21:31.528091951 +0800 output.txt
-rw-rw-r-- <span class="m">1</span> tangzixiang tangzixiang 1.6M 2019-02-20 16:32:45.064693140 +0800 readelf_out.txt
-rwxr-xr-x <span class="m">1</span> tangzixiang tangzixiang  20M 2019-02-21 14:52:29.000000000 +0800 mawar-linux-amd64
</code></pre></div><ol start="3">
<li>给每项文件前面加编号</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ ls -lrt -h <span class="p">|</span>cat -n
     1	total 34M
     2	drwxr-xr-x <span class="m">5</span> tangzixiang tangzixiang 4.0K Oct <span class="m">29</span> 10:04 mawar_deploy
     3	-rw-r--r-- <span class="m">1</span> tangzixiang tangzixiang  12M Nov <span class="m">29</span> 10:25 mawar_deploy-v3.2.7-20181129.tar.gz
     4	drwxr-xr-x <span class="m">5</span> tangzixiang tangzixiang 4.0K Feb <span class="m">19</span> 19:09 <span class="nb">test</span>
     5	-rw-rw-r-- <span class="m">1</span> tangzixiang tangzixiang  62K Feb <span class="m">20</span> 16:21 output.txt
     6	-rw-rw-r-- <span class="m">1</span> tangzixiang tangzixiang 1.6M Feb <span class="m">20</span> 16:32 readelf_out.txt
     7	-rwxr-xr-x <span class="m">1</span> tangzixiang tangzixiang  20M Feb <span class="m">21</span> 14:52 mawar-linux-amd64
</code></pre></div><h3 id="heading4">查找目录及文件</h3>
<p><code>find</code> 是实时查找，如果需要更快的查找可以试下 <code>locate</code>，<code>locate</code> 会为文件系统建立索引数据库，如果有文件更新，需要定期执行更新命令来更新索引数据库</p>
<ol>
<li>搜寻文件或目录</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ find ./ -name <span class="s2">&#34;*.md&#34;</span>
./test/README.md
./test/._README.md
./mawar_deploy/README.md
./mawar_deploy/._README.md

tangzixiang@dev-lyy-web5:~$ find ./ -name <span class="s2">&#34;*.md&#34;</span> <span class="p">|</span> xargs file
./test/README.md:           UTF-8 Unicode text, with very long lines
./test/._README.md:         AppleDouble encoded Macintosh file
./mawar_deploy/README.md:   UTF-8 Unicode text, with very long lines
./mawar_deploy/._README.md: AppleDouble encoded Macintosh file
</code></pre></div><ol start="2">
<li>递归当前目录及子目录删除所有 txt 文件</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ ls
mawar_deploy readelf_out.txt  <span class="nb">test</span>
tangzixiang@dev-lyy-web5:~$ find ./ -name <span class="s2">&#34;*.txt&#34;</span> -exec rm <span class="o">{</span><span class="o">}</span> <span class="se">\;</span>
tangzixiang@dev-lyy-web5:~$ ls
mawar_deploy  <span class="nb">test</span>
</code></pre></div><ol start="3">
<li>寻找包含有 <code>superv</code> 的路径</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ locate supervisord
/etc/supervisor/supervisord.conf
/usr/local/bin/echo_supervisord_conf
/usr/local/bin/supervisord
</code></pre></div><ol start="4">
<li>更新 <code>locate</code> 的索引数据库</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ sudo updatedb
</code></pre></div><h3 id="heading5">查看文件内容</h3>
<ol>
<li>显示文件内容加行号</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ cat -n test.txt
</code></pre></div><ol start="2">
<li>分页查看列表项</li>
</ol>
<pre><code>tangzixiang@dev-lyy-web5:~$ ls -al |more
tangzixiang@dev-lyy-web5:~$ ls -al |less
</code></pre><ol start="3">
<li>查看文件前 10 行</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~<span class="nv">$head</span> <span class="m">10</span> test.txt
</code></pre></div><ol start="4">
<li>查看文件最后 10 行</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~<span class="nv">$tail</span> <span class="m">10</span> test.txt
</code></pre></div><ol start="5">
<li>查看文件的区别</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~/test$ date &gt;&gt; b.txt
tangzixiang@dev-lyy-web5:~<span class="nv">$diff</span> a.txt b.txt
230a231
&gt; Thu Feb <span class="m">21</span> 19:51:25 CST <span class="m">2019</span>
</code></pre></div><ol start="6">
<li>动态展示文件最新内容</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ tail -f /data/log/supervisor/mawar/supervisor_stdout.log
<span class="o">[</span>REQUEST<span class="o">]</span> 0c1f57b5-fffa-498c-9420-e318dce68a4a

tangzixiang@dev-lyy-web5:~$ tailf /data/log/supervisor/mawar/supervisor_stdout.log
<span class="o">[</span>REQUEST<span class="o">]</span> 0c1f57b5-fffa-498c-9420-e318dce68a4a
</code></pre></div><h3 id="heading6">查找文件内容</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ egrep logCamerasChangeGroupMsg /data/log/supervisor_stdout.log -C5
<span class="o">[</span>REQUEST<span class="o">]</span> 40ab5634-366d-41d9-9a03-66d8df986898
<span class="o">[</span>GIN<span class="o">]</span> 2019/02/20 - 02:15:56 <span class="p">|</span> <span class="m">200</span> <span class="p">|</span>    5.262809ms <span class="p">|</span> 192.168.100.238 <span class="p">|</span>  POST     
<span class="o">[</span>logCamerasChangeGroupMsg<span class="o">]</span> log api request error: The dotted field <span class="s1">&#39;config.inte_face_min_size&#39;</span> in <span class="s1">&#39;properties.last_data.config.inte_face_min_size&#39;</span> is not valid <span class="k">for</span> storage.
<span class="o">[</span>REQUEST<span class="o">]</span> 6cdebd11-aebb-4756-84c6-26347be152a0
</code></pre></div><h3 id="heading7">文件与目录权限修改</h3>
<ul>
<li>改变文件的拥有者 <code>chown</code></li>
<li>改变文件读、写、执行等权限 <code>chmod</code></li>
<li>递归子目录修改 <code>chown -R user dir/</code></li>
<li>增加脚本可执行权限 <code>chmod a+x myscript</code></li>
</ul>
<h3 id="heading8">给文件增加别名</h3>
<p>创建符号链接/硬链接</p>
<ul>
<li><code>ln cc ccAgain</code> 硬链接；删除源仍然能找到，cc 是源</li>
<li><code>ln -s cc ccTo</code> 软链接；符号链接(软链接) ,删除源另一个无法使用，cc 是源</li>
</ul>
<h3 id="heading9">管道和重定向</h3>
<ul>
<li>批处理命令连接执行，使用 <code>|</code></li>
<li>串联使用 <code>;</code></li>
<li>前面成功则执行后面一条，否则不执行 <code>&amp;&amp;</code></li>
<li>前面失败则后面执行 <code>||</code></li>
<li>清空文件 <code>:&gt; a.txt</code></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web5:~$ ls ./ <span class="o">&amp;&amp;</span> <span class="nb">echo</span>  suss! <span class="o">||</span> <span class="nb">echo</span> failed
mawar_deploy  mawar_deploy-v3.2.7-20181129.tar.gz  mawar-linux-amd64  <span class="nb">test</span>
suss!

tangzixiang@dev-lyy-web5:~$ <span class="k">if</span> <span class="nb">true</span> <span class="p">;</span><span class="k">then</span> <span class="nb">echo</span> success<span class="p">;</span><span class="k">else</span> <span class="nb">echo</span> failed<span class="p">;</span><span class="k">fi</span>
success
tangzixiang@dev-lyy-web5:~$ <span class="k">if</span> <span class="nb">false</span> <span class="p">;</span><span class="k">then</span> <span class="nb">echo</span> success<span class="p">;</span><span class="k">else</span> <span class="nb">echo</span> failed<span class="p">;</span><span class="k">fi</span>
failed
</code></pre></div><h3 id="bash--">Bash 快捷键 输入或删除</h3>
<ul>
<li><code>CTRL-U</code> 删除全行</li>
<li><code>CTRL-W</code> 删除当前光标到前面一个空格的内容</li>
<li><code>CTRL-H</code> 删除光标前面的字符</li>
<li><code>CTRL-R</code> 刷屏(iterm2)</li>
</ul>
<h3 id="heading10">综合应用</h3>
<pre><code>tangzixiang@dev-lyy-web4:~$ cat -b /var/www/mawar.yaml |egrep app_id
    34	    app_id: &quot;devt&quot;
   103	  app_id: &quot;mawa&quot;
   
tangzixiang@dev-lyy-web4:~$ cat -b /var/www/mawar.yaml |egrep app_id | egrep -v devt
   103	  app_id: &quot;mawa&quot;
   
tangzixiang@dev-lyy-web4:~$ cat -b /var/www/mawar.yaml |egrep app_id | egrep -v devt |wc -l
1
</code></pre><h2 id="heading11">文本处理</h2>
<h3 id="heading12">基础查找</h3>
<ol>
<li>查找 text 文件和 md 文件</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -name <span class="s2">&#34;*.md&#34;</span> -o -name <span class="s2">&#34;*.txt&#34;</span>
./mawar_deploy/README.md
./mawar_deploy/._README.md
./a.txt
</code></pre></div><ol start="2">
<li>正则方式查找</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -regex <span class="s2">&#34;</span><span class="s2">.*\(\.txt\|\.md\)</span>$<span class="s2">&#34;</span>
./a.txt
./mawar_deploy/README.md
./mawar_deploy/._README.md
</code></pre></div><ol start="3">
<li>取反，否定参数 <code>!</code></li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . ! -regex <span class="s2">&#34;</span><span class="s2">.*\(\.txt\|\.md\)</span>$<span class="s2">&#34;</span>
.
./.lesshst
./.bashrc
./.cache
</code></pre></div><ol start="4">
<li>指定深度，查找指定类型为文件的</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -maxdepth <span class="m">1</span> -type f
./.lesshst
./.bashrc
./a.txt
</code></pre></div><h3 id="heading13">定制搜索</h3>
<ul>
<li>
<p><code>d</code> 代表目录 <code>f</code> 代表文件 <code>l</code> 代码链接</p>
</li>
<li>
<p><code>find</code> 支持的文件类型检索可以区分普通文件或是符号链接文件，目录等，但无法区分是二进制文件还是普通文本文件。</p>
</li>
</ul>
<ol>
<li>查找指定类型</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -type d
.
./.cache
./mawar_deploy
./mawar_deploy/bin
</code></pre></div><ol start="2">
<li><code>file</code> 命令可以检查文件的具体类型 二静止或则文本文件等</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ file .profile
.profile: ASCII text

tangzixiang@dev-lyy-web4:~$ file mawar-linux-amd64
mawar-linux-amd64: ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
</code></pre></div><ol start="3">
<li>查询空文件</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -empty
./.cache/motd.legal-displayed
./a.txt
</code></pre></div><h4 id="heading14">按时间搜索</h4>
<ul>
<li>atime 访问时间单位是天</li>
<li>amin 访问时间单位是分钟</li>
<li>mtime 修改时间(内容被修改)</li>
<li>ctime 变化时间(元数据或权限变化)</li>
</ul>
<ol>
<li>最近 7 天内被访问过的文件</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find -atime -7 -type f
./.lesshst
./.bashrc
./.cache/motd.legal-displayed
./a.txt
</code></pre></div><ol start="2">
<li>最近第 7 天被访问过的文件</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find -atime -7 -type f
</code></pre></div><ol start="3">
<li>查询 7天前被访问过的文件</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find -atime +7 -type f
./.viminfo
</code></pre></div><h4 id="heading15">按大小搜索</h4>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"> -size n<span class="o">[</span>cwbkMG<span class="o">]</span>
     File uses n units of space, rounding up.  The following suffixes can be used:
    <span class="sb">`</span>b<span class="s1">&#39;    for 512-byte blocks (this is the default if no suffix is used)
</span><span class="s1">    `c&#39;</span>    <span class="k">for</span> bytes
    <span class="sb">`</span>w<span class="s1">&#39;    for two-byte words
</span><span class="s1">    `k&#39;</span>    <span class="k">for</span> Kilobytes <span class="o">(</span>units of <span class="m">1024</span> bytes<span class="o">)</span>
    <span class="sb">`</span>M<span class="s1">&#39;    for Megabytes (units of 1048576 bytes)
</span><span class="s1">    `G&#39;</span>    <span class="k">for</span> Gigabytes <span class="o">(</span>units of <span class="m">1073741824</span> bytes<span class="o">)</span>
</code></pre></div><ol>
<li>寻找大于 18M 的文件</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -type f -size +18M
./mawar-linux-amd64
</code></pre></div><h4 id="heading16">按权限查找</h4>
<ol>
<li>查找具有可执行权限的文件</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -perm <span class="m">644</span>
./.bashrc
./mawar_deploy-v3.2.7-20181129.tar.gz
</code></pre></div><h4 id="heading17">按用户查找</h4>
<ol>
<li>查找用户 x 所拥有的文件</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -type f -user tangzixiang
./.lesshst
./.bashrc
</code></pre></div><h3 id="heading18">查找完成后续动作</h3>
<ol>
<li>删除当前目录下的所有 swp 文件</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -type f -name <span class="s2">&#34;*.swp&#34;</span> -delete
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -type f -name <span class="s2">&#34;*.swp&#34;</span> <span class="p">|</span> xargs rm
</code></pre></div><ol start="2">
<li>变更所有权为 weber</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -type f -user root -exec chown weber <span class="o">{</span><span class="o">}</span> <span class="se">\;</span>
</code></pre></div><ul>
<li><code>{}</code> 是一个特殊字符串，对于每一个匹配的文件，<code>{}</code> 会被替换成相应的文件名</li>
</ul>
<ol start="3">
<li>将找到的文件拷贝到另一个目录</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -type f -mtime +10 -name <span class="s2">&#34;*.txt&#34;</span> -exec cp <span class="o">{</span><span class="o">}</span> newdir <span class="se">\;</span>
</code></pre></div><ol start="4">
<li>结合多个命令</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ find . -type f -exec ./commands.sh <span class="o">{</span><span class="o">}</span> <span class="se">\;</span>
</code></pre></div><ul>
<li>如果需要后续执行多个命令，可以将多个命令写成一个脚本，然后 <code>-exec</code> 调用时执行脚本即可</li>
</ul>
<h3 id="grep-">grep 文本搜索</h3>
<p><code>grep match_patten file</code> 默认访问匹配行</p>
<p>常用参数</p>
<ul>
<li>
<p><code>-o</code> 只输出匹配的文本行，<code>-v</code> 只输出没有匹配的文本行</p>
</li>
<li>
<p><code>-c</code> 统计文件中包含文本的次数</p>
</li>
<li>
<p><code>-n</code> 搜索并打印行号</p>
</li>
<li>
<p><code>-i</code> 搜索时忽略大小写</p>
</li>
<li>
<p><code>-l</code> 只打印搜索到的文件名，适用于目录搜索 <code>-R</code> 时使用</p>
</li>
</ul>
<ol>
<li>在多级目录中对文本进行搜索</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ sudo grep pack  -R -n .
./mawar_deploy/Makefile:55:pack
</code></pre></div><ol start="2">
<li>符合多条件之一</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ grep -e <span class="s2">&#34;pack&#34;</span> -e <span class="s2">&#34;PHONY&#34;</span> -R ./
./mawar_deploy/Makefile:pack:
./mawar_deploy/Makefile:.PHONY: pack
</code></pre></div><ol start="3">
<li>将 <code>sql</code> 中的 <code>where</code> 查询出来</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang@dev-lyy-web4:~$ cat xxx.Log <span class="p">|</span> tr a-z A-Z <span class="p">|</span>grep <span class="s2">&#34;FROM&#34;</span> <span class="p">|</span> grep <span class="s2">&#34;WHERE&#34;</span>
</code></pre></div><h3 id="awk">awk</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>[Lua] Lua 模块与包</title>
			<link>https://tangzixiang.github.io/posts/2019/lua-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</link>
			<pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/lua-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</guid>
			<description>摘要  模块的概念 如何实现一个模块 如何引用一个模块 模块加载路径 package.path 环境变量 LUA_PATH 的设置 跨目录下的模块引用 缓存机制 执行环境 参考  Lua 中模块的概念  模块类似于一个封装库，从 Lua 5.1 开始，Lua 加入了标准的模块管理机制，可以把一些公用的代码放在一个文件里，以 API 接口的形式在其他地方调用，有利于代码的重用和降低代码耦合度。 Lua 的模块是由变量、函数等已知元素组成的 table，因此创建一个模块很简单，就是创建一个 table，然后把需要导出的常量、函数放入其中，最后返回这个 table 就行。  如何实现一个模块 -- 初始化一个对象 local Account = {balance = 0} -- 对外开放 withdraw 函数 function Account.withDraw(v) Account.balance = Account.balance - v end -- 不对外开放  function getBalance() return Account.balance end return Account 新建 Account.lua 文件，如上示例实现了一个名为 Account 的模块，通过 return 关键字实现内容的导出,其中外部可访问的内容为 Account.</description>
			<content type="html"><![CDATA[<h2 id="heading">摘要</h2>
<ol>
<li>模块的概念</li>
<li>如何实现一个模块</li>
<li>如何引用一个模块</li>
<li>模块加载路径 <code>package.path</code></li>
<li>环境变量 <code>LUA_PATH</code> 的设置</li>
<li>跨目录下的模块引用</li>
<li>缓存机制</li>
<li>执行环境</li>
<li>参考</li>
</ol>
<h2 id="lua-">Lua 中模块的概念</h2>
<ul>
<li>模块类似于一个封装库，从 Lua 5.1 开始，Lua 加入了标准的模块管理机制，可以把一些公用的代码放在一个文件里，以 API 接口的形式在其他地方调用，有利于代码的重用和降低代码耦合度。</li>
<li>Lua 的模块是由变量、函数等已知元素组成的 table，因此创建一个模块很简单，就是创建一个 table，然后把需要导出的常量、函数放入其中，最后返回这个 table 就行。</li>
</ul>
<h2 id="heading1">如何实现一个模块</h2>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="c1">-- 初始化一个对象</span>
<span class="kd">local</span> <span class="n">Account</span> <span class="o">=</span> <span class="p">{</span><span class="n">balance</span> <span class="o">=</span> <span class="mi">0</span><span class="p">}</span>

<span class="c1">-- 对外开放 withdraw 函数</span>
<span class="kr">function</span> <span class="nc">Account</span><span class="p">.</span><span class="nf">withDraw</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
  <span class="n">Account.balance</span> <span class="o">=</span> <span class="n">Account.balance</span> <span class="o">-</span> <span class="n">v</span>
<span class="kr">end</span>

<span class="c1">-- 不对外开放 </span>
<span class="kr">function</span> <span class="nf">getBalance</span><span class="p">(</span><span class="p">)</span>
  <span class="kr">return</span> <span class="n">Account.balance</span>
<span class="kr">end</span>

<span class="kr">return</span> <span class="n">Account</span>
</code></pre></div><p>新建 <code>Account.lua</code> 文件，如上示例实现了一个名为 <code>Account</code> 的模块，通过 <code>return</code> 关键字实现内容的导出,其中外部可访问的内容为 <code>Account.blance</code> 字段以及 <code>Account.withDraw</code> 函数。</p>
<h2 id="heading2">如何引用一个模块</h2>
<p>在 lua 中通过全局函数 <code>require</code> 来实现对其他模块的引用。</p>
<p>使用方式:</p>
<ul>
<li><code>require(&quot;&lt;模块名&gt;&quot;)</code></li>
<li><code>require &quot;&lt;模块名&gt;&quot;</code></li>
</ul>
<p>示例:</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="cp">#!/usr/local/bin/lua</span>

<span class="c1">-- 加载 Account.lua 文件</span>
<span class="kd">local</span> <span class="n">Account</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">Account</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">print</span><span class="p">(</span><span class="n">Account</span><span class="p">)</span>

<span class="c1">-- [[ 遍历内容 ]]</span>
<span class="kr">function</span> <span class="nf">printTable</span><span class="p">(</span><span class="n">_tab</span><span class="p">)</span>
  <span class="kr">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="kr">in</span> <span class="n">pairs</span><span class="p">(</span><span class="n">_tab</span><span class="p">)</span> <span class="kr">do</span>
    <span class="n">print</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
  <span class="kr">end</span>
<span class="kr">end</span>

<span class="n">printTable</span><span class="p">(</span><span class="n">Account</span><span class="p">)</span>
</code></pre></div><p>执行结果如下:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang$ ./Account_test.lua
table: 0x7ffc6b406a20
balance	<span class="m">0</span>
withDraw	<span class="k">function</span>: 0x7ffc6b407190
</code></pre></div><p>从执行结果可以看出导入的模块实际便是一个 table 的实现。导入的 <code>Account</code> 模块包含 <code>balance</code> 字段以及 <code>withDraw</code> 方法。</p>
<p>网上很多教程都只是讲到这里，实际上忽略了一个很重要的问题便是不同路径下的模块的引用。</p>
<h2 id="-packagepath">模块加载路径 <code>package.path</code></h2>
<p>在 Lua 中你无法像其他语言那样直接通过相对路径或绝对路径来引用模块，Lua 的模块引用与其加载机制有关，具体加载路径可以通过全局对象 <code>package </code> 对象的<code>package.path</code> 字段获取默认的加载路径:</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="cp">#!/usr/local/bin/lua</span>

<span class="n">print</span><span class="p">(</span><span class="n">package.path</span><span class="p">)</span>
</code></pre></div><p>执行结果:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang$ ./package_path.lua
/usr/local/share/lua/5.3/?.lua<span class="p">;</span>/usr/local/share/lua/5.3/?/init.lua<span class="p">;</span>/usr/local/lib/lua/5.3/?.lua<span class="p">;</span>/usr/local/lib/lua/5.3/?/init.lua<span class="p">;</span>./?.lua<span class="p">;</span>./?/init.lua
</code></pre></div><p>上述示例的 <code>?</code> 号即代表我们在 <code>require</code> 函数中的模块名，如前面的示例 <code>Account</code>。</p>
<p>示例引用一个不存在的模块:</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="cp">#!/usr/local/bin/lua</span>

<span class="n">require</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">XXX</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><p>执行结果:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang$ ./package_path.lua
/usr/local/bin/lua: ./package_path.lua:3: module <span class="s1">&#39;XXX&#39;</span> not found:
	no field package.preload<span class="o">[</span><span class="s1">&#39;XXX&#39;</span><span class="o">]</span>
	no file <span class="s1">&#39;/usr/local/share/lua/5.3/XXX.lua&#39;</span>
	no file <span class="s1">&#39;/usr/local/share/lua/5.3/XXX/init.lua&#39;</span>
	no file <span class="s1">&#39;/usr/local/lib/lua/5.3/XXX.lua&#39;</span>
	no file <span class="s1">&#39;/usr/local/lib/lua/5.3/XXX/init.lua&#39;</span>
	no file <span class="s1">&#39;./XXX.lua&#39;</span>
	no file <span class="s1">&#39;./XXX/init.lua&#39;</span>
	no file <span class="s1">&#39;/usr/local/lib/lua/5.3/XXX.so&#39;</span>
	no file <span class="s1">&#39;/usr/local/lib/lua/5.3/loadall.so&#39;</span>
	no file <span class="s1">&#39;./XXX.so&#39;</span>
stack traceback:
	<span class="o">[</span>C<span class="o">]</span>: in <span class="k">function</span> <span class="s1">&#39;require&#39;</span>
	./package_path.lua:5: in main chunk
	<span class="o">[</span>C<span class="o">]</span>: in ?
</code></pre></div><p>我们通过 <code>require</code> 的实际加载情况发现其对 <code>XXX</code> 的查找路径与前面输出的 <code>package.path</code> 一致。最后如果找不到则去找 so 文件( C 程序库)。</p>
<p><code>require</code> 用于搜索 Lua 文件的路径是存放在全局变量 <code>package.path</code> 中，当 Lua 启动后，会以环境变量 <code>LUA_PATH</code> 的值来初始这个环境变量。如果没有找到该环境变量，则使用一个编译时定义的默认路径来初始化，我们前面看到的便是默认路径。</p>
<p>到这里我们可以就知道了为什么前面我们可以成功通过 <code>require(&quot;Account&quot;)</code> 加载 <code>Account.lua</code> ,因为默认的 <code>package.path</code> 中包含了 <code>./?.lua;</code> ，表示会在当前同目录下寻找指定模块。</p>
<h2 id="-luapath-">环境变量 <code>LUA_PATH</code> 的设置</h2>
<p>如果没有 <code>LUA_PATH</code> 这个环境变量，也可以自定义设置。</p>
<p>假设我们现在有个项目库叫 <code>lua</code> ，放在了根目录下，为了平时可以更方便的引用，我们可以更新 <code>LUA_PATH</code> 让其包含该项目。 在当前用户根目录下打开 <code>.profile</code> 文件，并追加:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">#LUA_PATH</span>
<span class="nb">export</span> <span class="nv">LUA_PATH</span><span class="o">=</span><span class="s2">&#34;~/lua/?.lua;;&#34;</span>
</code></pre></div><p>文件路径以 &ldquo;;&rdquo; 号分隔，最后的 2 个 &ldquo;;;&rdquo; 表示新加的路径后面加上原来的默认路径。</p>
<p>接着，更新环境变量参数，使之立即生效。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">source</span> ~/.profile
</code></pre></div><p>我们这时再来看下 <code>package.path</code> 的输出:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang$ ./package_path.lua
~/lua/?.lua<span class="p">;</span>/usr/local/share/lua/5.3/?.lua<span class="p">;</span>/usr/local/share/lua/5.3/?/init.lua<span class="p">;</span>/usr/local/lib/lua/5.3/?.lua<span class="p">;</span>/usr/local/lib/lua/5.3/?/init.lua<span class="p">;</span>./?.lua<span class="p">;</span>./?/init.lua<span class="p">;</span>
</code></pre></div><p>可以看到此时的 <code>package.path</code> 已经包含了我们需要的库路径。</p>
<p>注：如果  <code>.profile</code>  不生效，则可以在尝试 <code>.bash_profile</code> 或则 <code>.bashrc</code> 文件重复上述操作。</p>
<h2 id="heading3">跨目录下的模块引用</h2>
<p>通常我们在实际开发是都会在工作目录下通过不同的目录来对功能模块进行划分，这时便需要动态的更改加载路径。</p>
<p>假设有如下路径:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang$ tree
.
├── package_path.lua
├── model
│   ├── Account.lua
└── <span class="nb">test</span>
    └── Account_test.lua

<span class="m">2</span> directories, <span class="m">3</span> files
</code></pre></div><p>我们需要在 test 目录下执行 <code>Account_test.lua</code> 文件，其中依赖于 model 目录的 <code>Account.lua</code> 文件</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="cp">#!/usr/local/bin/lua</span>

<span class="n">print</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">test/Account_test.lua</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="c1">-- 加载 Account.lua 文件</span>
<span class="kd">local</span> <span class="n">Account</span> <span class="o">=</span> <span class="n">require</span> <span class="s2">&#34;</span><span class="s2">Account</span><span class="s2">&#34;</span>

<span class="n">print</span><span class="p">(</span><span class="n">Account</span><span class="p">)</span>

<span class="kr">function</span> <span class="nf">printTable</span><span class="p">(</span><span class="n">_tab</span><span class="p">)</span>
  <span class="kr">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="kr">in</span> <span class="n">pairs</span><span class="p">(</span><span class="n">_tab</span><span class="p">)</span> <span class="kr">do</span>
    <span class="n">print</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
  <span class="kr">end</span>
<span class="kr">end</span>

<span class="n">printTable</span><span class="p">(</span><span class="n">Account</span><span class="p">)</span>
</code></pre></div><p>执行结果:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang$ ./Account_test.lua
test/Account_test.lua

/usr/local/bin/lua: ./Account_test.lua:7: module <span class="s1">&#39;Account&#39;</span> not found:
	no field package.preload<span class="o">[</span><span class="s1">&#39;Account&#39;</span><span class="o">]</span>
	no file <span class="s1">&#39;~/lua/Account.lua&#39;</span>
	no file <span class="s1">&#39;/usr/local/share/lua/5.3/Account.lua&#39;</span>
	no file <span class="s1">&#39;/usr/local/share/lua/5.3/Account/init.lua&#39;</span>
	no file <span class="s1">&#39;/usr/local/lib/lua/5.3/Account.lua&#39;</span>
	no file <span class="s1">&#39;/usr/local/lib/lua/5.3/Account/init.lua&#39;</span>
	no file <span class="s1">&#39;./Account.lua&#39;</span>
	no file <span class="s1">&#39;./Account/init.lua&#39;</span>
	no file <span class="s1">&#39;/usr/local/lib/lua/5.3/Account.so&#39;</span>
	no file <span class="s1">&#39;/usr/local/lib/lua/5.3/loadall.so&#39;</span>
	no file <span class="s1">&#39;./Account.so&#39;</span>
stack traceback:
	<span class="o">[</span>C<span class="o">]</span>: in <span class="k">function</span> <span class="s1">&#39;require&#39;</span>
	./Account_test.lua:7: in main chunk
	<span class="o">[</span>C<span class="o">]</span>: in ?
</code></pre></div><p>不出意外的发现异常了，因为我们引用的 <code>Account</code> 不在任何已有的加载路径下。如果想要能够正确的动态引用我们需要的模块，则需要在实际引用前动态的更新 <code>package.path</code> :</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="cp">#!/usr/local/bin/lua</span>

<span class="n">print</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">test/Account_test.lua</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="c1">-- 更新 package.path</span>
<span class="n">package.path</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="s2">;../model/?.lua;</span><span class="s2">&#34;</span> <span class="o">..</span> <span class="n">package.path</span>

<span class="kd">local</span> <span class="n">Account</span> <span class="o">=</span> <span class="n">require</span> <span class="s2">&#34;</span><span class="s2">Account</span><span class="s2">&#34;</span>

<span class="n">print</span><span class="p">(</span><span class="n">Account</span><span class="p">)</span>

<span class="kr">function</span> <span class="nf">printTable</span><span class="p">(</span><span class="n">_tab</span><span class="p">)</span>
  <span class="kr">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="kr">in</span> <span class="n">pairs</span><span class="p">(</span><span class="n">_tab</span><span class="p">)</span> <span class="kr">do</span>
    <span class="n">print</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
  <span class="kr">end</span>
<span class="kr">end</span>

<span class="n">printTable</span><span class="p">(</span><span class="n">Account</span><span class="p">)</span>
</code></pre></div><p>执行结果：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang$ ./Account_test.lua
test/Account_test.lua

table: 0x7f93f9d00830
balance	<span class="m">0</span>
withDraw	<span class="k">function</span>: 0x7f93f9d00150
</code></pre></div><p>效果完美。</p>
<p>注意：由于 <code>package.path</code> 是全局的故一旦更新则会在当前项目内生效。</p>
<h2 id="heading4">缓存机制</h2>
<p>Lua 也类似其他大部分语言的模块导入机制，存在缓存机制，模块一旦导入有且只在第一次导入时执行一次模块内容。</p>
<p>A.lua</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="n">Account</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">Account</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">print</span><span class="p">(</span><span class="n">Account</span><span class="p">)</span>
</code></pre></div><p>B.lua:</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="cp">#!/usr/local/bin/lua</span>

<span class="n">package.path</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="s2">;./model/?.lua;</span><span class="s2">&#34;</span> <span class="o">..</span> <span class="n">package.path</span>

<span class="n">require</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">A</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="kd">local</span> <span class="n">Account</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">Account</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">print</span><span class="p">(</span><span class="n">Account</span><span class="p">)</span>
</code></pre></div><p>执行结果:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang$ ./B.lua
table: 0x7fabd8600880
table: 0x7fabd8600880
</code></pre></div><p>可以看出 <code>Account</code> 对象只实例化了一次。</p>
<h2 id="heading5">执行环境</h2>
<p><img src="/assets/QQ20180624-113702@2x.jpg" alt=""></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tangzixiang:~ tangzixiang$ lua -v
Lua 5.3.4  Copyright <span class="o">(</span>C<span class="o">)</span> 1994-2017 Lua.org, PUC-Rio
</code></pre></div><h2 id="heading6">参考</h2>
<ol>
<li><a href="http://www.runoob.com/lua/lua-modules-packages.html">http://www.runoob.com/lua/lua-modules-packages.html</a></li>
<li>【Nginx Lua 开发实战】</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>[Go] 多条件排序设计</title>
			<link>https://tangzixiang.github.io/posts/2019/%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%8E%92%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
			<pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%8E%92%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
			<description>在 go 源码中看到一个设计模式，如何设计对列表数据进行多条件排序
代码位置： go/src/sort/example_multi_test.go
// Copyright 2013 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file.  package sort_test import ( &amp;#34;fmt&amp;#34; &amp;#34;sort&amp;#34; ) // A Change is a record of source code changes, recording user, language, and delta size. type Change struct { user string language string lines int } type lessFunc func(p1, p2 *Change) bool // multiSorter implements the Sort interface, sorting the changes within.</description>
			<content type="html"><![CDATA[<p>在 go 源码中看到一个设计模式，如何设计对列表数据进行多条件排序</p>
<p>代码位置： <a href="https://github.com/golang/go/blob/master/src/sort/example_multi_test.go"><code>go/src/sort/example_multi_test.go</code></a></p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Copyright 2013 The Go Authors. All rights reserved.
</span><span class="c1"></span><span class="c1">// Use of this source code is governed by a BSD-style
</span><span class="c1"></span><span class="c1">// license that can be found in the LICENSE file.
</span><span class="c1"></span>
<span class="kn">package</span> <span class="nx">sort_test</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;sort&#34;</span>
<span class="p">)</span>

<span class="c1">// A Change is a record of source code changes, recording user, language, and delta size.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Change</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">user</span>     <span class="kt">string</span>
	<span class="nx">language</span> <span class="kt">string</span>
	<span class="nx">lines</span>    <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">lessFunc</span> <span class="kd">func</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span> <span class="o">*</span><span class="nx">Change</span><span class="p">)</span> <span class="kt">bool</span>

<span class="c1">// multiSorter implements the Sort interface, sorting the changes within.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">multiSorter</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">changes</span> <span class="p">[</span><span class="p">]</span><span class="nx">Change</span>
	<span class="nx">less</span>    <span class="p">[</span><span class="p">]</span><span class="nx">lessFunc</span>
<span class="p">}</span>

<span class="c1">// Sort sorts the argument slice according to the less functions passed to OrderedBy.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ms</span> <span class="o">*</span><span class="nx">multiSorter</span><span class="p">)</span> <span class="nf">Sort</span><span class="p">(</span><span class="nx">changes</span> <span class="p">[</span><span class="p">]</span><span class="nx">Change</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">ms</span><span class="p">.</span><span class="nx">changes</span> <span class="p">=</span> <span class="nx">changes</span>
	<span class="nx">sort</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// OrderedBy returns a Sorter that sorts using the less functions, in order.
</span><span class="c1"></span><span class="c1">// Call its Sort method to sort the data.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">OrderedBy</span><span class="p">(</span><span class="nx">less</span> <span class="o">...</span><span class="nx">lessFunc</span><span class="p">)</span> <span class="o">*</span><span class="nx">multiSorter</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">multiSorter</span><span class="p">{</span>
		<span class="nx">less</span><span class="p">:</span> <span class="nx">less</span><span class="p">,</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Len is part of sort.Interface.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ms</span> <span class="o">*</span><span class="nx">multiSorter</span><span class="p">)</span> <span class="nf">Len</span><span class="p">(</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ms</span><span class="p">.</span><span class="nx">changes</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Swap is part of sort.Interface.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ms</span> <span class="o">*</span><span class="nx">multiSorter</span><span class="p">)</span> <span class="nf">Swap</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">ms</span><span class="p">.</span><span class="nx">changes</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span> <span class="nx">ms</span><span class="p">.</span><span class="nx">changes</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">ms</span><span class="p">.</span><span class="nx">changes</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="p">,</span> <span class="nx">ms</span><span class="p">.</span><span class="nx">changes</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
<span class="p">}</span>

<span class="c1">// Less is part of sort.Interface. It is implemented by looping along the
</span><span class="c1"></span><span class="c1">// less functions until it finds a comparison that discriminates between
</span><span class="c1"></span><span class="c1">// the two items (one is less than the other). Note that it can call the
</span><span class="c1"></span><span class="c1">// less functions twice per call. We could change the functions to return
</span><span class="c1"></span><span class="c1">// -1, 0, 1 and reduce the number of calls for greater efficiency: an
</span><span class="c1"></span><span class="c1">// exercise for the reader.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ms</span> <span class="o">*</span><span class="nx">multiSorter</span><span class="p">)</span> <span class="nf">Less</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">,</span> <span class="nx">q</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">ms</span><span class="p">.</span><span class="nx">changes</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">ms</span><span class="p">.</span><span class="nx">changes</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
	<span class="c1">// Try all but the last comparison.
</span><span class="c1"></span>	<span class="kd">var</span> <span class="nx">k</span> <span class="kt">int</span>
	<span class="k">for</span> <span class="nx">k</span> <span class="p">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">k</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ms</span><span class="p">.</span><span class="nx">less</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">less</span> <span class="o">:=</span> <span class="nx">ms</span><span class="p">.</span><span class="nx">less</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span>
		<span class="k">switch</span> <span class="p">{</span>
		<span class="k">case</span> <span class="nf">less</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">q</span><span class="p">)</span><span class="p">:</span>
			<span class="c1">// p &lt; q, so we have a decision.
</span><span class="c1"></span>			<span class="k">return</span> <span class="kc">true</span>
		<span class="k">case</span> <span class="nf">less</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span><span class="p">:</span>
			<span class="c1">// p &gt; q, so we have a decision.
</span><span class="c1"></span>			<span class="k">return</span> <span class="kc">false</span>
		<span class="p">}</span>
		<span class="c1">// p == q; try the next comparison.
</span><span class="c1"></span>	<span class="p">}</span>
	<span class="c1">// All comparisons to here said &#34;equal&#34;, so just return whatever
</span><span class="c1"></span>	<span class="c1">// the final comparison reports.
</span><span class="c1"></span>	<span class="k">return</span> <span class="nx">ms</span><span class="p">.</span><span class="nx">less</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">q</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">changes</span> <span class="p">=</span> <span class="p">[</span><span class="p">]</span><span class="nx">Change</span><span class="p">{</span>
	<span class="p">{</span><span class="s">&#34;gri&#34;</span><span class="p">,</span> <span class="s">&#34;Go&#34;</span><span class="p">,</span> <span class="mi">100</span><span class="p">}</span><span class="p">,</span>
	<span class="p">{</span><span class="s">&#34;ken&#34;</span><span class="p">,</span> <span class="s">&#34;C&#34;</span><span class="p">,</span> <span class="mi">150</span><span class="p">}</span><span class="p">,</span>
	<span class="p">{</span><span class="s">&#34;glenda&#34;</span><span class="p">,</span> <span class="s">&#34;Go&#34;</span><span class="p">,</span> <span class="mi">200</span><span class="p">}</span><span class="p">,</span>
	<span class="p">{</span><span class="s">&#34;rsc&#34;</span><span class="p">,</span> <span class="s">&#34;Go&#34;</span><span class="p">,</span> <span class="mi">200</span><span class="p">}</span><span class="p">,</span>
	<span class="p">{</span><span class="s">&#34;r&#34;</span><span class="p">,</span> <span class="s">&#34;Go&#34;</span><span class="p">,</span> <span class="mi">100</span><span class="p">}</span><span class="p">,</span>
	<span class="p">{</span><span class="s">&#34;ken&#34;</span><span class="p">,</span> <span class="s">&#34;Go&#34;</span><span class="p">,</span> <span class="mi">200</span><span class="p">}</span><span class="p">,</span>
	<span class="p">{</span><span class="s">&#34;dmr&#34;</span><span class="p">,</span> <span class="s">&#34;C&#34;</span><span class="p">,</span> <span class="mi">100</span><span class="p">}</span><span class="p">,</span>
	<span class="p">{</span><span class="s">&#34;r&#34;</span><span class="p">,</span> <span class="s">&#34;C&#34;</span><span class="p">,</span> <span class="mi">150</span><span class="p">}</span><span class="p">,</span>
	<span class="p">{</span><span class="s">&#34;gri&#34;</span><span class="p">,</span> <span class="s">&#34;Smalltalk&#34;</span><span class="p">,</span> <span class="mi">80</span><span class="p">}</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// ExampleMultiKeys demonstrates a technique for sorting a struct type using different
</span><span class="c1"></span><span class="c1">// sets of multiple fields in the comparison. We chain together &#34;Less&#34; functions, each of
</span><span class="c1"></span><span class="c1">// which compares a single field.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Example_sortMultiKeys</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// Closures that order the Change structure.
</span><span class="c1"></span>	<span class="nx">user</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c1</span><span class="p">,</span> <span class="nx">c2</span> <span class="o">*</span><span class="nx">Change</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">c1</span><span class="p">.</span><span class="nx">user</span> <span class="p">&lt;</span> <span class="nx">c2</span><span class="p">.</span><span class="nx">user</span>
	<span class="p">}</span>
	<span class="nx">language</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c1</span><span class="p">,</span> <span class="nx">c2</span> <span class="o">*</span><span class="nx">Change</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">c1</span><span class="p">.</span><span class="nx">language</span> <span class="p">&lt;</span> <span class="nx">c2</span><span class="p">.</span><span class="nx">language</span>
	<span class="p">}</span>
	<span class="nx">increasingLines</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c1</span><span class="p">,</span> <span class="nx">c2</span> <span class="o">*</span><span class="nx">Change</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">c1</span><span class="p">.</span><span class="nx">lines</span> <span class="p">&lt;</span> <span class="nx">c2</span><span class="p">.</span><span class="nx">lines</span>
	<span class="p">}</span>
	<span class="nx">decreasingLines</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c1</span><span class="p">,</span> <span class="nx">c2</span> <span class="o">*</span><span class="nx">Change</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">c1</span><span class="p">.</span><span class="nx">lines</span> <span class="p">&gt;</span> <span class="nx">c2</span><span class="p">.</span><span class="nx">lines</span> <span class="c1">// Note: &gt; orders downwards.
</span><span class="c1"></span>	<span class="p">}</span>

	<span class="c1">// Simple use: Sort by user.
</span><span class="c1"></span>	<span class="nf">OrderedBy</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nx">changes</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;By user:&#34;</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span>

	<span class="c1">// More examples.
</span><span class="c1"></span>	<span class="nf">OrderedBy</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">increasingLines</span><span class="p">)</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nx">changes</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;By user,&lt;lines:&#34;</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span>

	<span class="nf">OrderedBy</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">decreasingLines</span><span class="p">)</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nx">changes</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;By user,&gt;lines:&#34;</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span>

	<span class="nf">OrderedBy</span><span class="p">(</span><span class="nx">language</span><span class="p">,</span> <span class="nx">increasingLines</span><span class="p">)</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nx">changes</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;By language,&lt;lines:&#34;</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span>

	<span class="nf">OrderedBy</span><span class="p">(</span><span class="nx">language</span><span class="p">,</span> <span class="nx">increasingLines</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nx">changes</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;By language,&lt;lines,user:&#34;</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span>

	<span class="c1">// Output:
</span><span class="c1"></span>	<span class="c1">// By user: [{dmr C 100} {glenda Go 200} {gri Go 100} {gri Smalltalk 80} {ken C 150} {ken Go 200} {r Go 100} {r C 150} {rsc Go 200}]
</span><span class="c1"></span>	<span class="c1">// By user,&lt;lines: [{dmr C 100} {glenda Go 200} {gri Smalltalk 80} {gri Go 100} {ken C 150} {ken Go 200} {r Go 100} {r C 150} {rsc Go 200}]
</span><span class="c1"></span>	<span class="c1">// By user,&gt;lines: [{dmr C 100} {glenda Go 200} {gri Go 100} {gri Smalltalk 80} {ken Go 200} {ken C 150} {r C 150} {r Go 100} {rsc Go 200}]
</span><span class="c1"></span>	<span class="c1">// By language,&lt;lines: [{dmr C 100} {ken C 150} {r C 150} {r Go 100} {gri Go 100} {ken Go 200} {glenda Go 200} {rsc Go 200} {gri Smalltalk 80}]
</span><span class="c1"></span>	<span class="c1">// By language,&lt;lines,user: [{dmr C 100} {ken C 150} {r C 150} {gri Go 100} {r Go 100} {glenda Go 200} {ken Go 200} {rsc Go 200} {gri Smalltalk 80}]
</span><span class="c1"></span>
<span class="p">}</span>

</code></pre></div><ol>
<li>重点需要关注的是 <code>multiSorter</code> 的设计</li>
<li>在这个 <code>multiSorter</code> 对象中包含多个排序规则，每一项数据需要判断是否执行多个排序规则函数</li>
<li>每个注册的排序规则判断函数 less 返回 bool 值，确认前一项是否比后一项小</li>
<li>每个注册的排序规则判断函数 less 可以执行两次，因为前一项不比后一项小的话还有两种可能，要不就是前一项比后一项大，要不就是一样大</li>
<li>若当前执行的排序规则判断函数 less 能够判断出大小,则无需执行下一个判断函数，当且仅当前一项和后一项的数据一致，才需要依赖下一个判断函数做判断，这里判断两项数据一致的依据是，在 switch 中两个 case 都执行了但没有命中返回。</li>
<li>在多个排序规则判断函数中，最后一项无需重复之前的 switch 判断规则因为 ⬇</li>
<li>在正常的排序 <code>sort</code> 接口的<code>Less</code> 函数中也是只需返回 bool 判断前一项是否比后一项小</li>
<li>所以在多个排序规则判断函数中，最后一项保留一致逻辑，如果保留在 switch 中也不是不可以，但是得考虑最后有可能前一项数据与后一项数据完全一致的情况。</li>
<li>若数据是一致的情况下，返回的是 true 还是 false 已经无所谓了。</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>The wire data（wire 数据）</title>
			<link>https://tangzixiang.github.io/posts/2019/the-wire-datawire-%E6%95%B0%E6%8D%AE/</link>
			<pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/the-wire-datawire-%E6%95%B0%E6%8D%AE/</guid>
			<description>本文为 wiki 上关于 wire data 的翻译，不保证准确性。
简介 wire data 是一种定义了客户端设备与服务器设备如何基于计算机和电信网络进行通信的信息。它是 wire protocol （一种传输协议）的全双工 data payload [1]解码后得到的内容。更确切的说，wire data 作为一种通信的信息存在于 OSI model 里除物理层之外的各个层级之中（没有包含物理层，是因为物理层的协议是用于建立连接而非通信）
注释引用  全双工 data payload：bi-directional data payload  </description>
			<content type="html"><![CDATA[<p>本文为 <a href="https://en.wikipedia.org/wiki/Wire_data">wiki</a> 上关于 <strong>wire data</strong> 的翻译，不保证准确性。</p>
<h2 id="heading">简介</h2>
<p><strong>wire data</strong> 是一种定义了客户端设备与服务器设备如何基于计算机和电信网络进行通信的信息。它是 <strong>wire protocol</strong> （一种传输协议）的全双工 data payload <!-- raw HTML omitted -->[1]<!-- raw HTML omitted --> 解码后得到的内容。更确切的说，<strong>wire data</strong> 作为一种通信的信息存在于  <a href="https://en.wikipedia.org/wiki/OSI_model">OSI model</a> 里除物理层之外的各个层级之中（没有包含物理层，是因为物理层的协议是用于建立连接而非通信）</p>
<h2 id="heading1">注释引用</h2>
<ol>
<li>全双工 data payload：bi-directional data payload</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>The wire protocol（wire 传输协议）</title>
			<link>https://tangzixiang.github.io/posts/2019/the-wire-protocolwire%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/</link>
			<pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/the-wire-protocolwire%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/</guid>
			<description>本文为 wiki 上关于 wire protocol 的翻译，不保证准确性。
简介 在计算机网络中，wire protocol 指的是一种端到端（点到点）的数据获取方式，是多个应用[1]之间进行交互的必需品。它通常指的是一种高于物理层的协议。相较于传输层的各种传输协议 （TCP、UDP），wire protocol 术语习惯于被用来描述信息位于应用层上的一种通用表现形式，是一种应用层上的通用协议而非各类应用程序的通用型对象描述语意[2]。就像是 XML[3]与 XSD[4]之间的关系，XML 对传输的数据进行描述，而 XSD 对 XML 本身的文档结构的元素及语法进行描述。
wire protocol 要么是一种文本格式协议要么是一种二进制格式协议。虽然决定采用那种格式，这是一种非常重要的架构设计，但是这并不是 wire protocol 与程序API之间的区别。
在电子信息技术领域中[5]，一种 wire protocol 描述其讲数据从一个地方传输到其他地方的机制。
功能性 [Functionality] wire protocol 提供应用与应用之间在互联网中进行交互的手段，通常指的是各种分布式对象协议[6]，其可能是一种使用专门设计用来协同工作的应用程序。顾名思义，这些分布式对象协议运行在互联网上一个或多个计算机的不同进程之间。
分类 [Types] wire protocol 提供了一种互联网上运行于不同操作系统之间的程序进行交流的手段，就算是不同的平台或开发语言。
以下是一些 wire prootocol :
 IIOP for CORBA RTPS for DDS Java Debug Wire Protocol (JDWP) for Java debugging JRMP for RMI SOAP for Web services AMQP for message-oriented middleware  注释引用  应用：即 application。 通用型对象描述语意：common object semantic XML：Extensible Markup Language XSD：XML Schema Definition 电子信息技术：Electronics 分布式对象协议：distributed object protocols  </description>
			<content type="html"><![CDATA[<p>本文为 <a href="https://en.wikipedia.org/wiki/Wire_protocol">wiki</a> 上关于 <strong>wire protocol</strong> 的翻译，不保证准确性。</p>
<h2 id="heading">简介</h2>
<p>在计算机网络中，<strong>wire protocol</strong> 指的是一种端到端（点到点）的数据获取方式，是多个应用<!-- raw HTML omitted -->[1]<!-- raw HTML omitted -->之间进行交互的必需品。它通常指的是一种高于物理层的协议。相较于传输层的各种传输协议 （TCP、UDP），<strong>wire protocol</strong> 术语习惯于被用来描述信息位于应用层上的一种通用表现形式，是一种应用层上的通用协议而非各类应用程序的通用型对象描述语意<!-- raw HTML omitted -->[2]<!-- raw HTML omitted -->。就像是 XML<!-- raw HTML omitted -->[3]<!-- raw HTML omitted --> 与 XSD<!-- raw HTML omitted -->[4]<!-- raw HTML omitted --> 之间的关系，XML 对传输的数据进行描述，而 XSD 对 XML 本身的文档结构的元素及语法进行描述。</p>
<p><strong>wire protocol</strong> 要么是一种文本格式协议要么是一种二进制格式协议。虽然决定采用那种格式，这是一种非常重要的架构设计，但是这并不是 wire protocol 与程序API之间的区别。</p>
<p>在电子信息技术领域中<!-- raw HTML omitted -->[5]<!-- raw HTML omitted -->，一种 wire protocol 描述其讲数据从一个地方传输到其他地方的机制。</p>
<h2 id="-functionality">功能性 [Functionality]</h2>
<p><strong>wire protocol</strong> 提供应用与应用之间在互联网中进行交互的手段，通常指的是各种分布式对象协议<!-- raw HTML omitted -->[6]<!-- raw HTML omitted -->，其可能是一种使用专门设计用来协同工作的应用程序。顾名思义，这些分布式对象协议运行在互联网上一个或多个计算机的不同进程之间。</p>
<h2 id="-types">分类 [Types]</h2>
<p><strong>wire protocol</strong> 提供了一种互联网上运行于不同操作系统之间的程序进行交流的手段，就算是不同的平台或开发语言。</p>
<p>以下是一些 wire prootocol :</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/IIOP">IIOP</a> for <a href="https://en.wikipedia.org/wiki/CORBA">CORBA</a></li>
<li><a href="https://en.wikipedia.org/wiki/Real-Time_Publish-Subscribe_(RTPS)_Protocol">RTPS</a> for <a href="https://en.wikipedia.org/wiki/Data_Distribution_Service">DDS</a></li>
<li>Java Debug Wire Protocol (<a href="https://en.wikipedia.org/wiki/JDWP">JDWP</a>) for Java debugging</li>
<li><a href="https://en.wikipedia.org/w/index.php?title=Java_Remote_Method_Protocol&amp;action=edit&amp;redlink=1">JRMP</a> for <a href="https://en.wikipedia.org/wiki/Java_remote_method_invocation">RMI</a></li>
<li><a href="https://en.wikipedia.org/wiki/SOAP">SOAP</a> for <a href="https://en.wikipedia.org/wiki/Web_services">Web services</a></li>
<li><a href="https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol">AMQP</a> for <a href="https://en.wikipedia.org/wiki/Message-oriented_middleware">message-oriented middleware</a></li>
</ul>
<h2 id="heading1">注释引用</h2>
<ol>
<li>应用：即 application。</li>
<li>通用型对象描述语意：common object semantic</li>
<li>XML：<a href="https://en.wikipedia.org/wiki/XML">Extensible Markup Language</a></li>
<li>XSD：<a href="https://en.wikipedia.org/wiki/XML_Schema_(W3C)">XML Schema Definition</a></li>
<li>电子信息技术：<a href="https://en.wikipedia.org/wiki/Electronics">Electronics</a></li>
<li>分布式对象协议：distributed object protocols</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>[Go] 利用可编程排序准则对结构类型进行排序</title>
			<link>https://tangzixiang.github.io/posts/2019/sorting-a-struct-type-using-programmable-sort-criteria-%E5%88%A9%E7%94%A8%E5%8F%AF%E7%BC%96%E7%A8%8B%E6%8E%92%E5%BA%8F%E5%87%86%E5%88%99%E5%AF%B9%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</link>
			<pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/sorting-a-struct-type-using-programmable-sort-criteria-%E5%88%A9%E7%94%A8%E5%8F%AF%E7%BC%96%E7%A8%8B%E6%8E%92%E5%BA%8F%E5%87%86%E5%88%99%E5%AF%B9%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</guid>
			<description>sorting a struct type using programmable sort criteria 利用可编程排序准则对结构类型进行排序
在 go 源码中看到一个设计模式
代码位置： go/src/sort/example_keys_test.go
// Copyright 2013 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file.  package sort_test import ( &amp;#34;fmt&amp;#34; &amp;#34;sort&amp;#34; ) // A couple of type definitions to make the units clear. type earthMass float64 type au float64 // A Planet defines the properties of a solar system object.</description>
			<content type="html"><![CDATA[<p>sorting a struct type using programmable sort criteria 利用可编程排序准则对结构类型进行排序</p>
<p>在 go 源码中看到一个设计模式</p>
<p>代码位置： <a href="https://github.com/golang/go/blob/master/src/sort/example_keys_test.go"><code>go/src/sort/example_keys_test.go</code></a></p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Copyright 2013 The Go Authors. All rights reserved.
</span><span class="c1"></span><span class="c1">// Use of this source code is governed by a BSD-style
</span><span class="c1"></span><span class="c1">// license that can be found in the LICENSE file.
</span><span class="c1"></span>
<span class="kn">package</span> <span class="nx">sort_test</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;sort&#34;</span>
<span class="p">)</span>

<span class="c1">// A couple of type definitions to make the units clear.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">earthMass</span> <span class="kt">float64</span>
<span class="kd">type</span> <span class="nx">au</span> <span class="kt">float64</span>

<span class="c1">// A Planet defines the properties of a solar system object.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Planet</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">name</span>     <span class="kt">string</span>
	<span class="nx">mass</span>     <span class="nx">earthMass</span>
	<span class="nx">distance</span> <span class="nx">au</span>
<span class="p">}</span>

<span class="c1">// By is the type of a &#34;less&#34; function that defines the ordering of its Planet arguments.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">By</span> <span class="kd">func</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span> <span class="o">*</span><span class="nx">Planet</span><span class="p">)</span> <span class="kt">bool</span>

<span class="c1">// Sort is a method on the function type, By, that sorts the argument slice according to the function.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">by</span> <span class="nx">By</span><span class="p">)</span> <span class="nf">Sort</span><span class="p">(</span><span class="nx">planets</span> <span class="p">[</span><span class="p">]</span><span class="nx">Planet</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">ps</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">planetSorter</span><span class="p">{</span>
		<span class="nx">planets</span><span class="p">:</span> <span class="nx">planets</span><span class="p">,</span>
		<span class="nx">by</span><span class="p">:</span>      <span class="nx">by</span><span class="p">,</span> <span class="c1">// The Sort method&#39;s receiver is the function (closure) that defines the sort order.
</span><span class="c1"></span>	<span class="p">}</span>
	<span class="nx">sort</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nx">ps</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// planetSorter joins a By function and a slice of Planets to be sorted.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">planetSorter</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">planets</span> <span class="p">[</span><span class="p">]</span><span class="nx">Planet</span>
	<span class="nx">by</span>      <span class="kd">func</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span> <span class="o">*</span><span class="nx">Planet</span><span class="p">)</span> <span class="kt">bool</span> <span class="c1">// Closure used in the Less method.
</span><span class="c1"></span><span class="p">}</span>

<span class="c1">// Len is part of sort.Interface.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">planetSorter</span><span class="p">)</span> <span class="nf">Len</span><span class="p">(</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">planets</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Swap is part of sort.Interface.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">planetSorter</span><span class="p">)</span> <span class="nf">Swap</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">s</span><span class="p">.</span><span class="nx">planets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">planets</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">planets</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">planets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
<span class="p">}</span>

<span class="c1">// Less is part of sort.Interface. It is implemented by calling the &#34;by&#34; closure in the sorter.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">planetSorter</span><span class="p">)</span> <span class="nf">Less</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nf">by</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">planets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">planets</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">planets</span> <span class="p">=</span> <span class="p">[</span><span class="p">]</span><span class="nx">Planet</span><span class="p">{</span>
	<span class="p">{</span><span class="s">&#34;Mercury&#34;</span><span class="p">,</span> <span class="mf">0.055</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">}</span><span class="p">,</span>
	<span class="p">{</span><span class="s">&#34;Venus&#34;</span><span class="p">,</span> <span class="mf">0.815</span><span class="p">,</span> <span class="mf">0.7</span><span class="p">}</span><span class="p">,</span>
	<span class="p">{</span><span class="s">&#34;Earth&#34;</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">}</span><span class="p">,</span>
	<span class="p">{</span><span class="s">&#34;Mars&#34;</span><span class="p">,</span> <span class="mf">0.107</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">}</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// ExampleSortKeys demonstrates a technique for sorting a struct type using programmable sort criteria.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Example_sortKeys</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// Closures that order the Planet structure.
</span><span class="c1"></span>	<span class="nx">name</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span> <span class="o">*</span><span class="nx">Planet</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">name</span> <span class="p">&lt;</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">name</span>
	<span class="p">}</span>
	<span class="nx">mass</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span> <span class="o">*</span><span class="nx">Planet</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">mass</span> <span class="p">&lt;</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">mass</span>
	<span class="p">}</span>
	<span class="nx">distance</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span> <span class="o">*</span><span class="nx">Planet</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">distance</span> <span class="p">&lt;</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">distance</span>
	<span class="p">}</span>
	<span class="nx">decreasingDistance</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span> <span class="o">*</span><span class="nx">Planet</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nf">distance</span><span class="p">(</span><span class="nx">p2</span><span class="p">,</span> <span class="nx">p1</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">// Sort the planets by the various criteria.
</span><span class="c1"></span>	<span class="nf">By</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nx">planets</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;By name:&#34;</span><span class="p">,</span> <span class="nx">planets</span><span class="p">)</span>

	<span class="nf">By</span><span class="p">(</span><span class="nx">mass</span><span class="p">)</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nx">planets</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;By mass:&#34;</span><span class="p">,</span> <span class="nx">planets</span><span class="p">)</span>

	<span class="nf">By</span><span class="p">(</span><span class="nx">distance</span><span class="p">)</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nx">planets</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;By distance:&#34;</span><span class="p">,</span> <span class="nx">planets</span><span class="p">)</span>

	<span class="nf">By</span><span class="p">(</span><span class="nx">decreasingDistance</span><span class="p">)</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nx">planets</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;By decreasing distance:&#34;</span><span class="p">,</span> <span class="nx">planets</span><span class="p">)</span>

	<span class="c1">// Output: By name: [{Earth 1 1} {Mars 0.107 1.5} {Mercury 0.055 0.4} {Venus 0.815 0.7}]
</span><span class="c1"></span>	<span class="c1">// By mass: [{Mercury 0.055 0.4} {Mars 0.107 1.5} {Venus 0.815 0.7} {Earth 1 1}]
</span><span class="c1"></span>	<span class="c1">// By distance: [{Mercury 0.055 0.4} {Venus 0.815 0.7} {Earth 1 1} {Mars 0.107 1.5}]
</span><span class="c1"></span>	<span class="c1">// By decreasing distance: [{Mars 0.107 1.5} {Earth 1 1} {Venus 0.815 0.7} {Mercury 0.055 0.4}]
</span><span class="c1"></span><span class="p">}</span>

</code></pre></div><ol>
<li>传统的排序我们是通过实现 <code>sort</code> 接口，在其 <code>Less</code> 方法中对需要排序的内容进行顺序判断</li>
<li>上述例子能够灵活的使用结构体的任意字段作为排序规则依据(name/mass/distance) ⬇</li>
<li>使用组合的方式将待排序内容 <code>planets</code> 及自定义排序功能 <code>by</code> 进行组合 得到一个新的结构体 <code>planetSorter</code></li>
<li>在 <code>planetSorter</code> 上实现 <code>sort</code> 接口后， 便可直接调用 <code>sort.Sort(ps)</code> 对进行排序，排序的实际规则在 <code>func (s *planetSorter) Less(i, j int) bool</code> 内实现，在 <code>Less</code> 方法中调用了自己的 <code>by</code></li>
<li><code>planetSorter</code> 是一个内部使用的结构体，外部无需了解</li>
<li>最后得到的是一种设计模式：(功能).(对象) 和以往的设计模式不同，以往都是面向对象的设计模式即 (对象).(功能)</li>
<li>这种设计模式的好处是一个功能可以多处复用在不同对象上</li>
<li>这种模式首先对功能定义进行抽象，然后为这个功能定义接收将作用此功能的对象的方法 这里是 <code>func (by By) Sort(planets []Planet) </code></li>
<li>这里的功能定义可以是一个函数，譬如上述的 <code>By</code></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>[Go] &#34;==&#34; 与 reflect.DeepEqual</title>
			<link>https://tangzixiang.github.io/posts/2019/go-%E4%B8%8E-reflect.deepequal/</link>
			<pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/go-%E4%B8%8E-reflect.deepequal/</guid>
			<description>摘要  什么时候 == 不管用  基础类型之间进行比较 聚合类型之间进行比较   reflect.DeepEqual 介绍 reflect.DeepEqual 实践  针对基础类型的使用 针对聚合类型的使用 针对引用类型的使用 特殊情况   注 总结  什么时候 &amp;ldquo;==&amp;rdquo; 不管用 要知道 == 什么时候不管用首先得知道其什么时候管用
基础类型之间进行比较  若比较的类型一致且均为基础类型，此时直接比较值的内容。 若比较的类型不一致且均为基础类型，将会出现语法错误，编译失败。 若比较的类型不一致，且存在一方为 inteface 类型包装基础类型  若 inteface 类型的实际类型与另一方的类型不一致，比较结束返回 false 若 inteface 类型的实际类型与另一方的类型一致，比较实际值的内容。   若比较的类型一致且均为 inteface 类型包装基础类型  若 inteface 类型的实际类型与另一方的实际类型不一致，比较结束返回 false 若 inteface 类型的实际类型与另一方的实际类型一致，比较实际值的内容。    基础类型的比较比较简单就不上代码啦~
聚合类型之间进行比较 数组  若其内部元素为基础类型时且长度，类型，值均一致时，比较成功返回 true，否则为 false。 若其内部元素为数组时参考上一条比较。 若其内部元素为结构体时，参考下一条结构体的比较  结构体  当结构体内部存在 map  类型/slice 类型/channel 类型/函数类型 字段时，则该结构体不可使用 == 进行直接比较，否则语法错误，编译失败。 按照顺序比较两者结构体变量的成员变量，若满足所有比较则两者比较成功返回 true，否则返回 false。  more code less talk</description>
			<content type="html"><![CDATA[<h2 id="heading">摘要</h2>
<ol>
<li>什么时候 <strong><code>==</code></strong> 不管用
<ul>
<li>基础类型之间进行比较</li>
<li>聚合类型之间进行比较</li>
</ul>
</li>
<li>reflect.DeepEqual 介绍</li>
<li>reflect.DeepEqual 实践
<ul>
<li>针对基础类型的使用</li>
<li>针对聚合类型的使用</li>
<li>针对引用类型的使用</li>
<li>特殊情况</li>
</ul>
</li>
<li>注</li>
<li>总结</li>
</ol>
<h2 id="--">什么时候 &ldquo;<strong>==</strong>&rdquo; 不管用</h2>
<p>要知道  <strong><code>==</code></strong> 什么时候不管用首先得知道其什么时候管用</p>
<h3 id="heading1">基础类型之间进行比较</h3>
<ol>
<li>若比较的类型一致且均为基础类型，此时直接比较值的内容。</li>
<li>若比较的类型不一致且均为基础类型，将会出现语法错误，编译失败。</li>
<li>若比较的类型不一致，且存在一方为 inteface 类型包装基础类型
<ul>
<li>若 inteface 类型的实际类型与另一方的类型不一致，比较结束返回 false</li>
<li>若 inteface 类型的实际类型与另一方的类型一致，比较实际值的内容。</li>
</ul>
</li>
<li>若比较的类型一致且均为 inteface 类型包装基础类型
<ul>
<li>若 inteface 类型的实际类型与另一方的实际类型不一致，比较结束返回 false</li>
<li>若 inteface 类型的实际类型与另一方的实际类型一致，比较实际值的内容。</li>
</ul>
</li>
</ol>
<p>基础类型的比较比较简单就不上代码啦~</p>
<h3 id="heading2">聚合类型之间进行比较</h3>
<h3 id="heading3">数组</h3>
<ol>
<li>若其内部元素为基础类型时且长度，类型，值均一致时，比较成功返回 true，否则为 false。</li>
<li>若其内部元素为数组时参考上一条比较。</li>
<li>若其内部元素为结构体时，参考下一条结构体的比较</li>
</ol>
<h3 id="heading4">结构体</h3>
<ol>
<li>当结构体内部存在 <code>map </code> 类型/<code>slice</code> 类型/<code>channel</code> 类型/函数类型 字段时，则该结构体不可使用 <strong><code>==</code></strong> 进行直接比较，否则语法错误，编译失败。</li>
<li>按照顺序比较两者结构体变量的成员变量，若满足所有比较则两者比较成功返回 true，否则返回 false。</li>
</ol>
<p>more code less talk</p>
<p>第一种情况:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Mapper</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Map</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span>
<span class="p">}</span>
<span class="nx">m1</span><span class="p">,</span> <span class="nx">m2</span> <span class="o">:=</span> <span class="nx">Mapper</span><span class="p">{</span><span class="p">}</span><span class="p">,</span> <span class="nx">Mapper</span><span class="p">{</span><span class="p">}</span>
<span class="c1">// 编译失败 
</span><span class="c1"></span><span class="c1">// invalid operation: m1 == m2 (struct containing map[int]string cannot be compared)
</span><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">m1</span> <span class="o">==</span> <span class="nx">m2</span><span class="p">)</span>
</code></pre></div><p>第二种情况:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Point</span> <span class="kd">struct</span><span class="p">{</span> <span class="nx">X</span><span class="p">,</span> <span class="nx">Y</span> <span class="kt">int</span> <span class="p">}</span>

<span class="nx">p</span> <span class="o">:=</span> <span class="nx">Point</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span>
<span class="nx">q</span> <span class="o">:=</span> <span class="nx">Point</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">}</span>

<span class="c1">// 以下两种比较无异
</span><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">X</span> <span class="o">==</span> <span class="nx">q</span><span class="p">.</span><span class="nx">X</span> <span class="o">&amp;&amp;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Y</span> <span class="o">==</span> <span class="nx">q</span><span class="p">.</span><span class="nx">Y</span><span class="p">)</span> <span class="c1">// false
</span><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p</span> <span class="o">==</span> <span class="nx">q</span><span class="p">)</span>                   <span class="c1">// false
</span></code></pre></div><p>未完待续</p>
<h2 id="heading5">注</h2>
<ol>
<li>基础类型分为: 数字类型、字符串类型、布尔类型。</li>
<li>聚合类型分为: 数组类型、结构体类型。</li>
<li>引用类型: 指针类型、slice类型、map类型、函数类型、channel类型</li>
</ol>
<h2 id="heading6">参考：</h2>
<ul>
<li><strong>[The Laws of Reflection]</strong>: <a href="https://blog.golang.org/laws-of-reflection">https://blog.golang.org/laws-of-reflection</a></li>
<li><strong>[The Laws of Reflection]</strong> 翻译版: <strong>[Go 语言反射三定律]</strong> : <a href="https://segmentfault.com/a/1190000006190038">https://segmentfault.com/a/1190000006190038</a></li>
<li><strong>[Go语言中文网]</strong> : <a href="https://studygolang.com/">https://studygolang.com/</a></li>
<li><strong>[Go 程序设计语言]</strong></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title> [JS] 浅谈 JS 对象之扩展、密封及冻结三大特性</title>
			<link>https://tangzixiang.github.io/posts/2019/%E6%B5%85%E8%B0%88-js-%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%89%A9%E5%B1%95%E5%AF%86%E5%B0%81%E5%8F%8A%E5%86%BB%E7%BB%93%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</link>
			<pubDate>Thu, 30 Jun 2016 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E6%B5%85%E8%B0%88-js-%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%89%A9%E5%B1%95%E5%AF%86%E5%B0%81%E5%8F%8A%E5%86%BB%E7%BB%93%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</guid>
			<description>摘要  扩展特性  Object.isExtensible 方法 Object.preventExtensions 方法   密封特性  Object.isSealed 方法 Object.seal 方法   冻结特性  Object.isFrozen 方法 Object.freeze 方法  浅冻结 与 深冻结      扩展特性 如果一个对象可以添加新的属性，则这个对象是可扩展的。 让这个对象变的不可扩展，也就是不能再有新的属性
我们都知道，我们可以通过属性描述符创建属性不可配置对象 如何让对象属性不可配置或枚举, 在这里我们可以创建不可扩展属性的对象
Object.isExtensible 方法 MDN：
概述 Object.isExtensible() 方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。 语法 Object.isExtensible(obj) 参数 obj 需要检测的对象  使用：
//新对象默认是可扩展的无论何种方式创建的对象，这里使用的是字面量方式  var empty = {a:1}; console.log(Object.isExtensible(empty) === true);//true  //等价于 使用属性描述符 empty = Object.create({},{ &amp;#34;a&amp;#34;:{ value : 1, configurable : true,//可配置  enumerable : true,//可枚举  writable : true//可写  } }); console.</description>
			<content type="html"><![CDATA[<h2 id="heading">摘要</h2>
<ul>
<li>扩展特性
<ul>
<li><code>Object.isExtensible</code> 方法</li>
<li><code>Object.preventExtensions</code> 方法</li>
</ul>
</li>
<li>密封特性
<ul>
<li><code>Object.isSealed</code> 方法</li>
<li><code>Object.seal</code> 方法</li>
</ul>
</li>
<li>冻结特性
<ul>
<li><code>Object.isFrozen</code> 方法</li>
<li><code>Object.freeze</code> 方法
<ul>
<li><code>浅冻结</code> 与 <code>深冻结</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="heading1"><strong>扩展特性</strong></h2>
<p>如果一个对象可以添加新的属性，则这个对象是可扩展的。
让这个对象变的不可扩展，也就是不能再有新的属性</p>
<p>我们都知道，我们可以通过<code>属性描述符</code>创建属性不可配置对象 <a href="../%E6%B5%85%E8%B0%88-js-%E5%AF%B9%E8%B1%A1%E6%B7%BB%E5%8A%A0-getter%E4%B8%8E-setter-%E7%9A%845%E7%A7%8D%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%AE%A9%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8D%E5%8F%AF%E9%85%8D%E7%BD%AE%E6%88%96%E6%9E%9A%E4%B8%BE">如何让对象属性不可配置或枚举</a>,
在这里我们可以创建不可扩展属性的对象</p>
<h3 id="objectisextensible-"><strong>Object.isExtensible 方法</strong></h3>
<p>MDN：</p>
<pre><code>概述
    Object.isExtensible() 方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。
语法
    Object.isExtensible(obj)
参数
    obj 需要检测的对象
</code></pre>
<p>使用：</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//新对象默认是可扩展的无论何种方式创建的对象，这里使用的是字面量方式
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">empty</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="mi">1</span><span class="p">}</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">empty</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
<span class="c1">//等价于 使用属性描述符
</span><span class="c1"></span><span class="nx">empty</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="p">{</span>
    <span class="s2">&#34;a&#34;</span><span class="o">:</span><span class="p">{</span>
        <span class="nx">value</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="nx">configurable</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span><span class="c1">//可配置
</span><span class="c1"></span>        <span class="nx">enumerable</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span><span class="c1">//可枚举
</span><span class="c1"></span>        <span class="nx">writable</span> <span class="o">:</span> <span class="kc">true</span><span class="c1">//可写
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">}</span><span class="p">)</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">empty</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
<span class="c1">//对象是否可以扩展与对象的属性是否可以配置无关
</span><span class="c1"></span><span class="nx">empty</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="p">{</span>
    <span class="s2">&#34;a&#34;</span><span class="o">:</span><span class="p">{</span>
        <span class="nx">value</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="nx">configurable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span><span class="c1">//不可配置
</span><span class="c1"></span>        <span class="nx">enumerable</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span><span class="c1">//可枚举
</span><span class="c1"></span>        <span class="nx">writable</span> <span class="o">:</span> <span class="kc">true</span><span class="c1">//可写
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">}</span><span class="p">)</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">empty</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span></code></pre></div><p>那么我们如何让一个对象变成不可扩展：</p>
<h3 id="objectpreventextensions-"><strong>Object.preventExtensions 方法</strong></h3>
<p>MDN:</p>
<pre><code>概述
    Object.preventExtensions() 方法让一个对象变的不可扩展，也就是永远不能再添加新的属性。
语法
    Object.preventExtensions(obj)
参数
    obj 将要变得不可扩展的对象
描述
    如果一个对象可以添加新的属性，则这个对象是可扩展的。
    preventExtensions 可以让这个对象变的不可扩展，也就是不能再有新的属性。
    需要注意的是不可扩展的对象的属性通常仍然可以被删除。
    尝试给一个不可扩展对象添加新属性的操作将会失败，不过可能是静默失败，也可能会抛出 TypeError 异常（严格模式）。        
    Object.preventExtensions 只能阻止一个对象不能再添加新的自身属性，仍然可以为该对象的原型添加属性。
</code></pre>
<p>使用：</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//Object.preventExtensions 将原对象变得不可扩展,并且返回原对象.
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span> <span class="o">===</span> <span class="nx">obj2</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//新创建的对象默认是可扩展的
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">empty</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">empty</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>    <span class="nx">empty</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//添加成功
</span><span class="c1"></span>
    <span class="c1">//将其变为不可扩展对象
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">empty</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">empty</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//使用传统方式为不可扩展对象添加属性
</span><span class="c1"></span>    <span class="nx">empty</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span><span class="c1">//静默失败,不抛出错误
</span><span class="c1"></span>    <span class="nx">empty</span><span class="p">[</span><span class="s2">&#34;c&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span><span class="c1">//静默失败,不抛出错误
</span><span class="c1"></span>
    <span class="c1">//在严格模式中,为不可扩展对象添加属性将抛出错误
</span><span class="c1"></span>    <span class="p">(</span><span class="kd">function</span> <span class="nx">fail</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
        <span class="nx">empty</span><span class="p">.</span><span class="nx">d</span> <span class="o">=</span> <span class="s2">&#34;4&#34;</span><span class="p">;</span><span class="c1">//throws a TypeError
</span><span class="c1"></span>    <span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>

    <span class="c1">//使用 Object.defineProperty方法为不可扩展对象添加新属性会抛出异常
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">empty</span><span class="p">,</span><span class="s2">&#34;e&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span> <span class="mi">5</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="c1">//抛出 TypeError 异常
</span><span class="c1"></span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">empty</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span> <span class="mi">2</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">empty</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span><span class="c1">//输出2
</span><span class="c1"></span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>在上述代码的最后两行可以看到如果为当前不可扩展对象 empty 修改属性是成功的，这是因为一个对象的属性是否可以被修改与该对象是否可以扩展无关，而是与该对象在创建的时候是否声明为不可重写有关（<a href="../%E6%B5%85%E8%B0%88-js-%E5%AF%B9%E8%B1%A1%E6%B7%BB%E5%8A%A0-getter%E4%B8%8E-setter-%E7%9A%845%E7%A7%8D%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%AE%A9%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8D%E5%8F%AF%E9%85%8D%E7%BD%AE%E6%88%96%E6%9E%9A%E4%B8%BE">Writable</a>）</p>
<p>如果我们想让一个对象的所有属性都<code>不可配置</code>同时也不允许为该对象进行<code>扩展</code>怎么做：</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//创建一个对象,同时声明其所有属性均为不可配置且不可写
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span> <span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="mi">3</span><span class="p">}</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperties</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="p">{</span>
       <span class="s2">&#34;a&#34;</span><span class="o">:</span><span class="p">{</span><span class="nx">configurable</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span><span class="p">,</span>
       <span class="s2">&#34;b&#34;</span><span class="o">:</span><span class="p">{</span><span class="nx">configurable</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span><span class="p">,</span>
       <span class="s2">&#34;c&#34;</span><span class="o">:</span><span class="p">{</span><span class="nx">configurable</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span>
    <span class="p">}</span><span class="p">)</span><span class="p">;</span>

    <span class="c1">//等价于
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="p">{</span>
        <span class="s2">&#34;a&#34;</span><span class="o">:</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">congigurable</span> <span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">enumerable</span> <span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">writable</span><span class="o">:</span><span class="kc">true</span><span class="p">}</span><span class="p">,</span>
        <span class="s2">&#34;b&#34;</span><span class="o">:</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">congigurable</span> <span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">enumerable</span> <span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">writable</span><span class="o">:</span><span class="kc">true</span><span class="p">}</span><span class="p">,</span>
        <span class="s2">&#34;c&#34;</span><span class="o">:</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="nx">congigurable</span> <span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">enumerable</span> <span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">writable</span><span class="o">:</span><span class="kc">true</span><span class="p">}</span>
    <span class="p">}</span><span class="p">)</span><span class="p">;</span>

    <span class="c1">//将其转化为不可扩展对象
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span><span class="p">;</span>

    <span class="c1">//测试该对象是否即不可扩展同时其所有属性均不可配置
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//false
</span><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">name</span> <span class="k">of</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="c1">//遍历该对象的所有可枚举属性名,不包括继承而来的属性
</span><span class="c1"></span>        <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="nx">name</span><span class="p">,</span><span class="p">{</span><span class="nx">enumerable</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="c1">//将该属性的 enumerable 特性重新配置为 true
</span><span class="c1"></span>    <span class="p">}</span><span class="c1">//抛出异常
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>虽然说上面的程序实现了需求，但未免太麻烦，这里我们可以使用 JS 对象的另一特性 <code>密封</code></p>
<h2 id="heading2"><strong>密封特性</strong></h2>
<p>密封对象是指那些不可 扩展 的，且所有自身属性都不可配置的（non-configurable）对象。</p>
<p>或则说 密封对象是指那些不能添加新的属性，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可能可以修改已有属性的值的对象。</p>
<h3 id="objectissealed-"><strong>Object.isSealed 方法</strong></h3>
<p>MDN：</p>
<pre><code>概述 
    Object.isSealed() 方法判断一个对象是否是密封的（sealed）。
语法 
    Object.isSealed(obj)
参数
    obj 将要检测的对象
描述
    如果这个对象是密封的，则返回 true，否则返回 false。
</code></pre>
<p>使用：</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//新建的对象默认不是密封的
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">empty</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">empty</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//如果把一个空对象变得不可扩展,则它同时也会变成个密封对象.
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">empty</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">empty</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//但如果这个对象不是空对象,则它不会变成密封对象,因为密封对象的所有自身属性必须是不可配置的.
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">hasProp</span> <span class="o">=</span> <span class="p">{</span><span class="nx">fee</span> <span class="o">:</span> <span class="s2">&#34;fie foe fum&#34;</span><span class="p">}</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">hasProp</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">hasProp</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//如果把这个属性变得不可配置,则这个对象也就成了密封对象.
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">hasProp</span><span class="p">,</span><span class="s2">&#34;fee&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">configurable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">hasProp</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><h3 id="objectseal-"><strong>Object.seal 方法</strong></h3>
<p>MDN：</p>
<pre><code>概述
    Object.seal() 方法可以让一个对象密封，并返回被密封后的对象。
    密封对象是指那些不能添加新的属性，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可能可以修改已有属性的值的对象。
语法
    Object.seal(obj)
参数
    obj 将要被密封的对象
描述
    通常情况下，一个对象是可扩展的（可以添加新的属性）。
    密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。
    属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。
    但属性的值仍然可以修改。
    尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出 TypeError 异常（严格模式）。
    不会影响从原型链上继承的属性。但 __proto__ (  ) 属性的值也会不能修改。
</code></pre>
<p>使用：</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>             <span class="c1">//声明一个对象
</span><span class="c1"></span>        <span class="nx">prop</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="p">,</span>
        <span class="nx">foo</span><span class="o">:</span><span class="s2">&#34;bar&#34;</span>
    <span class="p">}</span><span class="p">;</span>
    <span class="c1">//可以添加新的属性,已有属性的值可以修改,可以删除
</span><span class="c1"></span>    <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="s2">&#34;baz&#34;</span><span class="p">;</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">lumpy</span> <span class="o">=</span> <span class="s2">&#34;woof&#34;</span><span class="p">;</span>
    <span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">prop</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">seal</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span><span class="p">;</span><span class="c1">//将 obj 密封,且返回原对象
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span> <span class="o">===</span> <span class="nx">obj</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//仍然可以修改密封对象上的属性的值
</span><span class="c1"></span>    <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="s2">&#34;quux&#34;</span><span class="p">;</span><span class="c1">//修改成功
</span><span class="c1"></span>
    <span class="c1">//但不能把密封对象的属性进行重新配置,譬如讲数据属性重定义成访问器属性.
</span><span class="c1"></span>    <span class="c1">//Object.defineProperty(obj,&#34;foo&#34;,{get : function(){return &#34;g&#34;;}});//抛出 TypeError
</span><span class="c1"></span>
    <span class="c1">//任何除修改属性值以外的操作都会失败
</span><span class="c1"></span>    <span class="nx">obj</span><span class="p">.</span><span class="nx">quaxxor</span> <span class="o">=</span> <span class="s2">&#34;the friendly duck&#34;</span><span class="p">;</span><span class="c1">//静默失败,属性没有成功添加
</span><span class="c1"></span>    <span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span><span class="c1">//静默失败,属性没有删除成功
</span><span class="c1"></span>
    <span class="c1">//在严格模式中,会抛出 TypeError 异常
</span><span class="c1"></span>    <span class="p">(</span><span class="kd">function</span> <span class="nx">fail</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
        <span class="c1">//delete obj.foo;//抛出 TypeError 异常
</span><span class="c1"></span>        <span class="c1">//obj.sparky = &#34;arf&#34;;//抛出 TYpeError 异常
</span><span class="c1"></span>    <span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>

    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="s2">&#34;ohai&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span><span class="mi">17</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="c1">//添加属性失败
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="s2">&#34;foo&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span> <span class="s2">&#34;eit&#34;</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="c1">//修改成功
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">)</span><span class="p">;</span><span class="c1">//“eit”
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>如上面程序所示，将一个对象<code>密封</code>后仅能保证该对象<code>不被扩展</code>且属性<code>不可重配置</code>，但是原属性值却是有可能被修改的，若要达到即<code>密封</code>又<code>不可修改原属性值</code>可以这样：</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//创建不可修改值的密封对象
</span><span class="c1"></span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//方式一
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="mi">1</span><span class="p">}</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">configurable</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">writable</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span><span class="c1">//1
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="o">===</span><span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//方式二
</span><span class="c1"></span>    <span class="nx">o</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="o">:</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">writable</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">seal</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span><span class="c1">//1
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="o">===</span><span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>    
    <span class="c1">//方式...
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>同样的，虽然实现了需求，依旧可以使用另一特性 <code>冻结</code></p>
<h2 id="heading3"><strong>冻结特性</strong></h2>
<p>一个对象是冻结的（frozen）是指它不可扩展，所有属性都是不可配置的（non-configurable），且所有数据属性（data properties）都是不可写的（non-writable）。</p>
<p>数据属性是值那些没有取值器（getter）或赋值器（setter）的属性。</p>
<p>或则说 冻结对象是指那些不能添加新的属性，不能修改已有属性的值，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性的对象。也就是说，这个对象永远是不可变的。</p>
<h3 id="objectisfrozen-"><strong>Object.isFrozen 方法</strong></h3>
<p>MDN：</p>
<pre><code>概述
    Object.isFrozen() 方法判断一个对象是否被冻结（frozen）。
语法
    Object.isFrozen(obj)
参数
obj 被检测的对象
描述
    一个对象是冻结的（frozen）是指它不可扩展，所有属性都是不可配置的（non-configurable），且所有数据属性（data properties）都是不可写的（non-writable）。数据属性是值那些没有取值器（getter）或赋值器（setter）的属性。
</code></pre>
<p>使用：</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//一个对象默认是可扩展的,所以他也是非冻结的.
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="p">{</span><span class="p">}</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//一个不可扩展的空对象同时也是一个冻结对象.一个不可扩展的空对象也是密封对象
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">vacuouslyFrozen</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">vacuouslyFrozen</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">vacuouslyFrozen</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//一个非空对象默认也是非冻结的.
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">oneProp</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">p</span><span class="o">:</span><span class="mi">42</span> <span class="p">}</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">oneProp</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//让这个对象变的不可扩展,并不意味着这个对象变成了冻结对象,因为 p 属性仍然是可以配置的(而且可写的).
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span> <span class="nx">oneProp</span> <span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">oneProp</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//如果删除了这个属性,则它成为空对象,会成为一个冻结对象.
</span><span class="c1"></span>    <span class="k">delete</span> <span class="nx">oneProp</span><span class="p">.</span><span class="nx">p</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">oneProp</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span>

    <span class="c1">//一个不可扩展的对象,拥有一个不可写但可配置的属性,则它仍然是非冻结的.
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">nonWritable</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">e</span> <span class="o">:</span> <span class="s2">&#34;plep&#34;</span> <span class="p">}</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">nonWritable</span><span class="p">)</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">nonWritable</span><span class="p">,</span><span class="s2">&#34;e&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">writable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="c1">//不可写
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">nonWritable</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//把这个属性改为不可配置,会让这个对象成为冻结对象
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">nonWritable</span><span class="p">,</span><span class="s2">&#34;e&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">configurable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="c1">//不可配置
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">nonWritable</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//一个不可扩展的对象,拥有一个不可配置但可写的属性,则它仍然是非冻结的.
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">nonConfigurable</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">release</span> <span class="o">:</span> <span class="s2">&#34;the kraken!&#34;</span> <span class="p">}</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">nonConfigurable</span><span class="p">)</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">nonConfigurable</span><span class="p">,</span><span class="s2">&#34;release&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">configurable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">nonConfigurable</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//把这个属性改为不可写,会让这个对象成为冻结对象.
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">nonConfigurable</span><span class="p">,</span><span class="s2">&#34;release&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">writable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">nonConfigurable</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//一个不可扩展的对象,值拥有一个访问器,则它仍然是非冻结的.
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">accessor</span> <span class="o">=</span> <span class="p">{</span><span class="nx">get</span> <span class="nx">food</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="s2">&#34;yum&#34;</span><span class="p">;</span><span class="p">}</span><span class="p">}</span><span class="p">;</span><span class="c1">//这里使用的是字面值法创建对象,默认可配置
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">accessor</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">accessor</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//把这个属性改为不可配置,会让这个对象成为冻结对象.
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">accessor</span><span class="p">,</span><span class="s2">&#34;food&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">configurable</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">accessor</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>

    <span class="c1">//使用 Object.freeze 是冻结一个对象的最方便的方法.
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">frozen</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="o">:</span><span class="mi">81</span><span class="p">}</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">frozen</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">frozen</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">frozen</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//一个冻结对象也是一个密封对象
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">frozen</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//一个冻结对象也是一个不可扩展对象
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">frozen</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><h3 id="objectfreeze-"><strong>Object.freeze 方法</strong></h3>
<p>MDN：</p>
<pre><code>概述
    Object.freeze() 方法可以冻结一个对象。
    冻结对象是指那些不能添加新的属性，不能修改已有属性的值，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性的对象。
    也就是说，这个对象永远是不可变的。该方法返回被冻结的对象。
语法
    Object.freeze(obj)
参数
    obj 将要被冻结的对象
描述
    冻结对象的所有自身属性都不可能以任何方式被修改。
    任何尝试修改该对象的操作都会失败，可能是静默失败，也可能会抛出异常（严格模式中）。
    数据属性的值不可更改，访问器属性（有getter和setter）也同样（但由于是函数调用，给人的错觉是还是可以修改这个属性）。
    如果一个属性的值是个对象，则这个对象中的属性是可以修改的，除非它也是个冻结对象。
</code></pre>
<p>使用：</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">prop</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="p">,</span>
        <span class="nx">foo</span><span class="o">:</span><span class="s2">&#34;bar&#34;</span>
    <span class="p">}</span><span class="p">;</span>

    <span class="c1">//可以添加新的属性,已有的属性可以被修改或删除
</span><span class="c1"></span>    <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="s2">&#34;baz&#34;</span><span class="p">;</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">lumpy</span> <span class="o">=</span> <span class="s2">&#34;woof&#34;</span><span class="p">;</span>
    <span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">prop</span><span class="p">;</span>

    <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span><span class="p">;</span><span class="c1">//冻结
</span><span class="c1"></span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>
    <span class="c1">//对冻结对象的任何操作都会失败
</span><span class="c1"></span>    <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="s2">&#34;quux&#34;</span><span class="p">;</span><span class="c1">//静默失败;
</span><span class="c1"></span>    <span class="nx">obj</span><span class="p">.</span><span class="nx">quaxxor</span> <span class="o">=</span> <span class="s2">&#34;the friendly duck&#34;</span><span class="p">;</span><span class="c1">//静默失败
</span><span class="c1"></span>
    <span class="c1">//在严格模式中会抛出 TypeError 异常
</span><span class="c1"></span>    <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
        <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="s2">&#34;sparky&#34;</span><span class="p">;</span><span class="c1">//抛出 TypeError 异常
</span><span class="c1"></span>        <span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">quaxxor</span><span class="p">;</span><span class="c1">//抛出 TypeError 异常
</span><span class="c1"></span>        <span class="nx">obj</span><span class="p">.</span><span class="nx">sparky</span> <span class="o">=</span> <span class="s2">&#34;arf&#34;</span><span class="p">;</span><span class="c1">//抛出 TypeError 异常
</span><span class="c1"></span>    <span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>

    <span class="c1">//使用 Object.defineProperty方法同样会抛出 TypeError 异常
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="s2">&#34;ohai&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="mi">17</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="c1">//抛出 TypeError 异常
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="s2">&#34;foo&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="s2">&#34;eit&#34;</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="c1">//抛出 TypeError 异常
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>如该方法 MDN 的描述所述，倘若一个对象的属性是一个对象，那么对这个外部对象进行冻结，内部对象的属性是依旧可以改变的，这就叫浅冻结，若把外部对象冻结的同时把其所有内部对象甚至是内部的内部无限延伸的对象属性也冻结了，这就叫深冻结。</p>
<p><strong>浅冻结与深冻结</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">internal</span> <span class="o">:</span><span class="p">{</span><span class="p">}</span>
    <span class="p">}</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span><span class="p">;</span><span class="c1">//浅冻结
</span><span class="c1"></span>    <span class="nx">obj</span><span class="p">.</span><span class="nx">internal</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="s2">&#34;aValue&#34;</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">internal</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span><span class="c1">//&#34;aValue&#34;
</span><span class="c1"></span>
    <span class="c1">//想让一个对象变得完全冻结,冻结所有对象中的对象,可以使用下面的函数.
</span><span class="c1"></span>    <span class="kd">function</span> <span class="nx">deepFreeze</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">{</span>
        <span class="kd">var</span> <span class="nx">prop</span><span class="p">,</span><span class="nx">propKey</span><span class="p">;</span>
        <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">;</span><span class="c1">//首先冻结第一层对象
</span><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="nx">propKey</span> <span class="k">in</span> <span class="nx">o</span><span class="p">)</span><span class="p">{</span>
            <span class="nx">prop</span> <span class="o">=</span> <span class="nx">o</span><span class="p">[</span><span class="nx">propKey</span><span class="p">]</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">o</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">propKey</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">prop</span> <span class="o">===</span> <span class="s2">&#34;object&#34;</span><span class="p">)</span> <span class="o">||</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">prop</span><span class="p">)</span><span class="p">)</span><span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">deepFreeze</span><span class="p">(</span><span class="nx">prop</span><span class="p">)</span><span class="p">;</span><span class="c1">//递归
</span><span class="c1"></span>        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">deepFreeze</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">internal</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="s2">&#34;bValue&#34;</span><span class="p">;</span><span class="c1">//静默失败
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">internal</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span><span class="p">;</span><span class="c1">//undefined
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>[JS] 高能！typeof Function.prototype 引发的先有 Function 还是先有 Object 的探讨</title>
			<link>https://tangzixiang.github.io/posts/2019/%E9%AB%98%E8%83%BDtypeof-function.prototype-%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%88%E6%9C%89-function-%E8%BF%98%E6%98%AF%E5%85%88%E6%9C%89-object-%E7%9A%84%E6%8E%A2%E8%AE%A8/</link>
			<pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E9%AB%98%E8%83%BDtypeof-function.prototype-%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%88%E6%9C%89-function-%E8%BF%98%E6%98%AF%E5%85%88%E6%9C%89-object-%E7%9A%84%E6%8E%A2%E8%AE%A8/</guid>
			<description>来个摸底测试，说出以下每个表达式的结果
function F(){}; var o = {}; typeof F; typeof o; typeof F.prototype; typeof o.prototype; typeof new F; typeof (new F).prototype; typeof (new F).__proto__; typeof F.__proto__; typeof o.__proto__; typeof Object; typeof Function; typeof (new Function).prototype; typeof (new Function).__proto__; typeof (new Object).prototype; typeof (new Object).__proto__; typeof Object.prototype; typeof Object.__proto__; typeof Function.prototype; typeof Function.__proto__;  function F(){}; var o = {}; typeof F; //==&amp;gt; function typeof o; //==&amp;gt; object typeof F.prototype; //==&amp;gt; object typeof o.</description>
			<content type="html"><![CDATA[<p>来个摸底测试，说出以下每个表达式的结果</p>
<pre><code>function F(){};
var o = {};

typeof F;
typeof o;
typeof F.prototype;
typeof o.prototype;
typeof new F;
typeof (new F).prototype;
typeof (new F).__proto__;
typeof F.__proto__;
typeof o.__proto__;
typeof Object;
typeof Function;
typeof (new Function).prototype;
typeof (new Function).__proto__;
typeof (new Object).prototype;
typeof (new Object).__proto__;
typeof Object.prototype;
typeof Object.__proto__;
typeof Function.prototype;
typeof Function.__proto__;
</code></pre><hr>
<pre><code>function F(){};
var o = {};
                
typeof F;                          //==&gt; function
typeof o;                          //==&gt; object
typeof F.prototype;                //==&gt; object
typeof o.prototype;                //==&gt; undefinded
typeof new F;                      //==&gt; object
typeof (new F).prototype;          //==&gt; undefined
typeof (new F).__proto__;          //==&gt; object
typeof F.__proto__;                //==&gt; function
typeof o.__proto__;                //==&gt; object
typeof Object;                     //==&gt; function
typeof Function;                   //==&gt; function
typeof (new Function).prototype;   //==&gt; object
typeof (new Function).__proto__;   //==&gt; function
typeof (new Object).prototype;     //==&gt; undefined
typeof (new Object).__proto__;     //==&gt; object
typeof Object.prototype;           //==&gt; object
typeof Object.__proto__;           //==&gt; function
typeof Function.prototype;         //==&gt; function
typeof Function.__proto__;         //==&gt; function

</code></pre><p>看到这里相信有不少入门不久的同学已经产生疑惑了，是真的吗？然后在浏览器试过一番发现真是如此。</p>
<p>解开疑惑之前先回顾些大家都知道的知识点：</p>
<p>引用 MDN 关于 对象实例和对象原型对象 的阐述：</p>
<blockquote>
<p>JavaScript 语言的所有对象都是由 Object 衍生的对象；
所有对象都继承了 Object.prototype 的方法和属性，尽管它们可能被覆盖。
例如，其它的构造器原型覆盖了 constructor 属性并提供了其自己的 toString 方法。
原型对象的更改会传播给所有的对象，除非这些属性和方法在原型链中被再次覆盖。</p>
</blockquote>
<p>就如我们经常在各类教科中看到的 所有的实例对象都是 Object 类型的实例</p>
<p>那么我们平时都是如何确定一个对象是否是另一个类型或对象的实例的呢？</p>
<p>对我们可以使用 typeof 关键字 亦或可以使用关键字 instanceof 来确定某个对象是否是指定类型或对象的实例：</p>
<pre><code>typeof {} //object
({}) instanceof Object //true

typeof Date                      //function
Date instanceof Function         //true
typeof Date.prototype            //obejct
Date.prototype instanceof Object //true
</code></pre><p>然而针对 Object 的 prototype 属性：</p>
<pre><code>typeof Object.prototype //object

Object.prototype instanceof Object // false
</code></pre><p>为什么,要想搞清楚为什么就得明白 instanceof 这个关键字在表达式中发生了什么?</p>
<p>在弄清楚 instanceof 之前 还得弄清楚一样东西 就是 new 一个对象到底做了什么：</p>
<p>如 <code>var a = new A();</code> 认为 “a为A函数的实例对象”</p>
<p>new操作的过程是什么? 可以总结如下：</p>
<ol>
<li>new 创建一个空对象{}</li>
<li>然后将 A.prototype 的引用放置到该对象的原型链上。即 a.__proto__ 指向 A.prototype</li>
<li>执行 A 函数，将 A 中 this 指向该对象，执行结束，如果没有 return 那么默认返回this引用</li>
</ol>
<p>那么new的其中一个的作用便是把 A.prototype 的指向添加到了 a 的原型链中。</p>
<p>至此我们便知道了如下关系：</p>
<pre><code>a.\_\_proto__ === A.prototype //true

a instanceof A //true
</code></pre>
<p>故为何不得出一个结论：</p>
<p>instanceof 操作符其实就是检查左侧的元素的 __proto__ 链上有没有右侧类或对象的 prototype 存在。
同理 当某某某是某某某的实例时，其实也是证明左侧的 __proto__ 链上有右侧类或对象的 prototype 存在。</p>
<p>细节剖析如下：</p>
<ol>
<li>看右侧的 A 获取其 prototype 得到 A.prototype。</li>
<li>看左侧 a 对象的原型链上是否有第一步得到 A.prototype。
<ul>
<li>获取 a.__proto__ 对象看是否为 A.prototype，是则返回 true</li>
<li>获取 a.__proto__.__proto__ 对象看是否为 A.prototype,是则返回 true</li>
<li>重复获取左侧的原型链上的 <code>[[Prototype]]</code> 特性即 __proto__ 属性进行判断直到为空返回 false。</li>
</ul>
</li>
</ol>
<p>校验真理，我们都知道 js 有几大内置类型 这些类型都是 Function 的实例，是 Function 类型：</p>
<pre><code>out(typeof Date)     //Function
out(typeof RegExp)   //Function
out(typeof Number)   //Function
out(typeof Boolean)  //Function
out(typeof String)   //Function
out(typeof Array)    //Function
out(typeof Error)    //Function
//...

out(Date.__proto__  === Function.prototype)    //true
out(RegExp.__proto__ === Function.prototype)   //true
out(Number.__proto__ === Function.prototype)   //true
out(Boolean.__proto__ === Function.prototype)  //true
out(String.__proto__ === Function.prototype)   //true
out(Array.__proto__ === Function.prototype)    //true
out(Error.__proto__ === Function.prototype)    //true
//...

out(Object.getPrototypeOf(Date)  === Function.prototype)    //true
out(Object.getPrototypeOf(RegExp) === Function.prototype)   //true
out(Object.getPrototypeOf(Number) === Function.prototype)   //true
out(Object.getPrototypeOf(Boolean) === Function.prototype)  //true
out(Object.getPrototypeOf(String) === Function.prototype)   //true
out(Object.getPrototypeOf(Array) === Function.prototype)    //true
out(Object.getPrototypeOf(Error) === Function.prototype)    //true
//...

out( Date instanceof Function)    //true
out( RegExp instanceof Function)  //true
out( Number instanceof Function)  //true
out( Boolean instanceof Function) //true
out( String instanceof Function)  //true
out( Array instanceof Function)   //true
out( Error instanceof Function)   //true
//...
</code></pre>
<p>回到上述针对 Object 的 prototype 属性疑惑 为什么到了 Object 就得不出一样的结果了呢？</p>
<p>我们都知道每个函数对象亦或函数类型都会有个 prototype 属性，在其上挂载的方法和属性均能够被该类型实例化出来的对象共享，因为实例化出来的对象拥有 <code>[[Prototype]]</code> 特性即 <code>\_\_proto__</code> 属性，js 便是通过该特性实现原型链机制。</p>
<p>那么这些函数的 prototype 属性对象是否也有自己的 <code>[[Prototype]]</code> 特性即 <code>\_\_proto__</code> 属性呢？</p>
<pre><code>out(typeof Date.prototype)    //object
out(typeof RegExp.prototype)  //object
out(typeof Number.prototype)  //object
out(typeof Boolean.prototype) //object
out(typeof String.prototype)  //object
out(typeof Array.prototype)   //object
out(typeof Error.prototype)   //object

out(typeof Object.getPrototypeOf(Date.prototype))        //object
out(typeof Object.getPrototypeOf(RegExp.prototype))      //object
out(typeof Object.getPrototypeOf(Number.prototype))      //object
out(typeof Object.getPrototypeOf(Boolean.prototype))     //object
out(typeof Object.getPrototypeOf(String.prototype))      //object
out(typeof Object.getPrototypeOf(Array.prototype))       //object
out(typeof Object.getPrototypeOf(Error.prototype))       //object

out(Object.getPrototypeOf(Date.prototype) === Object.prototype)    //true
out(Object.getPrototypeOf(RegExp.prototype) === Object.prototype)  //true
out(Object.getPrototypeOf(Number.prototype) === Object.prototype)  //true
out(Object.getPrototypeOf(Boolean.prototype) === Object.prototype) //true
out(Object.getPrototypeOf(String.prototype) === Object.prototype)  //true
out(Object.getPrototypeOf(Array.prototype) === Object.prototype)   //true
out(Object.getPrototypeOf(Error.prototype) === Object.prototype)   //true
</code></pre>
<p>可以看出每个函数对象的 prototype 属性也有自己的 <code>[[Prototype]]</code> 特性 而且指向的是 <code>Object.prototype</code></p>
<p>那么是否所有对象都会有直接的 <code>[[Prototype]]</code> 特性 呢？</p>
<pre><code>out( Object.getPrototypeOf( Object.getPrototypeOf(Date.prototype)))     //null
out( Object.getPrototypeOf( Object.getPrototypeOf(RegExp.prototype)))   //null
out( Object.getPrototypeOf( Object.getPrototypeOf(Number.prototype)))   //null
out( Object.getPrototypeOf( Object.getPrototypeOf(Boolean.prototype)))  //null
out( Object.getPrototypeOf( Object.getPrototypeOf(String.prototype)))   //null
out( Object.getPrototypeOf( Object.getPrototypeOf(Array.prototype)))    //null
out( Object.getPrototypeOf( Object.getPrototypeOf(Error.prototype)))    //null
out( Object.getPrototypeOf( Object.prototype))                          //null
</code></pre>
<p>答案是否。</p>
<p>有个例外他就是 <code>Object.prototype</code>。</p>
<p>回看前面的 Demo:</p>
<pre><code>Object.prototype instanceof Object // false
</code></pre><p>从前面的代码输出我们看到 Object.prototype 对象是没有 <code>[[Prototype]]</code> 特性的，同时前面我们也讨论过 <code>instanceof</code> 这个关键字所涉及的具体操作。</p>
<p>我们可以具体剖析如下：</p>
<ol>
<li>看右侧的 Object 获取其 prototype 得到 Object.prototype。</li>
<li>看左侧 Object.prototype 对象的原型链上是否有第一步得到 Object.prototype。
<ul>
<li>获取 Object.prototype.__proto__ 对象为空直接返回 false。</li>
</ul>
</li>
</ol>
<p>那么为什么所有的对象都有 <code>[[Prototype]]</code> 特性，唯独 <code>Object.prototype</code> 没有呢。答案很简单：既然 JS的继承机制是基于原型链的那总该有个头吧，这个头便是 <code>Object.prototype</code> 。</p>
<p>再来一发:</p>
<pre><code>out( typeof Function)                                          //function
out( typeof Object)                                            //function
out( Object instanceof Function)                               //true
out( Function instanceof Function)                             //true
</code></pre>
<p>在学习 JS 的过程中我们已经知道所有的数据类型都是 <code>Function</code> 类型的实例，包括 <code>Object</code> 在内，但是我们都知道所有的对象都是 Object 的实例，这时便引出文章的题目</p>
<h2 id="-function--object">到底是先有 Function 还是先有 Object？</h2>
<pre><code>out( Function.__proto__  === Function.prototype)               //true
out( Object.__proto__  === Function.prototype)                 //true
out( Object.getPrototypeOf(Function) === Function.prototype)   //true
out( Object.getPrototypeOf(Object) === Function.prototype)     //true
out( Object instanceof Function)                               //true 
out( Function instanceof Function)                             //true
</code></pre>
<p>从上述代码加上前面得出的结论我们可以看出</p>
<p>Function 和 Object 的原型链上都有 <code>Function.prototype</code></p>
<p>我们再来详细看看 <code>Function.prototype</code></p>
<pre><code>out( typeof Function.prototype);                // function
out( Function.prototype instanceof Object)      //true
</code></pre><p>这时候问题升华为</p>
<h2 id="functionprototype--objectprototype-">Function.prototype 和 Object.prototype 的关系。</h2>
<pre><code>out( Function.prototype.__proto__ === Object.prototype)
</code></pre>
<p>这时候关系已经很明了了：</p>
<p>我们都知道除了 Object.prototype 之外所有对象都会有 <code>[[Prototype]]</code> 特性 即 <code>__proto__</code> 属性,故 Function.prototype 也不例外，
Function.prototype 指向的是 Object.prototype</p>
<p>这时候就可以清楚的知道为什么说所有类型都是 Function 的实例，同时也是 Object 的实例:</p>
<p>因为所有的类型的 <code>[[Prototype]]</code> 特性 即 <code>\_\_proto__</code> 属性均指向的是 Function.prototype ,同时 Function.prototype 的<code>[[Prototype]]</code>特性 即 <code>\_\_proto__</code> 属性又指向了 Object.prototype 。</p>
<p>故大王是 <code>Object.prototype</code>，二王是 <code>Function.prototype</code>，其他均是小弟，但是小弟也有等级划分</p>
<p>先接着来看 Function:</p>
<pre><code>out( typeof Function.prototype);                // function
out( typeof Function.__proto__);                // function
out( Function.prototype === Function.__proto__);// true
</code></pre><p>首先我们可以看出 Function.prototype 和其他类型的 prototype 属性是 object 类型不一样， 是 function 类型。
其次 Function.__proto__  指向了 Function.prototype。</p>
<p>我们知道当一个类型实例化出对象时，这些对象的便会共享挂载在该类型的 prototype 属性上的资源，因为这些对象均有 <code>[[Prototype]]</code> 特性,指向的就是实例化出这些对象的类型的 prototype。</p>
<p>从前面的例子可以看到所有的类型的 <code>[[Prototype]]</code> 特性均指向了 Function.prototype,所以这些类型都具有了使用挂载在 Function.prototype 上的资源的权利。因此可以看出，当一个对象具有使用挂载在 Function.prototype 上的资源的权利时，及该对象 <code>[[Prototype]]</code> 指向 Function.prototype 时代表这个对象是个 Function 实例是一个类型，能够实例化出该类型的对象，当然包括 Function 在内。</p>
<p>又因为所有类型的 <code>[[Prototype]]</code> 指向 Function.prototype 而 Function.prototype 的 <code>[[Prototype]]</code> 指向是 Object.prototype，所以这些类型都具有使用挂载在 Object.prototype 上的资源的权利。</p>
<p>那用这些类型实例化出来的对象呢? 类型的原型链并不在实例化出来的对象上呀，但是这些实例化出来的对象的 <code>[[Protitype]]</code> 指向的是其类型的  prototype 属性。</p>
<p>往回看前面的例子 可以看到有一段</p>
<pre><code>out(Object.getPrototypeOf(Date.prototype) === Object.prototype)    //true
out(Object.getPrototypeOf(RegExp.prototype) === Object.prototype)  //true
out(Object.getPrototypeOf(Number.prototype) === Object.prototype)  //true
out(Object.getPrototypeOf(Boolean.prototype) === Object.prototype) //true
out(Object.getPrototypeOf(String.prototype) === Object.prototype)  //true
out(Object.getPrototypeOf(Array.prototype) === Object.prototype)   //true
out(Object.getPrototypeOf(Error.prototype) === Object.prototype)   //true
out(Object.getPrototypeOf(Function.prototype) === Object.prototype)   //true
</code></pre>
<p>可以看到这些类型的 prototype 属性的 <code>[[Protitype]]</code> 指向的是 Object.prototype 故至此，所有对象包括类型对象亦或类型实例化出来的对象都有使用挂载在 Object.prototype 上的资源的权利。</p>
<p>到这里所有对象之间的关系就已经清除了，相信已经有不少人已经晕乎了，没关系 我准备了图(看不太清晰是因为上传后被压缩了，下图 object.__proto__ 处有个错误找时间更新)：</p>
<p><img src="/assets/841025530-5766b5683f4b6_articlex.png" alt="clipboard.png"></p>
<p>当然这里我还是省略了部分细节 譬如对应类型的 prototype 属性对象均有 constructor 属性指向该类型，以及省略部分类型。</p>
<p>对着这张图重新看一遍本文和文章开头的摸底，相信你会有收获。</p>
<p>那么为什么使用 typeof 获取 Object.prototype 会返回 object 呢。</p>
<p>我们知道浏览器底层对 JS 的实现的是基于 C/C++
通过上图，我们可以猜测</p>
<h2 id="js-">浏览器在初始化JS 环境时都发生了些什么（存在争议，不一定正确）</h2>
<ol>
<li>用 C/C++ 构造内部数据结构创建一个 OP 即(Object.prototype)以及初始化其内部属性但不包括行为。</li>
<li>用 C/C++ 构造内部数据结构创建一个 FP 即(Function.prototype)以及初始化其内部属性但不包括行为。</li>
<li>将 FP 的 [[Prototype]] 指向 OP。</li>
<li>用 C/C++ 构造内部数据结构创建各种内置引用类型。</li>
<li>将各内置引用类型的 [[Prototype]] 指向 FP。</li>
<li>将 Function 的 prototype 指向 FP。</li>
<li>将 Object 的 prototype 指向 OP。</li>
<li>用 Function 实例化出 OP，FP，以及 Object 的行为并挂载。</li>
<li>用 Object 实例化出除 Object 以及 Function 的其他内置引用类型的 prototype 属性对象。</li>
<li>用 Function 实例化出除Object 以及 Function 的其他内置引用类型的 prototype 属性对象的行为并挂载。</li>
<li>实例化内置对象 Math 以及 Grobal
至此，所有 内置类型构建完成。</li>
</ol>
<p>现在我们可以回答为什么使用 typeof 获取 Object.prototype 会返回 object 了。
因为我们在使用 typeof 的时候得到的 object 类型并不完全代表是 Object 类型实例化出来的对象，有可能是底层实现的内部数据结构，包括 null。真正想知道这个类型还是需要去到当前该类的内部 <code>[[Class]]</code>属性，至于如何获取可以使用 Object 的 toString 方法。</p>
<p>最后的最后，你还对是现有 Function 还是现有 Object 有想法了吗？</p>
<p>以上均为个人查阅及实践总结的观点。</p>
<p>谢谢~</p>
]]></content>
		</item>
		
		<item>
			<title>被小看的小巨人 - viewport</title>
			<link>https://tangzixiang.github.io/posts/2019/%E8%A2%AB%E5%B0%8F%E7%9C%8B%E7%9A%84%E5%B0%8F%E5%B7%A8%E4%BA%BA-viewport/</link>
			<pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E8%A2%AB%E5%B0%8F%E7%9C%8B%E7%9A%84%E5%B0%8F%E5%B7%A8%E4%BA%BA-viewport/</guid>
			<description>viewport浅入 相信所有的 web 开发者都见过亦或用过这个神奇的 meta 标签头，亦或在不明白或者半明半蒙的情况下就用上了。
先来解个疑惑 ，上图
chrome 的手持设备模拟器相信大家再熟悉不过了，那么左上角的320*480是神马 ？应该很多人已经在心里有了个答案。 在解开这个疑惑之前 需要引入一个概念：
 A pixel is not a pixel is not a pixel
 引用 W3cplus 此像素非彼像素中的一句话
是的，想说明的就是这里的320*480指的是你的设备的 dpx 而非 CSS 中的 px
至于有什么区别呢？ 当然有区别！：
 设备的 px 是指度量设备大小尺寸的一种单位，而我们常在web 应用中使用的 px 是针对Web 应用开发用来度量应用程序中元素的相对尺寸，是一种抽象的概念和前面的设备像素是不搭噶的两种存在。
 那么为什么当我们使用的 css 中的 px 来设计页面的时候 使用与设备上的的宽度一致时能够得到良好的视觉效应呢，且听我慢慢道来。
我们先看下 关于 viewport 的 相关声明语法
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;name=value,name=value&amp;quot;&amp;gt; 首先引用下 ppk 文章中的英文解释(网络上大部分的出处出自此)：
Directives Every name/value pair is a directive. (The word is my own invention.</description>
			<content type="html"><![CDATA[<h2 id="viewport">viewport浅入</h2>
<p>相信所有的 web 开发者都见过亦或用过这个神奇的 meta 标签头，亦或在不明白或者半明半蒙的情况下就用上了。</p>
<p>先来解个疑惑 ，上图</p>
<p><img src="/assets/2744837098-5726bf841269e_articlex.png" alt=""></p>
<p>chrome 的手持设备模拟器相信大家再熟悉不过了，那么左上角的320*480是神马 ？应该很多人已经在心里有了个答案。
在解开这个疑惑之前 需要引入一个概念：</p>
<blockquote>
<p>A pixel is not a pixel is not a pixel</p>
</blockquote>
<p>引用 <a href="http://www.w3cplus.com/css/A-pixel-is-not-a-pixel-is-not-a-pixel.html">W3cplus 此像素非彼像素</a>中的一句话</p>
<p><img src="/assets/1851282934-5726c2a90f366_articlex.png" alt=""></p>
<p>是的，想说明的就是这里的320*480指的是你的设备的 dpx 而非 CSS 中的 px</p>
<p>至于有什么区别呢？
当然有区别！：</p>
<blockquote>
<p>设备的 px 是指度量设备大小尺寸的一种单位，而我们常在web 应用中使用的 px 是针对Web 应用开发用来度量应用程序中元素的相对尺寸，是一种抽象的概念和前面的设备像素是不搭噶的两种存在。</p>
</blockquote>
<p>那么为什么当我们使用的 css 中的 px 来设计页面的时候 使用与设备上的的宽度一致时能够得到良好的视觉效应呢，且听我慢慢道来。</p>
<p>我们先看下 关于 viewport 的 相关声明语法</p>
<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;name=value,name=value&quot;&gt;
</code></pre><p>首先引用下 <a href="http://www.quirksmode.org/mobile/metaviewport/#t01">ppk</a> 文章中的英文解释(网络上大部分的出处出自此)：</p>
<p>Directives
Every name/value pair is a directive. (The word is my own invention.)
There are six of them in total:</p>
<ul>
<li>width  Sets the width of the layout viewport.</li>
<li>initial-scale  Sets the initial zoom of the page AND the width of the layout viewport.</li>
<li>minimum-scale Sets the minimum zoom level (i.e. how much the user can zoom out).</li>
<li>maximum-scale Sets the maximum zoom level (i.e. how much the user can zoom in).</li>
<li>height Is supposed to set the height of the layout viewport. It is not supported anywhere.</li>
<li>user-scalable When set to no prevents the user from zooming. This is an abomination that MUST NOT be used.</li>
</ul>
<p>看不明白？好吧我来翻译一把（翻译的有点强硬别见怪）：</p>
<p>指令
每对键值对都是一个指令，（ppk 大神的叫法）以下总计共有6对：</p>
<ul>
<li>width 设置 layout viewport 的宽度（css px）</li>
<li>initial-scale  设置页面的初始缩放比例同时可以设置 layout viewport 的宽度</li>
<li>minimum-scale 设置最小缩放比例（指用户能够缩小到多小）</li>
<li>maximum-scale 设置最大缩放比例（指用户能够放大到多大）</li>
<li>height 设置 layout viewport 的高度，但暂时不怎么被支持</li>
<li>user-scalable 设置是否允许用户放大缩小。ppk 指出这个属性很邪恶，最好别用（偷笑）</li>
</ul>
<p>看到这里或许又蒙了一半 layout viewport是什么鬼？</p>
<p>ppk 大神的意思是想象下在我们设置 viewport 后，浏览器能够生成3种 viewport 分别对应 <strong>visual viewport</strong> 、 <strong>layout viewport</strong> 和 <strong>ideal viewport</strong>。</p>
<p>这里我不打算掺杂过多的这些理论，只想要简单明了的方式解释（忽悠）出 使用 viewport 会发生什么事，如果对 ppk 大神的这些理论感兴趣可以 go here</p>
<ol>
<li><a href="http://www.quirksmode.org/mobile/viewports.html">A tale of two viewports — part one</a></li>
<li><a href="http://www.quirksmode.org/mobile/viewports2.html">A tale of two viewports — part two</a></li>
<li><a href="http://www.quirksmode.org/mobile/metaviewport/#t01">Meta viewport</a></li>
</ol>
<p>大概的了解到 viewport 的语法后接下来就是案例讲解</p>
<p>当不使用 viewport 时我们为 pc 设计的网站在手持设备上是怎么样的</p>
<p>这里拿百度的 pc 版做例子（因为 pc 版没有 viewport）首先在非模拟器状态下打开百度然后切换到模拟器状态下</p>
<p><img src="/assets/2255243104-5726d12b88004_articlex.jpeg" alt=""></p>
<p>我们可以看到的是整个 pc 版的页面被压缩到宽度仅有 320px（非 css 单位）的设备中 ，正常人都没办法使用吧？
那么，这个时候这个页面的宽度是多少呢（css px）？</p>
<p><img src="/assets/161361549-5727e840a6b53_articlex.jpeg" alt=""></p>
<p>我们选中 html 元素，查看右下角的盒子样式 可以明确的看到当前的页面宽度是 980px（css px）</p>
<p>也就是说浏览器在只有 320dpx 的情况下展示了980px 的页面（明显可以看出这里的 dpx 与 px 并不是1：1的关系）</p>
<p>但是我们从左下角的样式表内并没有看到 html 的 width，那么这个 html 的 980px 宽是哪来的呢</p>
<p>答案是来自 viewport 的！ 别忘记了上面的 viewport 语法，也就是说 viewport 设置了宽度为 980px，但是前面不是说了这个例子使用的是百度的 pc 端的页面没有 viewport 吗？</p>
<p>那由哪来的 viewport 设置宽度呢 ，看到这里相信已经有人有答案了，没错当你没有设置 viewport 的时候浏览器会自动为你采用默认值 那么默认值是多少？</p>
<p>这里找来 ppk 的测试
<img src="/assets/671989192-5726d470439a2_articlex.jpeg" alt="图片描述"></p>
<p>什么意思呢 其实意思就是在默认的情况下（针对手持端）如果你没有设置过 viewport 那么我浏览器就会根据我自个设备决定采用 viewport 宽度是多少。</p>
<p>知道了这些还不够 ，那么为什么我有了 viewport 设置宽度之后 html 就会采用其宽度呢 ：</p>
<blockquote>
<p>可以这么理解，viewport 是一种超越 html 元素的存在，当没有为 html 设置宽度的时候，html 的宽度继承于 viewport 设置的宽度</p>
</blockquote>
<p>就拿 w3cplus 举个例子：</p>
<p><img src="/assets/448400386-5727e929d87dc_articlex.jpeg" alt="图片描述"></p>
<p>和上面的一样拿 pc 版测试，默认没有 viewport 查看 html 宽度果然为 980px</p>
<p>接下来为 html 元素设置宽度为 50% 可以看到效果 其宽度值为 490px</p>
<p><img src="/assets/772147236-5727e9d50e2ff_articlex.jpeg" alt="图片描述"></p>
<p>到这里我们可以得出一个总结：</p>
<blockquote>
<p>viewport 其实就是设置在当前设备的宽度下展示多少 CSS px 的网页内容</p>
</blockquote>
<p>上一个例子我们已经看到当 html 文档的宽度小于 viewport 的宽度是会有什么样的效果，那么反过来如果设置 html 的宽度大于 viewport 又会是什么效果呢</p>
<p><img src="/assets/1806395392-5727ea198b734_articlex.jpeg" alt="图片描述"></p>
<p>这里设置 html 的宽度为 2000px 可以看出页面出现了滚动效果。</p>
<p>这里又得出一个总结：</p>
<blockquote>
<p>当 html 文档的宽度小于 viewport 的宽度时以文档的实际宽度为准，文档小于 viewport 宽度的部分不显示内容，当 html 文档的宽度大于 viewport 的时候，你能看到的区域依然是 viewport 的大小区域，不过你可以通过滑动或滚动页面来查看大于 viewport 区域的内容</p>
</blockquote>
<p>至此我们已经知道了设备宽度与 viewport 的宽度以及实际文档的宽度之间的关系。</p>
<p>通过上述的例子我们知道基本上 viewport 的默认宽度是 980px，且浏览器会将者 viewport 大小的 html 文档塞进有限的设备宽度内（浏览器会动态计算文档的布局及内容），所以我们看到的东西都很小。
那么我们想要清除的看清文档内的内容怎么办 ，没错，缩小 viewport 的大小，什么原理？
当我们缩小 viewport 的宽度的时候文档的宽度也对应的被缩小，即一样的设备宽度，我显示的东西少了（这时候浏览器重新计算文档布局及内容）可以看到的结果是字体被放大了，内容都被放大了！</p>
<p>这里还是拿 W3CPlus的网站做例子：一样的拿 pc 版的无 viewport 的文档放入手持设备内，没办法看清内容</p>
<p><img src="/assets/935707141-5727ea8e029b8_articlex.jpeg" alt="图片描述"></p>
<p>这时候我在控制台输入这么一段代码：</p>
<pre><code>document.head.insertAdjacentHTML('afterbegin','&lt;meta name=&quot;viewport&quot; content=&quot;width=320&quot;&gt;');
</code></pre>
<p><img src="/assets/678236219-5727eab2547f7_articlex.png" alt="图片描述"></p>
<p>这时候是不是清晰很多呢~。</p>
<p>知道了这个原理，那我们要把 viewport 的大小缩小到多小比较合适呢 ？答案是和你的设备宽度一样宽。但是并不是每个手持设备都是 320dpx 宽啊，这时候我们可以这样写 viewport 头：</p>
<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;
</code></pre>
<p>这样就会自动计算你的设备宽度了，此处应该有掌声~</p>
<p>但是这个时候并未结束，是的 ，当你把你原先的 980 宽的页面重置成了 320 宽 那页面布局当然就发生变化了，惨的，无法入目，这时候就得考验大家的 css 功底了，如何避免不在此文章讨论范围内。</p>
<h2 id="heading">扩展思考</h2>
<ol>
<li>当我们在手持设备上放大缩小页面的时候，发生了什么？</li>
<li>设备的宽度与分辨率的关系？为什么我们在做 iphone 图的时候 640 但到了页面只能为 320？</li>
</ol>
<p>解释：</p>
<ol>
<li>
<p>当我们在手持设备上放大的时候，设备的大小不变（废话），viewport 的大小不变， html 的大小不变，那变的是什么？
我们知道当我们设置了 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code> 页面的宽度是与设备的宽度一致的达到1：1的关系
其实变得是你的可视区域 也就是 ppk 大神说的 visual viewport，抛开他的理论，简单的理解就是你当你触发放大的是个动作时，页面的每一 css px 宽度对应了多个设备的像素宽度（这里暂时不谈分辨率），所以你能看到元素被放大了，但是由于设备的宽度有限，所以你看到的内容也就少了，而 viewport 在我们一旦设置好后没有手动修改的话是不会发生变化的包括这里。
故缩小引发的原理一样。</p>
</li>
<li>
<p>设备的宽度的 px 和分辨率的关系？
在没有视网膜屏幕出现前 除了些高清屏幕外，大部分的手持设备的宽度与分辨率像素是一对一的关系，直到视网膜屏幕的出现打破了这个格局，出现一个设备宽度对应 2 个或很多的分辨率像素，引发什么结果？当然是更清晰了，因为用了更多的像素去表达相同的一个设备宽度像素的内容。更多细节探讨可以自行 <a href="http://www.baidu.com">度娘</a> 更多。</p>
</li>
</ol>
<p>了解了设备宽度与分辨率的关系之后 解释下图片与分辨率的关系，通常图片的像素是与分辨率对应的，故设计师在 ps 上用 640 分辨率设计图片的时候起始也是对应我们的设备宽度 320（前面解释到视网膜屏幕一个设备像素会对应 2 个到多个分辨率像素），设计出来的图片同理。当然你把设计出来的 640 分辨率像素的图片放在一样是 320 宽度像素下的视网膜设备和非视网膜设备下的效果看起来差不多其实仔细看还是有差别的即是否更高清的差别（可以拿安卓和 ios对比）。</p>
<p>弄清楚了 viewport 这个小巨人后我们还得知道如何通过 js 代码来获取设备的宽度、viewport 的宽度以及 html 文档的宽度</p>
<p>总结如下（不包括 IE 及其他特殊情况）：</p>
<pre><code>/*
*1.获取包含滚动条尺寸的浏览器完整内部尺寸
*2.获取用户实际的看到的视口大小（即发送缩放后的可视区域大小 visual viewport 大小）默认等于 viewport 大小
*/
window.innerHeight
window.innerWidth 

/*
*1.设置的viewport大小
*/
document.documentElement.clientHeight
document.documentElement.clientWidth

/*
*1.HTML 文档大小
*/
document.documentElement.offsetHeight
document.documentElement.offsetWidth

/*
*1.设备大小
*/
screen.Height
screen.width
</code></pre>
<p>网上有大量的关于 viewport 的讨论，不乏各种大神的讲解，各有千秋。
以上只为个人多日查阅实践及总结，仅作参考！
多谢！</p>
]]></content>
		</item>
		
		<item>
			<title>[CSS] 浅谈 CSS 清除浮动的 6 种方法</title>
			<link>https://tangzixiang.github.io/posts/2019/%E6%B5%85%E8%B0%88-css-%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84-6-%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
			<pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E6%B5%85%E8%B0%88-css-%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84-6-%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
			<description>摘要  额外标签法 使用:after 伪元素 给父元素定高 利用overflow:hidden;属性 父元素浮动 父元素处于绝对定位  在开发网页的时候经常需要用到各种浮动，此时便需要及时的清除浮动，否则将会导致布局出现问题
引出问题：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .outer{ border: 1px solid black; width:300px; } .inner{ width: 50px; height: 50px; background-color: #ff4400; margin-right: 20px; float: left; } .footer{ background-color: #005FC3; width: 200px; height: 100px; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;quot;outer&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;inner&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;inner&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;inner&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 可以看出本应包住3个 inner DIV的 outer DIV 却没有包住他们，此刻只剩一条由上下边框贴合组成的线，同时 footer DIV元素也跑到了三个浮动元素的底下</description>
			<content type="html"><![CDATA[<h2 id="heading">摘要</h2>
<ol>
<li>额外标签法</li>
<li>使用:after 伪元素</li>
<li>给父元素定高</li>
<li>利用overflow:hidden;属性</li>
<li>父元素浮动</li>
<li>父元素处于绝对定位</li>
</ol>
<p>在开发网页的时候经常需要用到各种浮动，此时便需要及时的清除浮动，否则将会导致布局出现问题</p>
<p>引出问题：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;style&gt;
        .outer{
            border: 1px solid black;
            width:300px;
        }
        .inner{
            width: 50px;
            height: 50px;
            background-color: #ff4400;
            margin-right: 20px;
            float: left;
        }
        .footer{
            background-color: #005FC3;
            width: 200px;
            height: 100px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;outer&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><img src="/assets/2260342482-5635c8e886237_articlex.png" alt="图片描述"></p>
<p>可以看出本应包住3个 inner DIV的 outer DIV 却没有包住他们，此刻只剩一条由上下边框贴合组成的线，同时 footer DIV元素也跑到了三个浮动元素的底下</p>
<p>解决办法：</p>
<h3 id="1-">1. 使用额外标签法</h3>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;style&gt;
        .outer{
            border: 1px solid black;
            width: 300px;
        }
        .inner{
            width: 50px;
            height: 50px;
            background-color: #ff4400;
            margin-right: 20px;
            float: left;
        }
        .footer{
            background-color: #005FC3;
            width: 200px;
            height: 100px;
        }
        .clearfix{
            clear: both;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;outer&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><img src="/assets/77786389-5635c8f718208_articlex.png" alt="图片描述"></p>
<p>这是早期普遍使用的方法，但是对于有代码洁癖的人来说，解决的不够完美</p>
<h3 id="2--after-">2. 使用 :after 为元素</h3>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;style&gt;
        .outer{
            border: 1px solid black;
            width: 300px;
        }
        .inner{
            width: 50px;
            height: 50px;
            background-color: #ff4400;
            margin-right: 20px;
            float: left;
        }
        .footer{
            background-color: #005FC3;
            width: 200px;
            height: 100px;
        }
        .clearfix:after{  /*最简方式*/
            content: '';
            display: block;
            clear: both;
        }
        /* 新浪使用方式
        .clearfix:after{ 
            content: '';
            display: block;
            clear: both;
            height: 0;
            visibility: hidden;
        }
        */
        .clearfix{ /*兼容 IE*/
            zoom: 1;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;outer clearfix&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><img src="/assets/77786389-5635c8f718208_articlex.png" alt="图片描述"></p>
<h3 id="3-">3. 给父元素定高</h3>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;style&gt;
        .outer{
            border: 1px solid black;
            width: 300px;
            height: 50px;
        }
        .inner{
            width: 50px;
            height: 50px;
            background-color: #ff4400;
            margin-right: 20px;
            float: left;
        }
        .footer{
            background-color: #005FC3;
            width: 200px;
            height: 100px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;outer&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><img src="/assets/77786389-5635c8f718208_articlex.png" alt="图片描述"></p>
<h3 id="4--overflowhidden-">4. 利用 overflow:hidden 属性</h3>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;style&gt;
        .outer{
            border: 1px solid black;
            width: 300px;
            overflow: hidden;
            zoom: 1;/*兼容 IE*/
        }
        .inner{
            width: 50px;
            height: 50px;
            background-color: #ff4400;
            margin-right: 20px;
            float: left;
        }
        .footer{
            background-color: #005FC3;
            width: 200px;
            height: 100px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;outer&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><img src="/assets/77786389-5635c8f718208_articlex.png" alt="图片描述"></p>
<h3 id="5-">5. 父元素浮动</h3>
<p>当父元素浮动的时候，无需为子元素的浮动清除浮动,布局时经常用到</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;style&gt;
        .outer{
            border: 1px solid black;
            width: 300px;
            float: left;
        }
        .inner{
            width: 50px;
            height: 50px;
            background-color: #ff4400;
            margin-right: 20px;
            float: left;
        }
        .footer{
            background-color: #005FC3;
            width: 200px;
            height: 100px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;outer&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><img src="/assets/371411215-5635cbf5dabfb_articlex.png" alt="图片描述"></p>
<p>可以看出虽然 outer DIV 消除了塌陷现象，但由于其也发生了浮动故，其后元素若处于正常文档流，会被跌在底下。</p>
<p>如果要解决可以参考前面的办法。</p>
<p>例如：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;style&gt;
        .outer{
            border: 1px solid black;
            width: 300px;
            float: left;
        }
        .inner{
            width: 50px;
            height: 50px;
            background-color: #ff4400;
            margin-right: 20px;
            float: left;
        }
        .footer{
            background-color: #005FC3;
            width: 200px;
            height: 100px;
        }
        .clearfix:after{
            content: &quot;&quot;;
            display: block;
            clear: both;
        }
        .clearfix{
            zoom: 1;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;outer&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><img src="/assets/77786389-5635c8f718208_articlex.png" alt="图片描述"></p>
<h3 id="6-">6. 父元素处于绝对定位</h3>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;style&gt;
        .outer{
            border: 1px solid black;
            width: 300px;
            position: absolute;
        }
        .inner{
            width: 50px;
            height: 50px;
            background-color: #ff4400;
            margin-right: 20px;
            float: left;
        }
        .footer{
            background-color: #005FC3;
            width: 200px;
            height: 100px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;outer&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><img src="/assets/371411215-5635cbf5dabfb_articlex.png" alt="图片描述"></p>
<p>与上一个方法同理，由于绝对定位已脱离正常文档流，故出现相同情况，解决办法依旧可以使用以上办法结合，灵活多变。</p>
]]></content>
		</item>
		
		<item>
			<title> [JS] 浅谈 JS 对象添加 getter与 setter 的5种方法以及如何让对象属性不可配置或枚举</title>
			<link>https://tangzixiang.github.io/posts/2019/%E6%B5%85%E8%B0%88-js-%E5%AF%B9%E8%B1%A1%E6%B7%BB%E5%8A%A0-getter%E4%B8%8E-setter-%E7%9A%845%E7%A7%8D%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%AE%A9%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8D%E5%8F%AF%E9%85%8D%E7%BD%AE%E6%88%96%E6%9E%9A%E4%B8%BE/</link>
			<pubDate>Thu, 22 Oct 2015 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E6%B5%85%E8%B0%88-js-%E5%AF%B9%E8%B1%A1%E6%B7%BB%E5%8A%A0-getter%E4%B8%8E-setter-%E7%9A%845%E7%A7%8D%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%AE%A9%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8D%E5%8F%AF%E9%85%8D%E7%BD%AE%E6%88%96%E6%9E%9A%E4%B8%BE/</guid>
			<description>摘要  定义 getter 与 setter  通过对象初始化器定义 使用 Object.create 方法 使用 Object.defineProperty 方法 使用 Object.defineProperties 方法 使用 Object.prototype.defineGetter 以及 Object.prototype.defineSetter 方法   什么是属性描述符 创建属性不可配置不可枚举的对象 Enumerable 特性 Configurable 特新 提高及扩展  定义 getter 与 setter  通过对象初始化器在创建对象的时候指明（也可以称为通过字面值创建对象时声明）  (function () { var o = { a : 7, get b(){return this.a +1;},//通过 get,set的 b,c方法间接性修改 a 属性  set c(x){this.a = x/2} }; console.log(o.a); console.log(o.b); o.c = 50; console.log(o.a); })(); 在 chrome 中调试视图如下： 可以看到对象下多了 get 属性以及 set 属性 输出结果如下： 当然 get 语句与 set 语句可以声明多次用来对应多个 getter 和 setter 使用这种方法的好处是可以在声明属性的时候同时声明对应的 getter 和 setter 这里就有人问了，能不能将o 对象的 get 及 set 方法的方法名都改成 “a”,这样就可以直接通过“.</description>
			<content type="html"><![CDATA[<h2 id="heading">摘要</h2>
<ol>
<li>定义 getter 与 setter
<ul>
<li>通过对象初始化器定义</li>
<li>使用 Object.create 方法</li>
<li>使用 Object.defineProperty 方法</li>
<li>使用 Object.defineProperties 方法</li>
<li>使用 Object.prototype.<strong>defineGetter</strong> 以及 Object.prototype.<strong>defineSetter</strong> 方法</li>
</ul>
</li>
<li>什么是属性描述符</li>
<li>创建属性不可配置不可枚举的对象</li>
<li>Enumerable 特性</li>
<li>Configurable 特新</li>
<li>提高及扩展</li>
</ol>
<h2 id="-getter--setter"><strong>定义 getter 与 setter</strong></h2>
<ol>
<li>通过对象初始化器在创建对象的时候指明（也可以称为通过字面值创建对象时声明）</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">a</span> <span class="o">:</span> <span class="mi">7</span><span class="p">,</span>
        <span class="nx">get</span> <span class="nx">b</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="p">}</span><span class="p">,</span><span class="c1">//通过 get,set的 b,c方法间接性修改 a 属性
</span><span class="c1"></span>        <span class="nx">set</span> <span class="nx">c</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">x</span><span class="o">/</span><span class="mi">2</span><span class="p">}</span>
    <span class="p">}</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">c</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>在 chrome 中调试视图如下：
<img src="/assets/3879098324-56258ea314d0b_articlex.png" alt="图片描述"></p>
<p>可以看到对象下多了 <code>get</code> 属性以及 <code>set</code> 属性
输出结果如下：
<img src="/assets/1446235180-56258f5aee1fd_articlex.png" alt="图片描述"></p>
<p>当然 <code>get</code> 语句与 <code>set</code> 语句可以声明多次用来对应多个 <code>getter</code> 和 <code>setter</code>
使用这种方法的好处是可以在声明属性的时候同时声明对应的 <code>getter</code> 和 <code>setter</code>
这里就有人问了，能不能将o 对象的 <code>get</code> 及 <code>set</code> 方法的方法名都改成 “a”,这样就可以直接通过“.”来访问方法直接操作</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">a</span> <span class="o">:</span> <span class="mi">7</span><span class="p">,</span>
        <span class="nx">get</span> <span class="nx">a</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="p">}</span><span class="p">,</span><span class="c1">//死循环
</span><span class="c1"></span>        <span class="nx">set</span> <span class="nx">a</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">x</span><span class="o">/</span><span class="mi">2</span><span class="p">}</span>
    <span class="p">}</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">c</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>打开 chrome 查看创建后的视图如下：
<img src="/assets/2869058813-56259df6074c6_articlex.png" alt="图片描述"></p>
<p>可以看到这个时候的 <code>get</code> 与 <code>set</code> 方法已经和上面不同，但是是否真的能起作用呢，答案是否定的，当我们通过 <code>o.a</code> 调用的是 <code>get</code>语句 声明的 a方法，进入到该方法后遇到 <code>this.a</code> 方法继续调用该方法形成死循环最终导致死循环报内存溢出错误。</p>
<p>新语法(ES6)：暂时只有 firefox 支持，其他浏览器会报错</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="s2">&#34;bb&#34;</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="s2">&#34;cc&#34;</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">a</span> <span class="o">:</span> <span class="mi">7</span><span class="p">,</span>
        <span class="nx">get</span> <span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="p">}</span><span class="p">,</span>
        <span class="nx">set</span> <span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">x</span><span class="o">/</span><span class="mi">2</span><span class="p">}</span><span class="p">,</span>
    <span class="p">}</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">[</span><span class="s2">&#34;cc&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>打开 firefox 查看调试：
<img src="/assets/931710743-5625b96cc1690_articlex.png" alt="图片描述"></p>
<p>输出结果如下：
<img src="/assets/1770225854-5625b9869b848_articlex.png" alt="图片描述"></p>
<ol start="2">
<li>使用 <code>Object.create</code> 方法</li>
</ol>
<p>引用 MDN：
概述
Object.create() 方法创建一个拥有指定原型和若干个指定属性的对象。</p>
<pre><code>语法
    Object.create(proto, [ propertiesObject ])
</code></pre>
<p>我们都知道使用 <code>Object.create</code> 方法传递一个参数的时候可以创建一个以该参数为原型的对象 <a href="../%E6%B5%85%E8%B0%88-js-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84-8-%E7%A7%8D%E6%A8%A1%E5%BC%8F">浅谈 JS 创建对象的 8 种模式</a>
第二个参数是可选项，是一个匿名的参数对象，该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（包扩数据描述符或存取描述符，具体解释看后面的内容 什么是属性描述符）。
通过属性描述符我们可以实现为新创建的对象添加 <code>get</code> 方法以及 <code>set</code> 方法</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="nx">o</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="c1">//指定原型为 Object.prototype
</span><span class="c1"></span>            <span class="p">{</span>
                <span class="nx">bar</span><span class="o">:</span><span class="p">{</span>
                    <span class="nx">get</span> <span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
                        <span class="k">return</span> <span class="mi">10</span><span class="p">;</span>
                    <span class="p">}</span><span class="p">,</span>
                    <span class="nx">set</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Setting `o.bar` to &#34;</span><span class="p">,</span><span class="nx">val</span><span class="p">)</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span><span class="c1">//第二个参数
</span><span class="c1"></span>        <span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">bar</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>在 chrome 中调试试图如下：
<img src="/assets/3405566115-56259b01abddd_articlex.png" alt="图片描述"></p>
<p>可以看到新创建对象通用多了 <code>get</code> 以及 <code>set</code> 属性
输出结果如下：
<img src="/assets/3935310264-56259b7525251_articlex.png" alt="图片描述"></p>
<p>上面这个例子并没有用来针对的 get 方法以及 set 方法使用的属性</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="nx">o</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="c1">//指定原型为 Object.prototype
</span><span class="c1"></span>            <span class="p">{</span>
                <span class="nx">bar</span><span class="o">:</span><span class="p">{</span>
                    <span class="nx">get</span> <span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
                        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span>
                    <span class="p">}</span><span class="p">,</span>
                    <span class="nx">set</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Setting `o.bar` to &#34;</span><span class="p">,</span><span class="nx">val</span><span class="p">)</span><span class="p">;</span>
                        <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
                    <span class="p">}</span><span class="p">,</span>
                    <span class="nx">configurable</span> <span class="o">:</span><span class="kc">true</span>
                <span class="p">}</span>
            <span class="p">}</span><span class="c1">//第二个参数
</span><span class="c1"></span>        <span class="p">)</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">bar</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">bar</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>亦或：</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="mi">10</span><span class="p">}</span><span class="p">;</span>
    <span class="nx">o</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="c1">//指定原型为 o 这里实际可以理解为继承
</span><span class="c1"></span>            <span class="p">{</span>
                <span class="nx">bar</span><span class="o">:</span><span class="p">{</span>
                    <span class="nx">get</span> <span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
                        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span>
                    <span class="p">}</span><span class="p">,</span>
                    <span class="nx">set</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Setting `o.bar` to &#34;</span><span class="p">,</span><span class="nx">val</span><span class="p">)</span><span class="p">;</span>
                        <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
                    <span class="p">}</span><span class="p">,</span>
                    <span class="nx">configurable</span> <span class="o">:</span><span class="kc">true</span>
                <span class="p">}</span>
            <span class="p">}</span><span class="c1">//第二个参数
</span><span class="c1"></span>        <span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">bar</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">bar</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>输出结果如下：
<img src="/assets/236531464-5625b44234a35_articlex.png" alt="图片描述"></p>
<p>使用这种方式的好处是可配置性高，但初学者容易迷糊。</p>
<ol start="3">
<li>使用 <code>Object.defineProperty</code> 方法</li>
</ol>
<p>引用 MDN：</p>
<pre><code>概要
    Object.defineProperty() 方法直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。
语法
    Object.defineProperty(obj, prop, descriptor)
参数
    obj
        需要定义属性的对象。
    prop
        需被定义或修改的属性名。
    descriptor
        需被定义或修改的属性的描述符。
</code></pre>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span> <span class="o">:</span> <span class="mi">1</span><span class="p">}</span><span class="c1">//声明一个对象,包含一个 a 属性,值为1
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;b&#34;</span><span class="p">,</span><span class="p">{</span>
        <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span>
        <span class="p">}</span><span class="p">,</span>
        <span class="nx">set</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
        <span class="p">}</span><span class="p">,</span>
        <span class="nx">configurable</span> <span class="o">:</span> <span class="kc">true</span>
    <span class="p">}</span><span class="p">)</span><span class="p">;</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>这个方法与前面两种的区别是：使用前面两种只能在声明定义的时候指定 <code>getter</code> 与 <code>setter</code>，使用该方法可以随时的添加或修改。</p>
<p>如果说需要一次性批量添加 getter 与 setter 也是没问题的，使用如下方法：</p>
<ol start="4">
<li>使用 <code>Object.defineProperties</code>方法</li>
</ol>
<p>MDN：</p>
<pre><code>概述
    Object.defineProperties() 方法在一个对象上添加或修改一个或者多个自有属性，并返回该对象。
语法
    Object.defineProperties(obj, props)
参数
    obj
    将要被添加属性或修改属性的对象
    props
    该对象的一个或多个键值对定义了将要为对象添加或修改的属性的具体配置
</code></pre>
<p>不难看出用法与 <code>Object.defineProperty</code> 方法类似</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="o">:</span><span class="s2">&#34;string&#34;</span><span class="p">}</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperties</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="p">{</span>
        <span class="s2">&#34;A&#34;</span><span class="o">:</span><span class="p">{</span>
            <span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="p">}</span><span class="p">,</span>
            <span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span><span class="p">}</span>
        <span class="p">}</span><span class="p">,</span>
        <span class="s2">&#34;B&#34;</span><span class="o">:</span><span class="p">{</span>
            <span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="p">}</span><span class="p">,</span>
            <span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">val</span><span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="p">)</span><span class="p">;</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">A</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">A</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">B</span> <span class="o">=</span> <span class="s2">&#34;hello&#34;</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">A</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>输出结果如下：
<img src="/assets/3452679094-5625e23471227_articlex.png" alt="图片描述"></p>
<ol start="5">
<li>使用 <code>Object.prototype.__defineGetter__</code> 以及 <code>Object.prototype.__defineSetter__</code> 方法</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="mi">1</span><span class="p">}</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">__defineGetter__</span><span class="p">(</span><span class="s2">&#34;giveMeA&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span>
    <span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">__defineSetter__</span><span class="p">(</span><span class="s2">&#34;setMeNew&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">a</span>  <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
    <span class="p">}</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">giveMeA</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">setMeNew</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">giveMeA</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="nx">输出结果为1和2</span>
</code></pre></div><p>查看 MDN 有如下说明：
<img src="/assets/3252288910-5625e443f1e7d_articlex.png" alt="图片描述"></p>
<h2 id="heading1"><strong>什么是属性描述符</strong></h2>
<p>MDN：</p>
<pre><code>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。

1. 数据描述符是一个拥有可写或不可写值的属性。
2. 存取描述符是由一对 getter-setter 函数功能来描述的属性。
3. 描述符必须是两种形式之一；不能同时是两者。
</code></pre>
<p>数据描述符和存取描述符均具有以下可选键值：</p>
<pre><code>configurable
    当且仅当这个属性描述符值为 true 时，该属性可能会改变，也可能会被从相应的对象删除。默认为 false。
enumerable  
    true 当且仅当该属性出现在相应的对象枚举属性中。默认为 false。
</code></pre>
<p>数据描述符同时具有以下可选键值：</p>
<pre><code>value 
    与属性相关的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。
writable 
    true 当且仅当可能用 赋值运算符 改变与属性相关的值。默认为 false。
</code></pre>
<p>存取描述符同时具有以下可选键值：</p>
<pre><code>get 
    一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。方法将返回用作属性的值。默认为 undefined。
set
    一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。该方法将收到作为唯一参数的新值分配给属性。默认为 undefined。
</code></pre>
<p>以上是摘自MDN的解释，看起来是很晦涩的，具体什么意思呢：</p>
<p>首先我们从以上解释知道该匿名参数对象有个很好听的名字叫属性描述符，属性描述符又分成两大块：数据描述符以及存取描述符（其实只是一个外号，给指定的属性集合起个外号）。</p>
<p>数据描述符包括两个属性 : <code>value</code> 属性以及 <code>writable</code> 属性，第一个属性用来声明当前欲修饰的属性的值，第二个属性用来声明当前对象是否可写即是否可以修改</p>
<p>存取描述符就包括 <code>get</code> 与 <code>set</code> 属性用来声明欲修饰的象属性的 <code>getter</code> 及 <code>setter</code></p>
<p>属性描述符内部，数据描述符与存取描述符只能存在其中之一，但是不论使用哪个描述符都可以同时设置 <code>configurable</code> 属性以及<code>enumerable</code> 属性。
<code>configurable</code>属性用来声明欲修饰的属性是否能够<code>配置</code>，仅有当其值为 <code>true</code> 时，被修饰的属性才有可能能够被删除，或者重新配置。
<code>enumerable</code> 属性用来声明欲修饰属性是否可以被<code>枚举</code>。</p>
<p>知道了什么是属性描述符，我们就可以开始着手创建一些对象并开始<code>配置</code>其属性</p>
<h2 id="heading2"><strong>创建属性不可配置不可枚举的对象</strong></h2>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//使用默认值配置
</span><span class="c1"></span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="c1">//声明一个空对象
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="s2">&#34;key&#34;</span><span class="p">,</span><span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span><span class="s2">&#34;static&#34;</span>
                        <span class="c1">//没有设置 enumerable 使用默认值 false
</span><span class="c1"></span>                        <span class="c1">//没有 configurable 使用默认值 false
</span><span class="c1"></span>                        <span class="c1">//没有 writable 使用默认值 false
</span><span class="c1"></span>    <span class="p">}</span><span class="p">)</span><span class="p">;</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span><span class="p">;</span>           <span class="c1">//输出 “static”
</span><span class="c1"></span>    <span class="nx">obj</span><span class="p">.</span><span class="nx">key</span> <span class="o">=</span> <span class="s2">&#34;new&#34;</span>                 <span class="c1">//尝试修改其值,修改将失败,因为 writable 为 false
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span><span class="p">;</span>           <span class="c1">//输出 “static”
</span><span class="c1"></span>    <span class="nx">obj</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//动态添加一个属性
</span><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">item</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span><span class="p">{</span> <span class="c1">//遍历所有 obj 的可枚举属性
</span><span class="c1"></span>         <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span><span class="c1">//只输出一个 “a” 因为 “key”的 enumerable为 false
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//显示配置 等价于上面
</span><span class="c1"></span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="s2">&#34;key&#34;</span><span class="p">,</span><span class="p">{</span>
        <span class="nx">enumerable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="nx">configurable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="nx">writable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="nx">value</span> <span class="o">:</span> <span class="s2">&#34;static&#34;</span>
    <span class="p">}</span><span class="p">)</span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//等价配置
</span><span class="c1"></span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="c1">//等价于
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
                                <span class="nx">writable</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                                <span class="nx">configurable</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                                <span class="nx">enumerable</span> <span class="o">:</span> <span class="kc">true</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span><span class="mi">1</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="c1">//等价于
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
                                <span class="nx">writable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
                                <span class="nx">configurable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
                                <span class="nx">enumerable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><h2 id="enumerable-"><strong>Enumerable 特性</strong></h2>
<p>属性特性 <code>enumerable</code> 决定属性是否能被 <code>for...in</code> 循环或 <code>Object.keys</code> 方法遍历得到</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">enumerable</span> <span class="o">:</span><span class="kc">true</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;b&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">enumerable</span> <span class="o">:</span><span class="kc">false</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;c&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span><span class="mi">2</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="c1">//enumerable default to false
</span><span class="c1"></span>    <span class="nx">o</span><span class="p">.</span><span class="nx">d</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span><span class="c1">//如果直接赋值的方式创建对象的属性,则这个属性的 enumerable 为 true
</span><span class="c1"></span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">item</span> <span class="k">in</span> <span class="nx">o</span><span class="p">)</span><span class="p">{</span> <span class="c1">//遍历所有可枚举属性包括继承的属性
</span><span class="c1"></span>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="c1">//获取 o 对象的所有可遍历属性不包括继承的属性
</span><span class="c1"></span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">propertyIsEnumerable</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="c1">//true
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">propertyIsEnumerable</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="c1">//false
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">propertyIsEnumerable</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="c1">//false
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>输出结果如下：
<img src="/assets/1108293644-56261c8bb9eb0_articlex.png" alt="图片描述"></p>
<h2 id="configurable-"><strong>Configurable 特性</strong></h2>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="mi">1</span><span class="p">;</span><span class="p">}</span><span class="p">,</span>
                                <span class="nx">configurable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">}</span> <span class="p">)</span><span class="p">;</span>
                                <span class="c1">//enumerable 默认为 false,
</span><span class="c1"></span>                                <span class="c1">//value 默认为 undefined,
</span><span class="c1"></span>                                <span class="c1">//writable 默认为 false,
</span><span class="c1"></span>                                <span class="c1">//set 默认为 undefined
</span><span class="c1"></span>                                  
    <span class="c1">//抛出异常,因为最开始定义了 configurable 为 false,故后期无法对其进行再配置
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">configurable</span> <span class="o">:</span> <span class="kc">true</span><span class="p">}</span> <span class="p">)</span><span class="p">;</span>
    <span class="c1">//抛出异常,因为最开始定义了 configurable 为 false,故后期无法对其进行再配置,enumerable 的原值为 false
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">enumerable</span> <span class="o">:</span> <span class="kc">true</span><span class="p">}</span> <span class="p">)</span><span class="p">;</span>
    <span class="c1">//抛出异常,因为最开始定义了 configurable 为 false,set的原值为 undefined
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">set</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="p">}</span> <span class="p">)</span><span class="p">;</span>
    <span class="c1">//抛出异常,因为最开始定义了 configurable 为 false,故无法进行覆盖,尽管想用一样的来覆盖
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">get</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">1</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="c1">//抛出异常，因为最开始定义了 configurable 为 false,故无法将其进行重新配置把属性描述符从存取描述符改为数据描述符
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span> <span class="o">:</span> <span class="mi">12</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span><span class="c1">//输出1
</span><span class="c1"></span>    <span class="k">delete</span> <span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span>      <span class="c1">//想要删除属性,将失败
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span><span class="c1">//输出1
</span><span class="c1"></span>    
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><h2 id="heading3"><strong>提高及扩展</strong></h2>
<ol>
<li>属性描述符中容易被误导的地方之 <code>writable</code> 与 <code>configurable</code></li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperties</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="p">{</span>
        <span class="s2">&#34;a&#34;</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span>
            <span class="nx">writable</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="c1">//可写
</span><span class="c1"></span>            <span class="nx">configurable</span><span class="o">:</span><span class="kc">false</span><span class="c1">//不可配置
</span><span class="c1"></span>            <span class="c1">//enumerable 默认为 false 不可枚举
</span><span class="c1"></span>        <span class="p">}</span><span class="p">,</span>
        <span class="s2">&#34;b&#34;</span><span class="o">:</span><span class="p">{</span>
            <span class="nx">get</span> <span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span>
            <span class="p">}</span><span class="p">,</span>
            <span class="nx">configurable</span><span class="o">:</span><span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span>   <span class="c1">//1
</span><span class="c1"></span>    <span class="nx">o</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>            <span class="c1">//修改值成功,writable 为 true
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span>   <span class="c1">//2
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="mi">3</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="c1">//同样为修改值成功
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span>   <span class="c1">//3
</span><span class="c1"></span>
    <span class="c1">//将其属性 b 的属性描述符从存取描述符重新配置为数据描述符
</span><span class="c1"></span>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="s2">&#34;b&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="mi">3</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="c1">//抛出异常,因为 configurable 为 false
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><ol start="2">
<li>通过上面的学习，我们都知道传递属性描述符参数时，是定义一个匿名的对象，里面包含属性描述符内容，若每定义一次便要创建一个匿名对象传入，将会造成内存浪费。故优化如下：</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span>

    <span class="c1">//回收同一对象,即减少内存浪费
</span><span class="c1"></span>    <span class="kd">function</span> <span class="nx">withValue</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="p">{</span>
        <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">withValue</span><span class="p">.</span><span class="nx">d</span> <span class="o">||</span><span class="p">(</span>
            <span class="nx">withValue</span><span class="p">.</span><span class="nx">d</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">enumerable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
                <span class="nx">configurable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
                <span class="nx">writable</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
                <span class="nx">value</span> <span class="o">:</span><span class="kc">null</span>
            <span class="p">}</span>
            <span class="p">)</span><span class="p">;</span>
        <span class="nx">d</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">d</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="s2">&#34;key&#34;</span><span class="p">,</span><span class="nx">withValue</span><span class="p">(</span><span class="s2">&#34;static&#34;</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>[JS] 用9种办法解决 JS 闭包经典面试题之 for 循环取 i</title>
			<link>https://tangzixiang.github.io/posts/2019/%E7%94%A89%E7%A7%8D%E5%8A%9E%E6%B3%95%E8%A7%A3%E5%86%B3-js-%E9%97%AD%E5%8C%85%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B-for-%E5%BE%AA%E7%8E%AF%E5%8F%96-i/</link>
			<pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E7%94%A89%E7%A7%8D%E5%8A%9E%E6%B3%95%E8%A7%A3%E5%86%B3-js-%E9%97%AD%E5%8C%85%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B-for-%E5%BE%AA%E7%8E%AF%E5%8F%96-i/</guid>
			<description>文章历史久远，有时间再同步更新吧 ~~
闭包  正确的说,应该是指一个闭包域,每当声明了一个函数,它就产生了一个闭包域(可以解释为每个函数都有自己的函数栈),每个闭包域(Function 对象)都有一个 function scope(不是属性),function scope内默认有个名为 Global 的全局引用(有了这个引用,就可以直接调用 Global 的属性或方法) 凡是在闭包域内声明的变量或方法,外部无法直接访问 闭包域可以访问外部的变量或方法  (上图为 chrome 下 debug 环境)
 当在一个闭包域内包含另一个闭包域时(简单的说就是在一个函数内有另一个函数,当然这个内部函数的生命周期是依附于外部函数的), 此时,若子闭包域(内部的闭包域,内部函数)使用了父闭包域(外部闭包域,外部函数)的私有变量(在父闭包域中声明的变量,父闭包域的外部空间无法直接访问,但子闭包域可以访问),子闭包域即当前的子函数的 function scope 会产生一个 closure 对象属性,这个对象属性内包含的是子闭包域对父闭包域的所有引用(只要子闭包域(内部函数)还存活,其父闭包域(外部函数)就依旧存活),倘若在父闭包域存活期间对其私有变量内容进行修改,则对这些父闭包域的私有变量进行引用的子闭包域中 function scope 的 closure 对象属性的内容也会发生变化,因为这只是引用.
举例:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt; //函数 a 有一个私有变量 p 和一个内部函数 innerA  function a() { //外部闭包域 ,一个名为 a 的 Function 对象  var p = 0; //私有变量 p  var innerA = function () { //内部闭包域 ,一个名为 innerA 的 Function 对象  console.</description>
			<content type="html"><![CDATA[<p>文章历史久远，有时间再同步更新吧 ~~</p>
<h2 id="heading">闭包</h2>
<ol>
<li>正确的说,应该是指一个闭包域,每当声明了一个函数,它就产生了一个闭包域(可以解释为每个函数都有自己的函数栈),每个闭包域(Function 对象)都有一个 function scope(不是属性),function scope内默认有个名为 Global 的全局引用(有了这个引用,就可以直接调用 Global 的属性或方法)</li>
<li>凡是在闭包域内声明的变量或方法,外部无法直接访问</li>
<li>闭包域可以访问外部的变量或方法</li>
</ol>
<p><img src="/assets/527991831-5610b859dd3b8_articlex.png" alt="图片描述">
(上图为 chrome 下 debug 环境)</p>
<hr>
<p>当在一个闭包域内包含另一个闭包域时(简单的说就是在一个函数内有另一个函数,当然这个内部函数的生命周期是依附于外部函数的), 此时,若子闭包域(内部的闭包域,内部函数)使用了父闭包域(外部闭包域,外部函数)的私有变量(在父闭包域中声明的变量,父闭包域的外部空间无法直接访问,但子闭包域可以访问),子闭包域即当前的子函数的 function scope 会产生一个 closure 对象属性,这个对象属性内包含的是子闭包域对父闭包域的所有引用(只要子闭包域(内部函数)还存活,其父闭包域(外部函数)就依旧存活),倘若在父闭包域存活期间对其私有变量内容进行修改,则对这些父闭包域的私有变量进行引用的子闭包域中 function scope 的 closure 对象属性的内容也会发生变化,因为这只是引用.</p>
<p>举例:</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p"></span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p"></span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p"></span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p"></span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p"></span><span class="p">&gt;</span>
        <span class="c1">//函数 a 有一个私有变量 p 和一个内部函数 innerA
</span><span class="c1"></span>        <span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>                      <span class="c1">//外部闭包域 ,一个名为 a 的 Function 对象
</span><span class="c1"></span>            <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                      <span class="c1">//私有变量 p
</span><span class="c1"></span>            <span class="kd">var</span> <span class="nx">innerA</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>      <span class="c1">//内部闭包域 ,一个名为 innerA 的 Function 对象
</span><span class="c1"></span>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span><span class="p">;</span>             <span class="c1">//对外部闭包域的私有变量进行了引用,故 innerA 对象的 function scope 会产生一个名为 closure 的对象属性,closure 对象内含有一个名为 p 的引用
</span><span class="c1"></span>            <span class="p">}</span>

            <span class="nx">innerA</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="c1">//输出0
</span><span class="c1"></span>            <span class="nx">p</span><span class="o">++</span><span class="p">;</span>
            <span class="nx">innerA</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="c1">//输出1
</span><span class="c1"></span>        <span class="p">}</span>
        <span class="nx">a</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
    <span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p>结果如下:
第一次调用innerA
<img src="/assets/4145638513-5610bb5f698ba_articlex.png" alt="图片描述">
第二次调用 innerA
<img src="/assets/671118991-5610bb7233cdb_articlex.png" alt="图片描述">
控制台输出
<img src="/assets/1929624999-5610bbac42b66_articlex.png" alt="图片描述"></p>
<hr>
<h2 id="-">回到主题 面试经典问题</h2>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p"></span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p"></span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p"></span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p"></span><span class="p">&gt;</span>
        <span class="c1">//面试经典问题:
</span><span class="c1"></span>
        <span class="kd">function</span> <span class="nx">onMyLoad</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
            <span class="cm">/*
</span><span class="cm">            抛出问题:
</span><span class="cm">                此题的目的是想每次点击对应目标时弹出对应的数字下标 0~4,但实际是无论点击哪个目标都会弹出数字5
</span><span class="cm">            问题所在:
</span><span class="cm">                arr 中的每一项的 onclick 均为一个函数实例(Function 对象),这个函数实例也产生了一个闭包域,
</span><span class="cm">                这个闭包域引用了外部闭包域的变量,其 function scope 的 closure 对象有个名为 i 的引用,
</span><span class="cm">                外部闭包域的私有变量内容发生变化,内部闭包域得到的值自然会发生改变
</span><span class="cm">            */</span>
            <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&#34;p&#34;</span><span class="p">)</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
                <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
                    <span class="nx">alert</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span> <span class="na">onload</span><span class="o">=</span><span class="s">&#34;onMyLoad()&#34;</span><span class="p"></span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p"></span><span class="p">&gt;</span>产品一<span class="p">&lt;</span><span class="p">/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p"></span><span class="p">&gt;</span>产品二<span class="p">&lt;</span><span class="p">/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p"></span><span class="p">&gt;</span>产品三<span class="p">&lt;</span><span class="p">/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p"></span><span class="p">&gt;</span>产品四<span class="p">&lt;</span><span class="p">/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p"></span><span class="p">&gt;</span>产品五<span class="p">&lt;</span><span class="p">/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p>解决办法:</p>
<p>解决办法一</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/*
</span><span class="cm">解决思路:
</span><span class="cm">    增加若干个对应的闭包域空间(这里采用的是匿名函数),专门用来存储原先需要引用的内容(下标),不过只限于基本类型(基本类型值传递,对象类型引用传递)
</span><span class="cm"> */</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>

    <span class="c1">//声明一个匿名函数,若传进来的是基本类型则为值传递,故不会对实参产生影响,
</span><span class="c1"></span>    <span class="c1">//该函数对象有一个本地私有变量arg(形参) ,该函数的 function scope 的 closure 对象属性有两个引用,一个是 arr,一个是 i
</span><span class="c1"></span>    <span class="c1">//尽管引用 i 的值随外部改变 ,但本地私有变量(形参) arg 不会受影响,其值在一开始被调用的时候就决定了.
</span><span class="c1"></span>    <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">//onclick函数实例的 function scope 的 closure 对象属性有一个引用 arg,
</span><span class="c1"></span>            <span class="nx">alert</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span><span class="p">;</span>                 <span class="c1">//只要 外部空间的 arg 不变,这里的引用值当然不会改变
</span><span class="c1"></span>        <span class="p">}</span>
    <span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span>                              <span class="c1">//立刻执行该匿名函数,传递下标 i(实参)
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><p>解决办法二</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/*
</span><span class="cm">解决思路:
</span><span class="cm">    将下标作为对象属性(name:&#34;i&#34;,value:i的值)添加到每个数组项(p对象)中
</span><span class="cm">*/</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="c1">//为当前数组项即当前 p 对象添加一个名为 i 的属性,值为循环体的 i 变量的值,
</span><span class="c1"></span>    <span class="c1">//此时当前 p 对象的 i 属性并不是对循环体的 i 变量的引用,而是一个独立p 对象的属性,属性值在声明的时候就确定了
</span><span class="c1"></span>    <span class="c1">//(基本类型的值都是存在栈中的,当有一个基本类型变量声明其等于另一个基本变量时,此时并不是两个基本类型变量都指向一个值,而是各自有各自的值,但值是相等的)
</span><span class="c1"></span>    <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">i</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>解决办法三</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/*
</span><span class="cm">解决思路:
</span><span class="cm">    与解决办法一有点相似但却有点不太相似.
</span><span class="cm">    相似点:同样是增加若干个对应的闭包域空间用来存储下标
</span><span class="cm">    不同点:解决办法一是在新增的匿名闭包空间内完成事件的绑定,而此例是将事件绑定在新增的匿名函数返回的函数上
</span><span class="cm">
</span><span class="cm">    此时绑定的函数中的 function scope 中的 closure 对象的 引用 arg 是指向将其返回的匿名函数的私有变量 arg
</span><span class="cm"> */</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">alert</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>解决办法四</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/*
</span><span class="cm">解决思路与解决办法一相同
</span><span class="cm"> */</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
       <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
        <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">alert</span><span class="p">(</span><span class="nx">temp</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>解决办法五</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/*
</span><span class="cm">解决思路与解决办法三及四相同
</span><span class="cm"> */</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
        <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">alert</span><span class="p">(</span><span class="nx">temp</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>解决办法六</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/*
</span><span class="cm">解决思路:
</span><span class="cm">    将下标添加为绑定函数的属性
</span><span class="cm"> */</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">.</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span>      <span class="c1">//arguments 参数对象  arguments.callee 参数对象所属函数
</span><span class="c1"></span>    <span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="nx">i</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>解决办法七</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/*
</span><span class="cm">解决思路:
</span><span class="cm">    通过 new 使用 Function 的构造函数 创建 Function 实例实现,由于传入的函数体的内容是字符串,故 Function 得到的是一个字符串拷贝,而没有得到 i 的引用(这里是先获取 i.toString()然后与前后字符串拼接成一个新的字符串,Function 对其进行反向解析成 JS 代码)
</span><span class="cm"> */</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&#34;alert(&#34;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">;</span><span class="c1">//每 new 一个 Function 得到一个 Function 对象(一个函数),有自己的闭包域
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><p>解决办法八</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/*
</span><span class="cm">解决思路:
</span><span class="cm">    直接通过 Function 返回一个函数
</span><span class="cm">    与解决办法七的不同之处在于:
</span><span class="cm">        解决办法七使用 new,使用了 new,此时 Function 函数就被当成构造器可以用来构造一个 Function 实例返回
</span><span class="cm">        当前解决办法没有使用 new ,即将 Function 函数当成一个函数,传入参数返回一个新函数;
</span><span class="cm">        其实此处 new 与不 new 只是的区别在于:
</span><span class="cm">            使用了 new 即 Function 函数充当构造器,由 JS 解析器生产一个新的对象,构造器内的 this 指向该新对象;
</span><span class="cm">            不实用 new 即 Function 函数依旧是函数,由函数内部自己生产一个实例返回.
</span><span class="cm"> */</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&#34;alert(&#34;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div><p>解决办法九
使用ES6新语法 let 关键字 由于是新东西 各浏览器支持不同
chrome 及 opera支持以下语法</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;application/javascript&#34;</span><span class="p"></span><span class="p">&gt;</span>
    <span class="s2">&#34;use strict&#34;</span><span class="p">;</span><span class="c1">//使用严格模式,否则报错 SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&#34;p&#34;</span><span class="p">)</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
        <span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span><span class="c1">//创建一个块级变量
</span><span class="c1"></span>        <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">alert</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div><p>在 chrome 查看</p>
<p><img src="/assets/3794450097-5621bb86ed865_articlex.png" alt="图片描述"></p>
<p>可以在控制台看到 j 变量是一个 block 级的变量</p>
<p>待函数绑定完成后看数组项:</p>
<p><img src="/assets/21086713-5621bc16b05f6_articlex.png" alt="图片描述">
此时的该数组项的<!-- raw HTML omitted -->的 Block 域有个 j 存储的就是对应的数组下标
firefox支持一下语法</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;application/javascript;version=1.7&#34;</span><span class="p"></span><span class="p">&gt;</span>
    <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&#34;p&#34;</span><span class="p">)</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
        <span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
        <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">alert</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div><p>由于新语法各大厂商的支持尚未规范故暂不不推荐使用</p>
<p>解决办法大同小异,只要理解其中的实质,可以写出多多的解决办法</p>
]]></content>
		</item>
		
		<item>
			<title>[JS] 浅谈在 JS 中使用 Object 的 watch 方法监控对象属性</title>
			<link>https://tangzixiang.github.io/posts/2019/%E6%B5%85%E8%B0%88%E5%9C%A8js%E4%B8%AD%E4%BD%BF%E7%94%A8object%E7%9A%84watch%E6%96%B9%E6%B3%95%E7%9B%91%E6%8E%A7%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/</link>
			<pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E6%B5%85%E8%B0%88%E5%9C%A8js%E4%B8%AD%E4%BD%BF%E7%94%A8object%E7%9A%84watch%E6%96%B9%E6%B3%95%E7%9B%91%E6%8E%A7%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/</guid>
			<description>MDN 对其的解释为:
概述: 监视一个对象的某个属性是否发生变化,在该属性变化时立即触发指定的回调函数. 语法: object.watch(prop, handler) 参数: prop 想要监视值是否发生变化的指定对象的某个属性的属性名称 handler 当指定的属性发生变化时执行的回调函数  在 DHTML.js内查看其声明如下:
可以看到这两个方法是只针对 Gecko 内核的浏览器使用的(FF 是使用的 Gecko 内核). wacth 方法有两个参数,第一个参数是一个字符串,代表需要监视的属性名,第二个参数是个回调函数 unwatch 方法只有一个参数,代表需要取消监视的属性名.
使用举例:
var o = {p:1}; o.watch(&amp;#34;p&amp;#34;, function (id, oldValue, newValue) { console.log(&amp;#34;o.&amp;#34;+id +&amp;#34; 由 &amp;#34;+oldValue +&amp;#34; 变为 &amp;#34;+newValue); return newValue;//注意点 }); o.p = 2; o.p = 3; delete o.p; o.p = 4; 输出结果为:
这里需要注意的是回调函数必须返回一个值,返回的值会覆盖原有的值(若无返回值默认返回的是 undefined),可以返回新值
使用watch 方法来监视对象的属性
//声明一个类 Person = function (name, age) { this.watch(&amp;#34;age&amp;#34;,Person.prototype._isValidAssignment); this.</description>
			<content type="html"><![CDATA[<p>MDN 对其的解释为:</p>
<pre><code>概述:
    监视一个对象的某个属性是否发生变化,在该属性变化时立即触发指定的回调函数.
语法:
    object.watch(prop, handler)
参数:
    prop
    想要监视值是否发生变化的指定对象的某个属性的属性名称
    handler
    当指定的属性发生变化时执行的回调函数
</code></pre>
<p>在 DHTML.js内查看其声明如下:</p>
<p><img src="/assets/2462527882-561d1d0bc43a1_articlex.png" alt="图片描述"></p>
<p>可以看到这两个方法是只针对 Gecko 内核的浏览器使用的(FF 是使用的 Gecko 内核).
wacth 方法有两个参数,第一个参数是一个字符串,代表需要监视的属性名,第二个参数是个回调函数
unwatch 方法只有一个参数,代表需要取消监视的属性名.</p>
<p>使用举例:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span><span class="nx">p</span><span class="o">:</span><span class="mi">1</span><span class="p">}</span><span class="p">;</span>

<span class="nx">o</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s2">&#34;p&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;o.&#34;</span><span class="o">+</span><span class="nx">id</span> <span class="o">+</span><span class="s2">&#34; 由 &#34;</span><span class="o">+</span><span class="nx">oldValue</span> <span class="o">+</span><span class="s2">&#34; 变为 &#34;</span><span class="o">+</span><span class="nx">newValue</span><span class="p">)</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">newValue</span><span class="p">;</span><span class="c1">//注意点
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
<span class="nx">o</span><span class="p">.</span><span class="nx">p</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="nx">o</span><span class="p">.</span><span class="nx">p</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="k">delete</span> <span class="nx">o</span><span class="p">.</span><span class="nx">p</span><span class="p">;</span>
<span class="nx">o</span><span class="p">.</span><span class="nx">p</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</code></pre></div><p>输出结果为:</p>
<p><img src="/assets/2994811273-561d1f30eac09_articlex.png" alt="图片描述"></p>
<p>这里需要注意的是回调函数必须返回一个值,返回的值会覆盖原有的值(若无返回值默认返回的是 undefined),可以返回新值</p>
<p>使用watch 方法来监视对象的属性</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//声明一个类
</span><span class="c1"></span><span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s2">&#34;age&#34;</span><span class="p">,</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_isValidAssignment</span><span class="p">)</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">,</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_isValidAssignment</span><span class="p">)</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
<span class="p">}</span><span class="p">;</span>

<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&#34; , &#34;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span>
<span class="p">}</span><span class="p">;</span>
<span class="c1">//定义语义上的私有方法
</span><span class="c1"></span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_isValidAssignment</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span><span class="nx">oldVale</span><span class="p">,</span><span class="nx">newValue</span><span class="p">)</span><span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">id</span> <span class="o">==</span> <span class="s2">&#34;name&#34;</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">!</span><span class="nx">newValue</span> <span class="o">||</span> <span class="nx">newValue</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">30</span><span class="p">)</span><span class="p">)</span><span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">RangeError</span><span class="p">(</span><span class="s2">&#34;不合法的名字 &#34;</span><span class="o">+</span> <span class="k">this</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">id</span> <span class="o">==</span> <span class="s2">&#34;age&#34;</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">newValue</span> <span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="nx">newValue</span> <span class="o">&gt;</span><span class="mi">200</span><span class="p">)</span><span class="p">)</span><span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">RangeError</span><span class="p">(</span><span class="s2">&#34;不合法的年龄 &#34;</span><span class="o">+</span> <span class="k">this</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">newValue</span><span class="p">;</span><span class="c1">//重点,必须返回
</span><span class="c1"></span><span class="p">}</span>

<span class="nx">will</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;will&#34;</span><span class="p">,</span><span class="mi">29</span><span class="p">)</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">will</span><span class="p">)</span><span class="p">;</span>

<span class="k">try</span><span class="p">{</span>
    <span class="nx">will</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>
<span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">try</span><span class="p">{</span>
    <span class="nx">will</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span><span class="p">;</span>
<span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>输出结果如下:
<img src="/assets/350254057-561d20512c0bc_articlex.png" alt="图片描述"></p>
<p>最后引入 MDN 的一段描述与注意事项</p>
<p><img src="/assets/3749700858-561d233c71ccd_articlex.png" alt="图片描述"></p>
]]></content>
		</item>
		
		<item>
			<title> [JS] 浅谈 JS 创建对象的 8 种模式</title>
			<link>https://tangzixiang.github.io/posts/2019/%E6%B5%85%E8%B0%88-js-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84-8-%E7%A7%8D%E6%A8%A1%E5%BC%8F/</link>
			<pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E6%B5%85%E8%B0%88-js-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84-8-%E7%A7%8D%E6%A8%A1%E5%BC%8F/</guid>
			<description>摘要  Objct 模式 工厂模式 构造器模式 通过 Function 对象实现 prototype 模式 构造器与原型方式的混合模式 动态原型模式 混合工厂模式  Object 模式 var o1 = {};//字面量的表现形式 var o2 = new Object; var o3 = new Object(); var o4 = new Object(null); var o5 = new Object(undefined); var o6 = Object.create(Object.prototype);//等价于 var o = {};//即以 Object.prototype 对象为一个原型模板,新建一个以这个原型模板为原型的对象 //区别 var o7 = Object.create(null);//创建一个原型为 null 的对象 在 chrome 里查看各个新建对象的区别: 可以看出前6种模式创建出来的对象都是一样的,第七种不同点在于其虽然也为 Object 对象但其无任何属性(包括没有任何可以继承的属性,因为创建的时候没有指定其原型)
工厂模式 //工厂方法1 通过一个方法来创建对象 利用 arguments 对象获取参数设置属性(参数不直观,容易出现问题) function createCar(){ var oTemp = new Object(); oTemp.</description>
			<content type="html"><![CDATA[<h2 id="heading">摘要</h2>
<ul>
<li>Objct 模式</li>
<li>工厂模式</li>
<li>构造器模式</li>
<li>通过 Function 对象实现</li>
<li>prototype 模式</li>
<li>构造器与原型方式的混合模式</li>
<li>动态原型模式</li>
<li>混合工厂模式</li>
</ul>
<h2 id="object-"><strong>Object 模式</strong></h2>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">o1</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="c1">//字面量的表现形式
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">o2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">o3</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">o4</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">o5</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">o6</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span><span class="p">;</span><span class="c1">//等价于 var o = {};//即以 Object.prototype 对象为一个原型模板,新建一个以这个原型模板为原型的对象
</span><span class="c1"></span><span class="c1">//区别
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">o7</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span><span class="p">;</span><span class="c1">//创建一个原型为 null 的对象
</span></code></pre></div><p>在 chrome 里查看各个新建对象的区别:
<img src="/assets/3840891059-561f067680136_articlex.png" alt="图片描述"></p>
<p>可以看出前6种模式创建出来的对象都是一样的,第七种不同点在于其虽然也为 Object 对象但其无任何属性(包括没有任何可以继承的属性,因为创建的时候没有指定其原型)</p>
<h2 id="heading1"><strong>工厂模式</strong></h2>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//工厂方法1 通过一个方法来创建对象 利用 arguments 对象获取参数设置属性(参数不直观,容易出现问题)
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">createCar</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="kd">var</span> <span class="nx">oTemp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">oTemp</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span><span class="c1">//直接给对象添加属性，每个对象都有直接的属性
</span><span class="c1"></span>    <span class="nx">oTemp</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span>
    <span class="nx">oTemp</span><span class="p">.</span><span class="nx">showName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span><span class="p">;</span><span class="c1">//每个对象都有一个 showName 方法版本
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">oTemp</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">createCar</span><span class="p">(</span><span class="s2">&#34;tom&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">showName</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="c1">//在 JS 中没有传递的实参,实际形参值为 undefined(这里的 age 为 undefined)
</span><span class="c1"></span><span class="nx">createCar</span><span class="p">(</span><span class="s2">&#34;tim&#34;</span><span class="p">,</span><span class="mi">80</span><span class="p">)</span><span class="p">.</span><span class="nx">showName</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">createCar</span><span class="p">(</span><span class="s2">&#34;tom&#34;</span><span class="p">)</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">)</span><span class="p">;</span><span class="c1">//true 判断对象是否 Object 类或子类
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//工厂方法2 通过传参设置属性(参数直观明了)
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">createCar</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">)</span><span class="p">{</span>
    <span class="kd">var</span> <span class="nx">oTemp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
    <span class="nx">oTemp</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span><span class="c1">//直接给对象添加属性，每个对象都有直接的属性
</span><span class="c1"></span>    <span class="nx">oTemp</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
    <span class="nx">oTemp</span><span class="p">.</span><span class="nx">showName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span><span class="p">;</span><span class="c1">//每个对象都有一个 showName 方法版本
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">oTemp</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">createCar</span><span class="p">(</span><span class="s2">&#34;tom&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">showName</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="nx">createCar</span><span class="p">(</span><span class="s2">&#34;tim&#34;</span><span class="p">,</span><span class="mi">80</span><span class="p">)</span><span class="p">.</span><span class="nx">showName</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">createCar</span><span class="p">(</span><span class="s2">&#34;tom&#34;</span><span class="p">)</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">)</span><span class="p">;</span><span class="c1">//true 判断对象是否 Object 类或子类
</span></code></pre></div><h2 id="heading2"><strong>构造器模式</strong></h2>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//构造器方法1
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">Car</span><span class="p">(</span><span class="nx">sColor</span><span class="p">,</span><span class="nx">iDoors</span><span class="p">)</span><span class="p">{</span>  <span class="c1">//声明为构造器时需要将函数名首字母大写
</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">sColor</span><span class="p">;</span>      <span class="c1">//构造器内直接声明属性
</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">doors</span> <span class="o">=</span> <span class="nx">iDoors</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">showColor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
    <span class="p">}</span><span class="p">;</span><span class="c1">//每个 Car 对象都有自己的 showColor方法版本
</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">showDoor</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">doors</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>使用方法1的问题很明显,没办法是 showDoor 方法重用,每次新建一个对象就要在堆里新开辟一篇空间.改进如下</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//构造器方法2
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">showDoor</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>      <span class="c1">//定义一个全局的 Function 对象
</span><span class="c1"></span>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">doors</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Car</span><span class="p">(</span><span class="nx">sColor</span><span class="p">,</span><span class="nx">iDoors</span><span class="p">)</span><span class="p">{</span><span class="c1">//构造器
</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">sColor</span><span class="p">;</span>      <span class="c1">//构造器内直接声明属性
</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">doors</span> <span class="o">=</span> <span class="nx">iDoors</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">showColor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
    <span class="p">}</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">showDoor</span> <span class="o">=</span> <span class="nx">showDoor</span><span class="p">;</span><span class="c1">//每个 Car 对象共享同一个 showDoor 方法版本(方法有自己的作用域，不用担心变量被共享)
</span><span class="c1"></span><span class="p">}</span>

<span class="nx">alert</span><span class="p">(</span><span class="k">new</span> <span class="nx">Car</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="p">.</span><span class="nx">showColor</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="c1">//通过构造器创建一个对象并调用其对象方法
</span></code></pre></div><p>上面出现的问题就是语义不够清除,体现不出类的封装性,改进为 prototype 模式</p>
<h2 id="-function-"><strong>通过 Function 对象实现创建对象</strong></h2>
<p>我们知道每声明一个函数实际是创建了一个Function 实例 <a href="../%E6%B5%85%E8%B0%88%E7%BB%86%E8%AF%B4-js-%E5%87%BD%E6%95%B0callapply%E9%87%8D%E8%BD%BD">JS 函数</a>.</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">function_name</span><span class="p">(</span><span class="nx">param1</span><span class="p">,</span><span class="nx">param2</span><span class="p">)</span><span class="p">{</span><span class="nx">alert</span><span class="p">(</span><span class="nx">param1</span><span class="p">)</span><span class="p">;</span><span class="p">}</span>
<span class="c1">//等价于
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">function_name</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&#34;param1&#34;</span><span class="p">,</span><span class="s2">&#34;pram2&#34;</span><span class="p">,</span><span class="s2">&#34;alert(param1);&#34;</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">Car2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&#34;sColor&#34;</span><span class="p">,</span><span class="s2">&#34;iDoors&#34;</span><span class="p">,</span>
         <span class="s2">&#34;this.color = sColor;&#34;</span><span class="o">+</span>
         <span class="s2">&#34;this.doors = iDoors;&#34;</span><span class="o">+</span>
         <span class="s2">&#34;this.showColor = function(){ return this.color; }&#34;</span>
<span class="p">)</span><span class="p">;</span>
<span class="nx">alert</span><span class="p">(</span><span class="k">new</span> <span class="nx">Car2</span><span class="p">(</span><span class="s2">&#34;blue&#34;</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="p">.</span><span class="nx">showColor</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><h2 id="prototype-"><strong>prototype 模式</strong></h2>
<ul>
<li>类通过 prototype 属性添加的属性与方法都是绑定在这个类的 prototype 域(实际为一个 Prototype 对象)中，绑定到这个域中的属性与方法只有一个版本，只会创建一次.</li>
<li>类的实例对象可以直接像调用自己的属性一样调用该类的 prototype 域中的属性与方法，类可以通过调用 prototype 属性来间接调用prototype 域内的属性与方法.</li>
</ul>
<p>注意：通过类实例化出对象后对象内无 prototype 属性，但对象可直接像访问属性一样的访问类的 prototype 域的内容，实例对象有个私有属性 __proto__, __proto__ 属性内含有类的 prototype 域内的属性与方法</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">Car3</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="c1">//用空构造函数设置类名
</span><span class="c1"></span><span class="nx">Car3</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&#34;blue&#34;</span><span class="p">;</span><span class="c1">//每个对象都共享相同属性
</span><span class="c1"></span><span class="nx">Car3</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">doors</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="nx">Car3</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">drivers</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="s2">&#34;Mike&#34;</span><span class="p">,</span><span class="s2">&#34;John&#34;</span><span class="p">)</span><span class="p">;</span>
<span class="nx">Car3</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">showColor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">;</span><span class="c1">//每个对象共享一个方法版本，省内存。
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">car3_1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car3</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">car3_2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car3</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>

<span class="nx">alert</span><span class="p">(</span><span class="nx">car3_1</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="p">;</span><span class="c1">//blue
</span><span class="c1"></span><span class="nx">alert</span><span class="p">(</span><span class="nx">car3_2</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="p">;</span><span class="c1">//blue
</span><span class="c1"></span><span class="nx">alert</span><span class="p">(</span><span class="nx">Car3</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="p">;</span><span class="c1">//blue
</span><span class="c1"></span>
<span class="nx">car3_1</span><span class="p">.</span><span class="nx">drivers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&#34;Bill&#34;</span><span class="p">)</span><span class="p">;</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">car3_1</span><span class="p">.</span><span class="nx">drivers</span><span class="p">)</span><span class="p">;</span><span class="c1">//&#34;Mike&#34;,&#34;John&#34;,&#34;Bill&#34;
</span><span class="c1"></span><span class="nx">alert</span><span class="p">(</span><span class="nx">car3_2</span><span class="p">.</span><span class="nx">drivers</span><span class="p">)</span><span class="p">;</span><span class="c1">//&#34;Mike&#34;,&#34;John&#34;,&#34;Bill&#34;
</span><span class="c1"></span><span class="nx">alert</span><span class="p">(</span><span class="nx">Car3</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">drivers</span><span class="p">)</span><span class="p">;</span><span class="c1">//&#34;Mike&#34;,&#34;John&#34;,&#34;Bill&#34;
</span><span class="c1"></span>
<span class="c1">//直接修改实例对象的属性,解析器会先去找实例对象是否有这个属性(不会去找实例对象的 __proto__ 属性内的那些类的 prototype 属性，而是直接查看这个实例是否有对应的属性(与 __proto__ 同级))
</span><span class="c1"></span><span class="c1">//如果没有则直接给这个实例对象添加该属性，但不会修改类的prototype域的同名属性，既实例对象的_proto_属性内的那些类 prototype 域属性不会被修改
</span><span class="c1"></span><span class="nx">car3_1</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&#34;red&#34;</span><span class="p">;</span><span class="c1">//car3_1对象内无名为 color 的对象属性，故将该属性添加到该对象上
</span><span class="c1"></span>
<span class="c1">//解析器对实例对象读取属性值的时候会先查找该实例有无同名的直接属性
</span><span class="c1"></span><span class="c1">//如果没有，则查找 __proto__ 属性内保存的那些 当前类的 prototype 域的属性
</span><span class="c1"></span><span class="c1">//有就返回，无则继续查找是否有原型链中的对应的方法属性
</span><span class="c1"></span><span class="c1">//有就返回，无则返回undefined
</span><span class="c1"></span><span class="nx">alert</span><span class="p">(</span><span class="nx">car3_1</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="p">;</span><span class="c1">//red
</span><span class="c1"></span><span class="nx">alert</span><span class="p">(</span><span class="nx">car3_2</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="p">;</span><span class="c1">//blue
</span><span class="c1"></span><span class="nx">alert</span><span class="p">(</span><span class="nx">car3_2</span><span class="p">.</span><span class="nx">color2</span><span class="p">)</span><span class="p">;</span><span class="c1">//undefined
</span><span class="c1"></span>
<span class="c1">//直接修改类的 prototype 域内的属性，不会影响该类的实例对象的对象属性，但会影响实例对象的 __proto__ 属性( __proto__ 属性内存放的是类的 prototype 域的内容)
</span><span class="c1"></span><span class="nx">Car3</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&#34;black&#34;</span><span class="p">;</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">car3_1</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="p">;</span><span class="c1">//red 该对象有同名的直接属性，故不会去 __proto__ 属性内查找类的 prototype 域的属性
</span><span class="c1"></span><span class="nx">alert</span><span class="p">(</span><span class="nx">car3_2</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="p">;</span><span class="c1">//black 受影响
</span><span class="c1"></span>
<span class="c1">//直接修改实例对象的方法,解析器会先去找实例对象是否有这个方法(不会去找实例对象的 __proto__ 属性内的那些类的 prototype 域的方法，而是直接查看这个实例是否有对应的方法(与 __proto__ 同级))
</span><span class="c1"></span><span class="c1">//如果没有则直接给这个实例对象添加该方法，但不会修改类的prototype域的同名方法，既实例对象的 __proto__ 属性内的那些类 prototype 域方法不会被修改
</span><span class="c1"></span><span class="c1">//car3_1对象内无名为 showColor 的对象方法属性，故将该方法属性添加到该对象上
</span><span class="c1"></span><span class="nx">car3_1</span><span class="p">.</span><span class="nx">showColor</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;new function&#34;</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//解析器对实例对象调用方法属性的时候会先查找该实例有无同名的直接方法属性
</span><span class="c1"></span><span class="c1">//如果没有，则查找_proto_属性内保存的那些 当前类的 prototype 域的方法属性
</span><span class="c1"></span><span class="c1">//有就返回，无则继续查找是否有原型链中的对应的方法属性
</span><span class="c1"></span><span class="c1">//找到就返回,无则报错
</span><span class="c1"></span>
<span class="nx">car3_1</span><span class="p">.</span><span class="nx">showColor</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="c1">//new function
</span><span class="c1"></span><span class="nx">car3_2</span><span class="p">.</span><span class="nx">showColor</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="c1">//blue
</span><span class="c1"></span><span class="nx">car3_1</span><span class="p">.</span><span class="nx">abcd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="c1">//直接报错
</span><span class="c1"></span>
<span class="c1">//直接修改类的 prototype 域内的方法属性，不会影响该类的实例对象的方法属性，但会影响实例对象的 __proto__ 属性(_proto_属性内存放的是类的 prototype 域的内容)
</span><span class="c1"></span><span class="nx">Car3</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">showColor</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;second function&#34;</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">car3_1</span><span class="p">.</span><span class="nx">showColor</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="c1">//new function 该对象有同名的方法属性，故不会去 __proto__ 属性内查找类的 prototype 域的方法属性
</span><span class="c1"></span><span class="nx">car3_2</span><span class="p">.</span><span class="nx">showColor</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="c1">//second function 受影响
</span></code></pre></div><p>可以看出使用该方法虽然说打打减少了内存的浪费,但依旧有问题,某个对象的属性一旦改变,所有由该类实例化得到的对象的 __proto__ 内属性值也会跟着变(实为引用),改进如下</p>
<h3 id="heading3"><strong>构造器方式与原型方式的混合模式</strong></h3>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//每个对象有专属的属性不会与其他对象共享
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">Car4</span><span class="p">(</span><span class="nx">sColor</span><span class="p">,</span><span class="nx">iDoors</span><span class="p">)</span><span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_color</span> <span class="o">=</span> <span class="nx">sColor</span><span class="p">;</span><span class="c1">//私有属性变量名称头加下划线标识
</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">_doors</span> <span class="o">=</span> <span class="nx">iDoors</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">drivers</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="s2">&#34;Mike&#34;</span><span class="p">,</span><span class="s2">&#34;John&#34;</span><span class="p">)</span><span class="p">;</span><span class="c1">//公有属性标识
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">//所有对象共享一个方法版本，减少内存浪费
</span><span class="c1"></span><span class="nx">Car4</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">showColor</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_color</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">car4_1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car4</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">car4_2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car4</span><span class="p">(</span><span class="s2">&#34;blue&#34;</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="p">;</span>

<span class="nx">car4_1</span><span class="p">.</span><span class="nx">drivers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&#34;Bill&#34;</span><span class="p">)</span><span class="p">;</span>

<span class="nx">alert</span><span class="p">(</span><span class="nx">car4_1</span><span class="p">.</span><span class="nx">drivers</span><span class="p">)</span><span class="p">;</span><span class="c1">//&#34;Mike&#34;,&#34;John&#34;,&#34;Bill&#34;
</span><span class="c1"></span><span class="nx">alert</span><span class="p">(</span><span class="nx">car4_2</span><span class="p">.</span><span class="nx">drivers</span><span class="p">)</span><span class="p">;</span><span class="c1">//&#34;Mike&#34;,&#34;John&#34;
</span></code></pre></div><p>这也是常用的创建对象方式之一</p>
<h2 id="heading4"><strong>动态原型模式</strong></h2>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">Car5</span><span class="p">(</span><span class="nx">sColor</span><span class="p">,</span><span class="nx">iDoors</span><span class="p">,</span><span class="nx">iMpg</span><span class="p">)</span><span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">sColor</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">doors</span> <span class="o">=</span> <span class="nx">iDoors</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">mpg</span> <span class="o">=</span> <span class="nx">iMpg</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">drivers</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="s2">&#34;Mike&#34;</span><span class="p">,</span><span class="s2">&#34;John&#34;</span><span class="p">)</span><span class="p">;</span>

    <span class="c1">//使用标志(_initialized)来判断是否已给原型赋予了任何方法,保证方法永远只被创建并赋值一次
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">Car5</span><span class="p">.</span><span class="nx">_initialized</span> <span class="o">==</span> <span class="s2">&#34;undefined&#34;</span><span class="p">)</span><span class="p">{</span><span class="c1">//因为这里的标记是附加在类上,故如果后期直接对其进行修改,还是有可能出现再次创建的情况
</span><span class="c1"></span>        <span class="nx">Car5</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">showColor</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span><span class="c1">//为Car5添加一个存放在 prototype 域的方法
</span><span class="c1"></span>            <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span><span class="p">;</span>
        <span class="nx">Car5</span><span class="p">.</span><span class="nx">_initialized</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span><span class="c1">//设置一个静态属性
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">car5_1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car5</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">25</span><span class="p">)</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">car5_2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car5</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">25</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>这种模式使得定义类像强类型语言例如 java 等语言的定义模式</p>
<h2 id="heading5"><strong>混合工厂模式</strong></h2>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">Car6</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="kd">var</span> <span class="nx">oTempCar</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">;</span>
    <span class="nx">oTempCar</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&#34;blue&#34;</span><span class="p">;</span>
    <span class="nx">oTempCar</span><span class="p">.</span><span class="nx">doors</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="nx">oTempCar</span><span class="p">.</span><span class="nx">showColor</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">oTempCar</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">car6</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car6</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>由于在 Car6()构造函数内部调用了 new 运算符,所以将忽略第二个 new 运算符(位于构造函数之外),
在构造函数内部创建的对象被传递回变量car6,这种方式在对象方法的内部管理方面与经典方式(工厂方法)有着相同的问题.应尽量避免</p>
]]></content>
		</item>
		
		<item>
			<title>[JS] 浅谈细说 JS 函数(call,apply,重载)</title>
			<link>https://tangzixiang.github.io/posts/2019/%E6%B5%85%E8%B0%88%E7%BB%86%E8%AF%B4-js-%E5%87%BD%E6%95%B0callapply%E9%87%8D%E8%BD%BD/</link>
			<pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate>
			
			<guid>https://tangzixiang.github.io/posts/2019/%E6%B5%85%E8%B0%88%E7%BB%86%E8%AF%B4-js-%E5%87%BD%E6%95%B0callapply%E9%87%8D%E8%BD%BD/</guid>
			<description>摘要  什么是函数？ 函数的声明与调用 函数的重载 函数的独立性  什么是函数？ 引用 W3School 的原话:
函数是一组可以随时随地运行的语句。 函数是 ECMAScript 的核心。 函数是由这样的方式进行声明的：关键字 function、函数名、一组参数，以及置于括号中的待执行代码。 函数的基本语法是这样的： function functionName(arg0, arg1, ... argN) { statements }  函数的声明与调用 //声明函数的4种方法  //方法一 直接声明 function speak(word){ console.log(word) } //方法二 指定一个匿名函数 将其赋给一个变量,后面可以直接通过该变量调用该函数 var speak2 = function (word) { console.log(word); };//定义匿名函数需要注意最后需要加分号  //方法三 使用 Function对象 生成一个函数实例 var speak3 = new Function(&amp;#34;word&amp;#34;,&amp;#34;console.log(word);&amp;#34;); //方法四 使用 Function函数 返回函数实例 var speak4 = Function(&amp;#34;word&amp;#34;,&amp;#34;console.log(word);&amp;#34;); 调用函数基本方法
speak(&amp;#34;hello world for global !</description>
			<content type="html"><![CDATA[<h2 id="heading">摘要</h2>
<ul>
<li>什么是函数？</li>
<li>函数的声明与调用</li>
<li>函数的重载</li>
<li>函数的独立性</li>
</ul>
<h2 id="heading1"><strong>什么是函数？</strong></h2>
<p>引用 W3School 的原话:</p>
<pre><code>函数是一组可以随时随地运行的语句。

函数是 ECMAScript 的核心。

函数是由这样的方式进行声明的：关键字 function、函数名、一组参数，以及置于括号中的待执行代码。

函数的基本语法是这样的：
function functionName(arg0, arg1, ... argN) {
  statements
}
</code></pre>
<h2 id="heading2"><strong>函数的声明与调用</strong></h2>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//声明函数的4种方法
</span><span class="c1"></span>
<span class="c1">//方法一 直接声明
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">speak</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//方法二 指定一个匿名函数 将其赋给一个变量,后面可以直接通过该变量调用该函数
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">speak2</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">;</span><span class="c1">//定义匿名函数需要注意最后需要加分号
</span><span class="c1"></span>
<span class="c1">//方法三 使用 Function对象 生成一个函数实例 
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">speak3</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&#34;word&#34;</span><span class="p">,</span><span class="s2">&#34;console.log(word);&#34;</span><span class="p">)</span><span class="p">;</span>

<span class="c1">//方法四 使用 Function函数 返回函数实例
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">speak4</span> <span class="o">=</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&#34;word&#34;</span><span class="p">,</span><span class="s2">&#34;console.log(word);&#34;</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p><strong>调用函数基本方法</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">speak</span><span class="p">(</span><span class="s2">&#34;hello world for global !&#34;</span><span class="p">)</span><span class="p">;</span>

<span class="k">this</span><span class="p">.</span><span class="nx">speak</span><span class="p">(</span><span class="s2">&#34;hello world for this !&#34;</span><span class="p">)</span><span class="p">;</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">speak</span><span class="p">(</span><span class="s2">&#34;hello world for window !&#34;</span><span class="p">)</span><span class="p">;</span>

</code></pre></div><p><strong>调用函数的高级方法</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">speak</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="s2">&#34;hello world with call !&#34;</span><span class="p">)</span><span class="p">;</span><span class="c1">//null 代表是用全局对象 window 调用
</span><span class="c1"></span>
<span class="nx">speak</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;hello world with apply !&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>输出结果:
<img src="/assets/3058469592-561bba707d079_articlex.png" alt="图片描述"></p>
<h3 id="heading3">方法一:</h3>
<p>这里大家不言而喻,简单明了,直接就是声明了一个函数,需要指出的是,默认写的函数在不依附其他对象的情况下均为全局函数,即成为 window 对象的成员,可以直接使用 window(Window 对象的实例,Window 对象实现了核心 JavaScript 所定义的所有全局属性和方法)调用,或者通过 this 调用,在这里 JS 顶层代码中 this 指向的就是 window</p>
<p>每当我们使用方法一声明了一个函数的时候,实际是生成了一个 Function 对象的实例.即每个函数其实质都是一个 Function 对象实例.</p>
<p>注意:
JS 解析器每解析到一个函数的时候,都会在堆内存内划分出一块空间来存储创建该 Function 实例</p>
<h3 id="heading4">方法二:</h3>
<p>首先 JS 解析器解析到一个函数的时候,在堆内存内划分出一块空间来存储创建该 Function 实例,接着在当前栈内存
创建一个叫 speak2 的变量,这个变量有个值,这个值是一个地址,指向的是堆内存中的那个 Function 实例.实际上这就是大名鼎鼎的引用.</p>
<h3 id="heading5">方法三:</h3>
<p>与方法一和方法二不同的是,前两个方法都是声明好让解析器去解析,让解析器生成 Function 实例(就是上面声明的函数,解析器调用 Function 构造器来生成实例,这些步骤是我们看不到的),方法三是我们手动调用 Function 构造器生成 Function 实例(步骤掌握在自己的手里)</p>
<h3 id="heading6">方法四:</h3>
<p>与方法三不同的地方就是没有 new,在这里 new 与没 new 的区别就是当有 new 的时候 Function 函数充当一个构造器,new 后返回的就是实例化后得到的对象(此时Function 内部的 this指向的就是当前生成的对象),不使用 new 的话就是把 Function 函数看做一个普通函数直接调用,直接调用 Function 函数让其在内部(我们看不到)new 一个实例返回,本质是一样的.</p>
<h3 id="call--apply-"><strong>call 方法与 apply 方法</strong></h3>
<p>查看EcmaScript.js
<img src="/assets/3719987583-561bc70feffbe_articlex.png" alt="图片描述"></p>
<p>可以看到 call 方法与 apply 方法的区别:</p>
<ul>
<li>他们的第一个参数指的是调用该方法对象</li>
<li>call 方法的第二个参数是可变数组参数,即可以传入多个参数,非传入一个数组.传入的多个参数对应的是被调用方法的各参数.</li>
<li>apply 方法的第二个参数是一个数组对象,即可以直接传入一个数组对象,数组对象的每项对应的是被调用的方法的各参数.</li>
</ul>
<h2 id="heading7"><strong>函数的重载</strong></h2>
<p>在 JS 中,并不像其他强类型语言一样可以声明重载函数,若在原先声明的函数后再声明一个不同参数数量的函数(JS是弱语言, 声明的函数不需要指明参数类型),解析器会用后面声明的函数覆盖前面声明的函数.那我们该如何实现呢.</p>
<h3 id="arguments-"><strong>arguments 对象</strong></h3>
<p>在每个函数都有一个arguments 属性,同样查看 EcmaScript.js
<img src="/assets/1185226343-561bcb5feb50b_articlex.png" alt="图片描述"></p>
<p>当生成一个函数实例后,解析器会赋给 arguments 属性一个 Arguments 对象实例,这个实例是什么,再看 EcmaScript.js
<img src="/assets/3778388675-561bcc1fd1002_articlex.png" alt="图片描述"></p>
<p>可以得知其为一个对象同时为数组对象的子类,故可以将其当初数组对象使用.
函数实例中的 arguments 对象(可以算是一个数组)的数组项内容便是我们在调用函数时进行传递的参数.只要我们有传参,这个属性就有数组项,否则数组长度为0,故我们可以通过 arguments.length 来查看其得到的形参的数量.</p>
<p>有了上面的基础便可实现重载函数
这里引用 W3School 的例子</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">doAdd</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">doAdd</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="p">;</span>	    <span class="c1">//输出 &#34;15&#34;
</span><span class="c1"></span><span class="nx">doAdd</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span><span class="p">;</span>	<span class="c1">//输出 &#34;60&#34;
</span></code></pre></div><h2 id="heading8"><strong>函数的独立性</strong></h2>
<p>我们都知道,每当我们声明了一个函数,其实际为一个 Function 实例,那它独立在哪呢,如何体现呢
看一下代码:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">Dog</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">)</span><span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">showName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Cat</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">)</span><span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">showName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">(</span><span class="s2">&#34;wangwang&#34;</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">cat</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cat</span><span class="p">(</span><span class="s2">&#34;miaomiao&#34;</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="p">;</span>

<span class="nx">dog</span><span class="p">.</span><span class="nx">showName</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="nx">cat</span><span class="p">.</span><span class="nx">showName</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="nx">dog</span><span class="p">.</span><span class="nx">showName</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">cat</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>输出结果为:
<img src="/assets/664011739-561bd5cc72416_articlex.png" alt="图片描述"></p>
<p>解释:</p>
<p>每当我们在函数内使用 this 的时候,无非这几种情况:</p>
<ol>
<li>作为构造器生成的实例对象</li>
<li>作为调用当前方法的对象</li>
<li>在 JS 顶层代码可以使用 this 代表 window 调用全局函数等</li>
</ol>
<p>故当我们使用 call 方法调用某个对象的方法时,虽然从代码语义上看,这个所属方法是属于该对象的(showName 属于 Dog 或 Cat),但是由于函数有用其特殊的独立性即有以上几个关于 this 的特点,导致最终的结果是不同的.</p>
<p>当我们直接调用 dog 的 showName 方法时,showName 方法内的 this 指向的是该dog 对象(Dog 实例).</p>
<p>我们知道调用 call 方法时需要传入的第一个参数即为调用当前函数亦或方法的对象,此时被调用的方法的 this 指向的实际为传入的第一个参数.即当我们通过 call 调通 dog 的 showName 方法时,
传入的第一个参数是 cat 对象,代表 dog 的 showName 方法的 this 此时指向的不是 dog 是 cat.最后输出的当然是 cat 的内容。</p>
<p>最后指出:在对函数进行传参时,若传的是 JS 的基本类型,则为值传递,否则为引用传递（传递的是参数的地址）。</p>
]]></content>
		</item>
		
	</channel>
</rss>
